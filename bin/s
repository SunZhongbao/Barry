#!/usr/bin/env bash

if true; then
    tt() {
        if test "$1" = -d; then
            rm -f ~/tmp/tt.txt
        fi
        echo $(date --rfc-3339=ns) "$*" >> ~/tmp/tt.txt
    }
    export -f tt
else
    tt() {
        true
    }
fi

tt -d start of s
if test "$s_how"; then
    true
elif is-tty-io; then
    s_how=tty
elif is-in-emacs; then
    s_how=emacs
fi

if echo $SHELLOPTS | grep -q xtrace; then
    exec >> ~/tmp/$(basename $0).x 2>&1
elif ! is-tty-io; then
    set -x
fi

use_clip=false
if test $# = 1 -a "$1" = '' || test $# = 0; then
    use_clip=true
    export S_TOP_WINDOW=$(sawfish-top-window)
    if [[ ${S_TOP_WINDOW,,} =~ kindle.exe ]]; then
        set -- $(getclip |
                     # print except the last line
                     perl -ne "$(
cat <<'EOF532544ecff5d'
# {%perl-mode%}
BEGIN {
    use Encode
}

$_ = decode_utf8($_);

s,(\p{Lo}) (?=\p{Lo}),$1,g;
print $line_2;
$line_2 = $line_1;
$line_1 = $_;

$_ = encode_utf8($_);
# {%/perl-mode%}
EOF532544ecff5d

)"
            )
    else
        set -- "$(xclip -o)"
    fi
fi

select_search_engine=true

if is-sawfish; then
    if test "$SAWFISH_CLICK" = t; then
        exec 9> ~/.cache/system-config/logs/s-sawfish-click.lock
        if ! flock -n 9; then
            (
                exec 9>/dev/null
                echo "Can't lock s: $$" | tee ~/tmp/s.lock ~/tmp/s.lock.$$
                bhj-notify s.$$ "Can't lock s $(fuser ~/.cache/system-config/logs/s-sawfish-click|xargs ps $$ |tee ~/tmp/s.lock)"
            )
            exit
        fi
        exec 2>~/tmp/s.txt
        echo "s: $@" 1>&2

        max_try=50

        start_event=$(sawfish-client -e '(event-name (last-event))'|tr -d \")
        start_event=${start_event,,}

        if [[ $start_event =~ m- ]]; then
            select_search_engine=true
        else
            select_search_engine=false
            if [[ ${start_event} =~ button1 ]] && test "$use_clip" = true; then
                tt start of engine $engineX $*
                s-dicts "$*"
                tt end of engine: $engineX $*
                exit
            fi
        fi

        rm -f ~/tmp/s.lock
    fi

    if test "$start_event" = '"F2"'; then
        start_event=super-button2
    elif test "$start_event" = '"F3"'; then
        start_event=super-button3
    fi

    if [[ $start_event =~ super-.*button ]]; then
        s_how=$(echo ${start_event} | grep -o -P -e 'button\d+' -i)
    fi
fi

last_search=~/.cache/system-config/logs/last-search.$s_how
set +x
search_engines=$(
    (
        if test -e $last_search; then
            cat $last_search;
        fi;

        cd ~/system-config/lib/s

        for x in *; do
            if test -e $x; then
                echo $x
            fi
        done
        cd ~/system-config/bin;
        (
            for x in search-* gerrit-browser-review; do
                echo $x;
            done
        )|sort -u
    ) | uniq-even-non-ajacent | grep .
              )

PATH=~/system-config/lib/s:$PATH

engine1=$(echo "$search_engines" | perl -ne 'print if 1..1' )

if test "$select_search_engine" = false; then
    engineX=$engine1
else
    engineX=$(select-args -o -p "Which search engine for $s_how?" $search_engines)
fi

if test "$select_search_engine" = true; then
    (
        sleep 2&
    )
fi
exec 9>/dev/null

function update-engine-order() {
    (
        for x in "$@"; do
            echo "$x"
        done
        cat $last_search
    ) | uniq-even-non-ajacent > $last_search.$$
    mv $last_search.$$ $last_search
}

if test -x ~/system-config/bin/"$engineX"; then
    update-engine-order "$engineX"
fi&

if test ! -x ~/system-config/bin/"$engineX" -a "${engineX:0:2}" = "s "; then
    tt start of engine $engineX $*
    s "${engineX:2}"
    tt end of engine: $engineX $*
    exit
fi

if test "$(sawfish-top-window)" = Wrench -a "$use_clip" = true; then
    set -- "$(getclip-android|perl -npe 's/(、|……。|。)$//')"
fi

tt start of engine $engineX $*

"$engineX" "$@"

tt end of engine: $engineX $*
