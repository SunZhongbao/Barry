#!/usr/bin/env perl
use strict;
use v5.10.1; # for say and switch
use autodie qw(:all);
use IPC::System::Simple qw(run runx capture capturex $EXITVAL EXIT_ANY);
binmode(STDOUT, ":utf8");
binmode(STDERR, ":utf8");
use Encode;
use utf8;
@ARGV = map {decode_utf8 $_} @ARGV;
use JSON;

my $json = JSON->new->utf8->canonical->pretty;


use Mojo::DOM;

(my $comment_doc = <<~'EOFc83131117f09') =~ s,^# .*org-mode.*,,gm;
# {%org-mode%}

# {%/org-mode%}
EOFc83131117f09

## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl -P '?"$comment_doc"' \
# f:html-file i:fieldconfig-id n:fieldconfig-name '?"must specify one and only one of name or id"'
## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("posix_default");



my $fieldconfig_id = "";
my $fieldconfig_name = "";
my $html_file = "";

my $handler_help = sub {
    print "$comment_doc";
    print "\n\n选项和参数：\n";
    printf "%6s", '-i, ';
    printf "%-24s", '--fieldconfig-id=FIELDCONFIG-ID';
    if (length('--fieldconfig-id=FIELDCONFIG-ID') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-n, ';
    printf "%-24s", '--fieldconfig-name=FIELDCONFIG-NAME';
    if (length('--fieldconfig-name=FIELDCONFIG-NAME') > 24 and length("must specify one and only one of name or id") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "must specify one and only one of name or id";
    print "\n";
    printf "%6s", '-f, ';
    printf "%-24s", '--html-file=HTML-FILE';
    if (length('--html-file=HTML-FILE') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";

    my $exit_value = 0;
    if (@_ && $_[0] ne "help" && $_[1] != 1) {
        $exit_value = shift @_;
        print "@_\n";
    }

    exit($exit_value);
};

GetOptions (
    'fieldconfig-id|i=s' => \$fieldconfig_id,
    'fieldconfig-name|n=s' => \$fieldconfig_name,
    'html-file|f=s' => \$html_file,
    'help|h!' => \&$handler_help,
);


## end generated code
use File::Slurp;

if (not $fieldconfig_id) {
    if (not $fieldconfig_name) {
        die "Must specify one of id or name";
    }
    my $fieldconfigs =
        $json->decode(scalar capture("cached-run -e scm_jira_url jkd export-fieldconfigs"));
    my $found_field_config;
    grep {
        if ($fieldconfig_name eq $_->{name}) {
            $fieldconfig_id = $_->{id};
            $found_field_config = 1;
        }
    } @$fieldconfigs;
    die "Can't find fieldconfig $fieldconfig_name" unless $found_field_config;
}

my $html_text;

if ($html_file) {
    $html_text = decode_utf8 read_file($html_file);
} else {
    if (not $fieldconfig_id) {
        runx("yes-or-no-p", "Must specify the fieldconfig id, are you sure to edit default field config");
    }
    $html_text = decode_utf8 capturex("debug-run", "jkd", "webget", "$ENV{scm_jira_url}secure/admin/ConfigureFieldLayout!default.jspa?id=${fieldconfig_id}");
}


my $dom = Mojo::DOM->new->parse($html_text);

if ($ENV{jkd_verbose}) {
    say STDERR encode_utf8 $html_text;
}
my %fieldconfig;

$dom->find('span[class="field-name"]')->each
    (
        sub {
            (my $field_name = $_->text) =~ s,(^\s+|\s+$),,g;
            my $required = JSON::false;
            if ($_->parent->at('span[class="aui-lozenge status-required"]')) {
                $required = JSON::true;
            }
            my $position = -1;

            if (my $visibility_elem = $_->parent->parent->at('a[href^="EditFieldLayoutHide.jspa"]')) {
                my $visibility_href = $visibility_elem->attr('href');
                ($position = $visibility_href) =~ s,.*hide=(\d+).*,$1,;
            } else {
                # say STDERR "Can't find position for $field_name";
            }

            $fieldconfig{$field_name} = {
                required => $required,
                position => $position,
            };

            if (my $renderer_elem = $_->parent->at('span[class="field-renderer"]')) {
                $fieldconfig{$field_name}{renderer} = $renderer_elem->text;
            }

            if (my $desc_elem = $_->parent->at('p[class="field-description fieldDescription"]')) {
                $fieldconfig{$field_name}{description} = $desc_elem->content;
                while ($desc_elem = $desc_elem->next) {
                    $fieldconfig{$field_name}{description} .= $desc_elem->to_string;
                }
            }

            my @screens = map {
                my $screen_name = $_->text;
                (my $screen_id = $_->attr('href')) =~ s,.*id=(\d+).*,$1,;

                {
                    id => $screen_id,
                    name => $screen_name

                }
            } $_->parent->parent->find('a[href^="/secure/admin/ConfigureFieldScreen.jspa"]')->each;

            $fieldconfig{$field_name}{screens} = \@screens;
        }
    );

print decode_utf8($json->encode(\%fieldconfig));
