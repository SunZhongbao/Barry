#!/usr/bin/env perl
use strict;
use v5.10.1;                    # for say and switch
use autodie qw(:all);
use IPC::System::Simple qw(run runx capture capturex $EXITVAL EXIT_ANY);
binmode(STDOUT, ":utf8");
binmode(STDERR, ":utf8");
use Encode;
use utf8;
@ARGV = map {decode_utf8 $_} @ARGV;

use JSON;

my $json = JSON->new->utf8->canonical->pretty;

(my $comment_doc = <<~'EOFc83131117f09') =~ s,^# .*org-mode.*,,gm;
# {%org-mode%}
请勿使用此脚本！应直接使用 jkd screen-tab！

# * action = new
# new screen, allow copy from with --copy

# * action = delete-tabs

# delete a specified tab

# * action = delete-fields

# delete specified fields

# * action = add-fields

# add specified fields to specified tab (if tab not specified, calculate it from the AFTER-FIELD argument).

请勿使用此脚本！应直接使用 jkd screen-tab！
# {%/org-mode%}
EOFc83131117f09

## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl -P '?"$comment_doc"' \
# s:screen-name d:screen-description a:action @:copy \
# t:tab-name @:after-field \
# j:screen-json
## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("posix_default");



my $action = "";
my $after_field = "";
my $copy = "";
my $screen_description = "";
my $screen_json = "";
my $screen_name = "";
my $tab_name = "";

my $handler_help = sub {
    print "$comment_doc";
    print "\n\n选项和参数：\n";
    printf "%6s", '-a, ';
    printf "%-24s", '--action=ACTION';
    if (length('--action=ACTION') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '';
    printf "%-24s", '--after-field=AFTER-FIELD';
    if (length('--after-field=AFTER-FIELD') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '';
    printf "%-24s", '--copy=COPY';
    if (length('--copy=COPY') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-d, ';
    printf "%-24s", '--screen-description=SCREEN-DESCRIPTION';
    if (length('--screen-description=SCREEN-DESCRIPTION') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-j, ';
    printf "%-24s", '--screen-json=SCREEN-JSON';
    if (length('--screen-json=SCREEN-JSON') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-s, ';
    printf "%-24s", '--screen-name=SCREEN-NAME';
    if (length('--screen-name=SCREEN-NAME') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-t, ';
    printf "%-24s", '--tab-name=TAB-NAME';
    if (length('--tab-name=TAB-NAME') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";

    my $exit_value = 0;
    if (@_ && $_[0] ne "help" && $_[1] != 1) {
        $exit_value = shift @_;
        print "@_\n";
    }

    exit($exit_value);
};

GetOptions (
    'action|a=s' => \$action,
    'after-field=s' => \$after_field,
    'copy=s' => \$copy,
    'screen-description|d=s' => \$screen_description,
    'screen-json|j=s' => \$screen_json,
    'screen-name|s=s' => \$screen_name,
    'tab-name|t=s' => \$tab_name,
    'help|h!' => \&$handler_help,
);


## end generated code

if (not $action) {
    $action = shift @ARGV;
}

if ($action eq "new") {
    my $copy_screen_json = "";
    if ($copy) {
        $copy_screen_json =
            $json->decode(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "dump-screen", "-s", "$copy"));
        if (not $screen_description) {
            $screen_description = $copy_screen_json->{description};
        }
        $copy_screen_json = decode_utf8($json->encode($copy_screen_json));
    }

    runx("jkd", "import-screen", "-s", "$screen_name", "-d", "$screen_description", "-j", "$copy_screen_json");
} else {
    my $screen_dump = $screen_json ?
        $json->decode(encode_utf8 $screen_json) :
        $json->decode(scalar capture("cached-run", "-e", "scm_jira_url", "jkd", "dump-screen", "-s", "$screen_name"));

    sub tab_and_field_id_from_field_name_or_id($) {
        my $field_name = $_[0];
        my ($tab_id, $field_id);
        map {
            my $this_tab_id = $_->{id};
            my $fields = $_->{fields};
            map {
                if ($_->{name} eq $field_name or $_->{id} eq $field_name) {
                    $tab_id = $this_tab_id;
                    $field_id = $_->{id};
                }
            } @$fields;
        } @{$screen_dump->{tabs}};

        return $tab_id, $field_id;
    }

    my $screen_id = $screen_dump->{id};
    if ($action eq "delete-tabs") {
        for my $tab_name (@ARGV) {
            my $tab_id;
            map {
                $tab_id = $_->{id} if $tab_name eq $_->{name};
            } @{$screen_dump->{tabs}};

            unless ($tab_id) {
                say STDERR "$tab_name not found";
                next;
            }
            say STDERR "delete: $tab_name $tab_id";
            runx "jkd", "rest", "-a", "screens/${screen_id}/tabs/${tab_id}", "--", "-X", "DELETE";
        }
    } elsif ($action eq "delete-fields") {
        for my $field_name (@ARGV) {
            my ($tab_id, $field_id) = tab_and_field_id_from_field_name_or_id($field_name);

            runx(
                "jkd", "rest", "screens/${screen_id}/tabs/${tab_id}/fields/${field_id}", "--", "-X", "DELETE"
            );
        }
        $json->decode(scalar capture("cached-run", "-e", "scm_jira_url", "jkd", "dump-screen", "-s", "$screen_name"));
    } elsif ($action eq "add-fields") {
        say STDERR "running add-fields";
        my ($tab_id, $after_field_id);
        if (not $tab_name) {
            die "Must specify after_field when not using tab_name" unless $after_field;

            ($tab_id, $after_field_id) = tab_and_field_id_from_field_name_or_id($after_field);
        } else {
            map {
                if ($_->{name} eq $tab_name) {
                    $tab_id = $_->{id};
                    if (@{$_->{fields}} > 0) {
                        $after_field_id = $_->{fields}[-1]{id};
                        $after_field = $_->{fields}[-1]{name};
                    } else {
                        $after_field_id = 0;
                        $after_field = "";
                    }
                }
            } @{$screen_dump->{tabs}};
        }

        my $fields_json =
            $json->decode(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "rest", "field"));
        my %field_name_ids;
        map {
            my ($name, $id) = ($_->{name}, $_->{id});
            $field_name_ids{$name} = $id;
        } @$fields_json;


        for my $field_name (reverse @ARGV) {
            my $field_id = ($field_name =~ m/^customfield_\d+$/) ? $field_name : $field_name_ids{$field_name};

            my %field_data = (
                fieldId => $field_id,
            );
            runx(
                "debug-run",
                "jkd", "post", "-a", "screens/${screen_id}/tabs/${tab_id}/fields", "--json", decode_utf8($json->encode(\%field_data))
            );

            my %after_data = (
                after => $after_field_id
            );
            runx(
                "jkd", "post", "-a", "/rest/api/2/screens/${screen_id}/tabs/${tab_id}/fields/${field_id}/move", "--json",
                decode_utf8($json->encode(\%after_data))
            )
        }

        $json->decode(scalar capture("cached-run", "-e", "scm_jira_url", "jkd", "dump-screen", "-s", "$screen_name"));
    } else {
        die "don't know how to work with action: $action"
    }
}
