#!/usr/bin/env bash
set -e
# debug-args $(basename "$0") "$@" > ~/.cache/system-config/logs/$(basename $0).log 2>&1

## start code-generator "^\\s *#\\s *"
# generate-getopt -P i:icon h:headline c:content s:shell @:info @wrap
## end code-generator
## start generated code
TEMP=$(POSIXLY_CORRECT=true getopt -o c:h:i:s:h \
                      --long content:,headline:,icon:,info:,shell:,wrap,help,no-wrap \
                      -n $(basename -- $0) -- "$@")
declare content=
declare headline=
declare icon=
declare info=
declare shell=
declare wrap=false
eval set -- "$TEMP"
while true; do
    case "$1" in

        -c|--content)
            content=$2
            shift 2

            ;;
        -h|--headline)
            headline=$2
            shift 2

            ;;
        -i|--icon)
            icon=$2
            shift 2

            ;;
        --info)
            info=$2
            shift 2

            ;;
        -s|--shell)
            shell=$2
            shift 2

            ;;
        --wrap|--no-wrap)
            if test "$1" = --no-wrap; then
                wrap=false
            else
                wrap=true
            fi
            shift

            ;;
        -h|--help)
            set +x
            echo -e
            echo
            echo Options and arguments:
            printf %6s '-c, '
            printf %-24s '--content=CONTENT'
            echo
            printf %6s '-h, '
            printf %-24s '--headline=HEADLINE'
            echo
            printf %6s '-i, '
            printf %-24s '--icon=ICON'
            echo
            printf "%6s" " "
            printf %-24s '--info=INFO'
            echo
            printf %6s '-s, '
            printf %-24s '--shell=SHELL'
            echo
            printf "%6s" " "
            printf %-24s '--[no-]wrap'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code

if test -z "$headline"; then
    if test "$#" = 0; then
        die "Usage: $(basename $0) [-i icon] headline [content]"
    fi
    headline=$1
    shift
    content="$*"
fi

exec >/dev/null 2>&1
tmp_head=/tmp/$(basename $0).$$.head
tmp_content=/tmp/$(basename $0).$$.content
tmp_icon=/tmp/$(basename $0).$$.icon

. atexit rm -f "${tmp_head}" "${tmp_content}" "${tmp_icon}"

echo -n "$headline" > $tmp_head

read_head=$(cat <<EOF
(progn
  (let* ((file (open-file "$tmp_head" 'read))
         (str "")
         (line ""))
    (while (setq line (read-line file))
      (setq str (concat str line)))
    (close-file file)
    str))
EOF
)

if test -z "$content"; then
    sawfish-client -e "(bhj-draw-notification t nil $read_head)"
    exit
fi


if test "${wrap}" = true; then
    content=$(echo -n "$content" | wrap) ||
    (
        myscr bash -c 'read -p "Can not wrap. Your emacs has problem? Please check!"' >/dev/null 2>&1 || true
    )
fi

echo -n "${content}" > $tmp_content

read_content=$(cat <<EOF
(progn
  (let* ((file (open-file "$tmp_content" 'read))
         (str "")
         (line ""))
    (while (setq line (read-line file))
      (setq str (concat str line)))
    (close-file file)
    str))
EOF
)

if test "$icon" -a -r "$icon"; then

    echo -n "$icon" > $tmp_icon

    read_icon=$(cat <<EOF
(progn
  (let* ((file (open-file "$tmp_icon" 'read))
         (str "")
         (line ""))
    (while (setq line (read-line file))
      (setq str (concat str line)))
    (close-file file)
    str))
EOF
    )
else
    read_icon='"~/system-config/.sawfish/Kill.png"'
fi


(
    sawfish-client -e "
(progn
  (bind-keys window-keymap \"Button1-Click\" '(system \"sawfish-clean-screen&\"))
  (bind-keys global-keymap \"Button1-Click\" '(system \"sawfish-clean-screen&\"))
  (bhj-draw-notification nil (make-image $read_icon) $read_head $read_content))"

    md5=$(cat "$tmp_head" | md5sum | pn 1)
    md5file=~/.cache/system-config/logs/bhj-notify.$md5

    fuser -k "$md5file" || true

    (
        set -e
        sleep 10 > $md5file
        rm $md5file
        draw-notification-with-sawfish --headline "$headline"
        sawfish-client -e "(unbind-keys global-keymap \"Button1-Click\")
                           (bind-keys window-keymap \"Button1-Click\" 'raise-and-pass-through-click))"

    )&
)&
