#!/usr/bin/env bash

set -e

unset CLASSPATH
unset PROMPT_RET

if test "$SC_DEBUG" = true; then
    set -x
fi
repo_dir=$(lookup-file -e .repo)
android_dir=$(lookup-file-dir -e bionic)

cd ${android_dir}

declare -A before_env
declare -A after_env

function parse-env() {
    local declare
    local x
    local env_val
    local env
    local val

    while read declare x env_val; do
        if test "$declare" != declare -o "$x" != -x; then
            continue
        fi
        env=${env_val%%=*}
        eval val=\$$env
        eval "$1[$env]=$(printf %q "$val")"
    done <<<"$(declare -xp)"
}

parse-env before_env

lunch-without-buildspec() {

    if test -e buildspec.mk; then
        # 有这个文件在的时候，lunch 是不能正常工作的。这是因为后来我改
        # 了一下 buildspec.mk，没有继续使用 Makefile 的 ?= 来写
        # TARGET_PRODUCT 等变量，而是直接使用了 :=

        # 另外，不能随便删除这个文件，万一设置并没有变化，重新生成一遍
        # 这个文件的话，会导致安卓重新生成一遍 ninja，那速度就慢多了

        mv buildspec.mk buildspec.mk.bak.$$
    fi

    lunch "$1"

    if test -e buildspec.mk.bak.$$; then
        mv buildspec.mk.bak.$$ buildspec.mk
    fi
}

if test $# != 0; then
    if test "$1" != "${TARGET_PRODUCT}"-"${TARGET_BUILD_VARIANT}"; then
        . build/envsetup.sh
        lunch-without-buildspec "$1"
    fi
else
    . build/envsetup.sh >/dev/null 2>&1
    if test -z "$LUNCH_MENU_CHOICES"; then
        LUNCH_MENU_CHOICES=(
            $(TARGET_BUILD_APPS= get_build_var COMMON_LUNCH_CHOICES)
        )
    fi
    products=$(for x in "${LUNCH_MENU_CHOICES[@]}"; do echo ${x%-*}; done)
    product=$(select-args -p "请选择你要编译的产品" -o -- ${products[@]})
    variant=$(select-args -p "请选择你要编译的选项" -o -- userdebug user eng )
    config=$product-$variant
    lunch-without-buildspec "$config"
fi

parse-env after_env

ccache -M 100G -F 0

. ~/system-config/bin/.android-set-outdir

declare -xp > .buildspec.sc
(
    env_vars=(
        TARGET_BUILD_APPS TARGET_BUILD_TYPE OUT_DIR
        TARGET_BUILD_VARIANT TARGET_PRODUCT TARGET_SIMULATOR
        TARGET_PRODUCT_SMARTISAN_EXTRA_ENV
    )

    if grep 'KATI_obsolete_var ANDROID_BUILD_TOP' build/make/core/config.mk -q; then
        true
    else
        env_vars+=(ANDROID_BUILD_TOP)
    fi

    for x in "${env_vars[@]}"; do
        if test "${after_env[$x]}"; then
            echo "export $x := ${after_env[$x]}"
        fi
    done
    echo 'export KERNEL_HELPER_BHJ:=yes' >> buildspec.mk.$$
) > buildspec.mk.$$


if diff buildspec.mk.$$ buildspec.mk -q >/dev/null 2>&1; then
    rm buildspec.mk.$$
else
    mv buildspec.mk.$$ buildspec.mk
fi

reset-env
