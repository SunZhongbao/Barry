#!/usr/bin/env bash

# gtags will call sort, which will use a lot of space for large
# projects.  And if TMPDIR is on /tmp, which is tmpfs using RAM, then
# sort may fail
export TMPDIR=~/.cache
mkdir -p $TMPDIR
mkdir -p ~/.cache/system-config/logs

if test ! -e /usr/local/bin/mkbeagrepidx; then
    . ~/src/github/beagrep/.setenv
fi

if [[ $PWD =~ /for-code-reading/ ]] && test -d .beagrep; then
    echo should do code reading for ${PWD#*for-code-reading}
    touch .for-code-reading
    exit
fi

cd -P .
if test $PWD = ~; then
    if yes-or-no-p -y "Should not do for-code-reading in your HOME; are you sure?"; then
        true
    else
        exit
    fi

fi
outDir=~/.cache/system-config/for-code-reading/"`pwd`"
srcDir=`pwd`
export relativeSrcDir=.
while test "$outDir" != "" -a ! -d "$outDir"/.beagrep; do
    outDir=${outDir%/*}
done

if test "$outDir" = ~; then
    outDir=""
fi

if test -r "$outDir" -a "$outDir" != ~/.cache/system-config/for-code-reading/"`pwd`";
then
    higherSrcDir=${outDir#~/.cache/system-config/for-code-reading/}

    if type yes-or-no-p >/dev/null 2>&1; then
        if yes-or-no-p -y "Do you want update code reading for $higherSrcDir?"; then
            ans=Y
        else
            ans=N
        fi
    elif tty >/dev/null && test "$IN_EMACS" != true; then
        read -e -p "Do you want update code reading for $higherSrcDir? (Y/n): " ans
    else
        ans=Y
    fi

    if test "$ans" = n -o "$ans" = N; then
        outDir=~/.cache/system-config/for-code-reading/"`pwd`"
    else
        export relativeSrcDir=${srcDir/#$higherSrcDir/.}
        cd $higherSrcDir
        if test $# = 0 -a $(basename $0) != mkbeagrepidx; then
            set -- -i -v
        fi
    fi
else
    outDir=~/.cache/system-config/for-code-reading/"`pwd`"
fi

if test -e "$outDir"/.before-for-code-reading; then
    bash "$outDir"/.before-for-code-reading
fi

function wlp() {
    case $(uname) in
        CYGWIN*)
            cygpath -alm "$1"
            ;;
        *)
            readlink -m "$1"
            ;;
    esac
}

function mkbeagrepidx() {
    mkdir -p "$outDir"/.beagrep
    if test -e ~/.mkbeagrepidx.rc; then
        . ~/.mkbeagrepidx.rc
    fi

    if test -e ./.mkbeagrepidx.rc; then
        . ./.mkbeagrepidx.rc
    fi

    local -a ADDITIONAL_OPTIONS=

    if test $# != 0; then
        ADDITIONAL_OPTIONS=("$@")
    elif lookup-file -e .beagrep-ignore; then
        ADDITIONAL_OPTIONS=(--deny-directory-pattern "${BEAGREP_IGNORE_DIR_PATTERNS:-*/.git},$(cat $(lookup-file .beagrep-ignore))")
        # EMACS=t hint "deny is set to: ${ADDITIONAL_OPTIONS[*]}, $PWD"
    elif lookup-file -e .beagrep-ignore.sh; then
        . "$(lookup-file -e .beagrep-ignore.sh)"
    elif test "$BEAGREP_IGNORE_DIR_PATTERNS"; then
        ADDITIONAL_OPTIONS=(--deny-directory-pattern "$BEAGREP_IGNORE_DIR_PATTERNS")
    else
        ADDITIONAL_OPTIONS=(--deny-directory-pattern "$(for x in */; do if test -d $x/.ccache; then echo -n $PWD/$x,; fi; done)*/out,*/.repo,*/.git")
    fi
    # bhj-notify for-code-reading ADDITIONAL_OPTIONS is $ADDITIONAL_OPTIONS || true

    subdir=.beagrep
    if test "$SOURCECODETAGSMODE" = true; then
        subdir=.beatags;
    fi
    function do_build() {

        if test -e $outDir/$subdir/top-source-dir; then
            rm $outDir/$subdir/top-source-dir;
        fi

        beagrep-build-index --recursive \
                            "${ADDITIONAL_OPTIONS[@]}" \
                            --enable-deletion \
                            --target "$(wlp "$outDir"/$subdir/)" \
                            "$relativeSrcDir" 2>&1
    }

    if do_build; then
        echo $PWD > $outDir/$subdir/../top-source-dir
    fi | tee "$outDir"/$subdir-build-log

    if test "$SOURCECODETAGSMODE" != true; then
        cat "$outDir"/$subdir-build-log |
            grep "No filter for" |
            awk '{print $5}' | cut -b 6- | tee /dev/stderr | (
            rebuild=false
            while read x; do
                if grep . -I -q "$x"; then
                    attr -s mime_type -V text/plain "$x" >/dev/null 2>&1
                    touch "$x" >/dev/null 2>&1
                    rebuild=true
                fi
            done
            if test "$rebuild" = true; then
                echo true
            fi
        ) | grep . -q && (echo rebuild some text files; do_build)
    fi
}

(
    PWD_STEM=$(bp | perl -npe 's/[^a-z]//gi')
    stem_file=~/system-config/etc/ctags-custom/$PWD_STEM
    if test -f "$stem_file"; then
        relative-link "$stem_file" ctags-custom
        db_file=~/.cache/system-config/for-code-reading/$PWD/.beagrep/FileAttributesStore.db

        if test -e "$db_file" -a "$stem_file" -nt "$db_file" && yes-or-no-p -y "touch all the files for ctags-custom?"; then
            find . -type f | xargs touch
        fi
    fi

)
function for-code-reading() {
    time mkbeagrepidx&
    export SOURCECODETAGSMODE=true
    time mkbeagrepidx&
    if is-tty-io; then
        wait
    fi
    # mkgtags "$@" #must not put background, the tty(1) depends on this
}

function mkbeatagsidx() {
    export SOURCECODETAGSMODE=true;
    time mkbeagrepidx
}

`basename $0` "$@"
