#!/usr/bin/env bash
set -e
set -x

IFS=$'\n'

declare comment_doc=$(
    cat <<'EOFe9576f8668e0' | grep -v '#.*org-mode%'
# {%org-mode%}
screen-tab -s SCREEN-NAME -t TAB-NAME ACTION ARGS...

* action = add-fields
将 ARGS 中指定的每一个 field 加入指定的 screen/tab。

- 如果该 field 已经存在指定 tab 中，则直接返回
- 如果该 field 已经存在另一 tab 中，则先删除

* action = list-fields

列出所有该 tab 下的 fields

* action = list-tabs

列出所有 tabs

* action = delete-fields

删除所有该 tab 下的 fields

* action = sync-from-screen

将 ARGS 中指定的 screen 下所有 fields 同步到该 tab。参考 sync-from-screen --help。

* action = add-tab

创建 tab

* action = delete-tab

删除指定的 tab
# {%/org-mode%}
EOFe9576f8668e0
        )

## start code-generator "^\\s *#\\s *"
# generate-getopt -P '?"${comment_doc}"' \
    # s:screen-name \
    # t:tab-name \
    # mmatch-and-select-tab-name '?"选择使用哪个 tab"' \
    # j:screen-json
## end code-generator
## start generated code
TEMP=$(POSIXLY_CORRECT=true getopt -o mj:s:t:h \
                      --long match-and-select-tab-name,screen-json:,screen-name:,tab-name:,help,no-match-and-select-tab-name \
                      -n "$(basename -- "$0")" -- "$@")
declare match_and_select_tab_name=false
declare screen_json=
declare screen_name=
declare tab_name=
eval set -- "$TEMP"
while true; do
    case "$1" in

        -m|--match-and-select-tab-name|--no-match-and-select-tab-name)
            if test "$1" = --no-match-and-select-tab-name; then
                match_and_select_tab_name=false
            else
                match_and_select_tab_name=true
            fi
            shift

            ;;
        -j|--screen-json)
            screen_json=$2
            shift 2

            ;;
        -s|--screen-name)
            screen_name=$2
            shift 2

            ;;
        -t|--tab-name)
            tab_name=$2
            shift 2

            ;;
        -h|--help)
            set +x
            echo -e "${comment_doc}"
            echo
            echo Options and arguments:
            printf %6s '-m, '
            printf %-24s '--[no-]match-and-select-tab-name'
            echo
            printf "%30s" ""
            echo "选择使用哪个 tab"
            printf %6s '-j, '
            printf %-24s '--screen-json=SCREEN_JSON'
            echo
            printf %6s '-s, '
            printf %-24s '--screen-name=SCREEN_NAME'
            echo
            printf %6s '-t, '
            printf %-24s '--tab-name=TAB_NAME'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code

action=$1
shift

IFs=$'\n'

screen_id=$(
    jkd rest screens | jq "$(
cat <<'EOF28c4b7fc74d2' | . .replace-%% --
# {%jq-mode%}
.[]|
if .name == "[%screen_name%]" then .id else null end | values
# {%/jq-mode%}
EOF28c4b7fc74d2

)"
         )

tabs_json=$(
    cached-run -e scm_jira_url jkd rest screens/${screen_id}/tabs
         )

tabs_ids=(
    $(
        echo "${tabs_json}" | jq '.[]|.id' -r
    )
)

tabs_names=(
    $(
        echo "${tabs_json}" | jq '.[]|.name' -r
    )
)

if test "${action}" = list-tabs; then
    echo "${tabs_json}" | jq '.[]|.name' -r
    exit
fi

if test "${match_and_select_tab_name}" = true; then
    tab_name=$(
        select-args \
            --ask-for-input -i "${tab_name}" -1 -o -p "请选择你要的 tab 名" \
            "${tabs_names[@]}" || echo "${tab_name}"
            )
fi

tab_id=$(
    echo "${tabs_json}" | jq "$(
cat <<'EOF28c4b7fc74d2' | . .replace-%% --
# {%jq-mode%}
.[]|
if .name == "[%tab_name%]" then .id else null end | values
# {%/jq-mode%}
EOF28c4b7fc74d2

)"
      )

declare -A field_tab_map

declare -A tabs_name_id_map
declare -A tabs_id_name_map

for x in $(seq 0 $(( ${#tabs_ids[@]} - 1))); do
    id=${tabs_ids[$x]}
    name=${tabs_names[$x]}

    tabs_name_id_map[$name]=$id
    tabs_id_name_map[$id]=$name
done

for tid in "${tabs_ids[@]}"; do
    while read name; do
        {
            if test "${name}"; then
                log "$name already in in tab ${tabs_id_name_map[$tid]}"
                field_tab_map[$name]=$tid
            fi
        } </dev/null
    done <<<"$(
         jkd rest screens/${screen_id}/tabs/${tid}/fields | jq '.[]|.name' -r
    )"
done

field_list_json=$(
    jkd rest field
               )

get-f_id() {
    f_id=$(
        echo "${field_list_json}" | jq "$(
cat <<'EOF28c4b7fc74d2' | . .replace-%% --
# {%jq-mode%}
.[]|
if .name == "[%f%]" then .id else null end | values
# {%/jq-mode%}
EOF28c4b7fc74d2

)" -r
        )
    if test "$(set -- $f_id; echo $#)" -gt 1; then
        f_id=$(select-args -p "同一个 field 名字对应了多个 id！你想要选择哪一个？" $f_id)
    fi
}

add-field-to-tab() {
    log "add $f to ${tabs_id_name_map[$tab_id]}"
    field_tab_map[$f]=$tab_id

    for f_id in $f_id; do
        jkd rest screens/${screen_id}/tabs/${tab_id}/fields -- -X POST --data '{"fieldId" : "'"${f_id}"'"}' -H 'Content-Type: application/json'
    done
}

list-fields() {
    jkd rest screens/${screen_id}/tabs/${tab_id}/fields
}

sync-from-screen() {
    declare comment_doc=$(
        cat <<'EOFe9576f8668e0' | grep -v '#.*org-mode%'
# {%org-mode%}

# {%/org-mode%}
EOFe9576f8668e0
            )

    ## start code-generator "^\\s *#\\s *"
    # generate-getopt -P '?"${comment_doc}"' \
        # f:from-screen \
        # eempty-first \
        # oonly-if-missing='("" -o)' '?"只添加尚未添加的字段"' \
        # wwhich-tab='("" -w)' '?"先选择要同步到哪个 tab"' \
        # mmove-tab='("" -m)' '?"如果在别的 tab 上，将其移动到指定的 tab"'
    ## end code-generator
    ## start generated code
    TEMP=$(POSIXLY_CORRECT=true getopt -o ef:mowh \
                          --long empty-first,from-screen:,move-tab,only-if-missing,which-tab,help,no-empty-first,no-move-tab,no-only-if-missing,no-which-tab \
                          -n $(basename -- $0) -- "$@")
    declare empty_first=false
    declare from_screen=
    declare move_tab=
    declare only_if_missing=
    declare which_tab=
    eval set -- "$TEMP"
    while true; do
        case "$1" in

            -e|--empty-first|--no-empty-first)
                if test "$1" = --no-empty-first; then
                    empty_first=false
                else
                    empty_first=true
                fi
                shift

                ;;
            -f|--from-screen)
                from_screen=$2
                shift 2

                ;;
            -m|--move-tab|--no-move-tab)
                if test "$1" = --no-move-tab; then
                    move_tab=
                else
                    move_tab=-m
                fi
                shift

                ;;
            -o|--only-if-missing|--no-only-if-missing)
                if test "$1" = --no-only-if-missing; then
                    only_if_missing=
                else
                    only_if_missing=-o
                fi
                shift

                ;;
            -w|--which-tab|--no-which-tab)
                if test "$1" = --no-which-tab; then
                    which_tab=
                else
                    which_tab=-w
                fi
                shift

                ;;
            -h|--help)
                set +x
                echo -e "${comment_doc}"
                echo
                echo Options and arguments:
                printf %6s '-e, '
                printf %-24s '--[no-]empty-first'
                echo
                printf %6s '-f, '
                printf %-24s '--from-screen=FROM_SCREEN'
                echo
                printf %6s '-m, '
                printf %-24s '--[no-]move-tab'
                echo "如果在别的 tab 上，将其移动到指定的 tab"
                printf %6s '-o, '
                printf %-24s '--[no-]only-if-missing'
                echo "只添加尚未添加的字段"
                printf %6s '-w, '
                printf %-24s '--[no-]which-tab'
                echo "先选择要同步到哪个 tab"
                exit
                shift
                ;;
            --)
                shift
                break
                ;;
            *)
                die "internal error: $(. bt; echo; bt | indent-stdin)"
                ;;
        esac
    done


    ## end generated code

    if test "${empty_first}" = true; then
        delete-fields
    fi

    from_screen_id=$(
        jkd rest screens | jq "$(
cat <<'EOF28c4b7fc74d2' | . .replace-%% --
# {%jq-mode%}
.[]|
if .name == "[%from_screen%]" then .id else null end | values
# {%/jq-mode%}
EOF28c4b7fc74d2

)" -r
                  )

    from_tab_id=$(
        jkd rest screens/${from_screen_id}/tabs | jq '.[]|.id' -r
               )

    from_fields=$(
        jkd rest screens/${from_screen_id}/tabs/${from_tab_id}/fields | jq '.[]|.name' -r
               )

    add-fields ${which_tab} ${move_tab} ${only_if_missing} $from_fields
}

delete-fields() {
    for f_id in $(list-fields | jq '.[]|.id' -r); do
        jkd rest screens/${screen_id}/tabs/${tab_id}/fields/${f_id} -- -X DELETE
    done
}

add-fields() {
    declare comment_doc=$(
        cat <<'EOFe9576f8668e0' | grep -v '#.*org-mode%'
# {%org-mode%}

# {%/org-mode%}
EOFe9576f8668e0
            )

    ## start code-generator "^\\s *#\\s *"
    # generate-getopt -P '?"${comment_doc}"' \
        # wwhich-tab='("" -w)' '?"先选择要同步到哪个 tab"' \
        # mforce-move '?"如果已经在别的 tab，将它 move 过来"' \
        # oonly-if-missing='("" -o)' '?"只添加尚未添加的字段"'
    ## end code-generator
    ## start generated code
    TEMP=$(POSIXLY_CORRECT=true getopt -o mowh \
                          --long force-move,only-if-missing,which-tab,help,no-force-move,no-only-if-missing,no-which-tab \
                          -n $(basename -- $0) -- "$@")
    declare force_move=false
    declare only_if_missing=
    declare which_tab=
    eval set -- "$TEMP"
    while true; do
        case "$1" in

            -m|--force-move|--no-force-move)
                if test "$1" = --no-force-move; then
                    force_move=false
                else
                    force_move=true
                fi
                shift

                ;;
            -o|--only-if-missing|--no-only-if-missing)
                if test "$1" = --no-only-if-missing; then
                    only_if_missing=
                else
                    only_if_missing=-o
                fi
                shift

                ;;
            -w|--which-tab|--no-which-tab)
                if test "$1" = --no-which-tab; then
                    which_tab=
                else
                    which_tab=-w
                fi
                shift

                ;;
            -h|--help)
                set +x
                echo -e "${comment_doc}"
                echo
                echo Options and arguments:
                printf %6s '-m, '
                printf %-24s '--[no-]force-move'
                echo "如果已经在别的 tab，将它 move 过来"
                printf %6s '-o, '
                printf %-24s '--[no-]only-if-missing'
                echo "只添加尚未添加的字段"
                printf %6s '-w, '
                printf %-24s '--[no-]which-tab'
                echo "先选择要同步到哪个 tab"
                exit
                shift
                ;;
            --)
                shift
                break
                ;;
            *)
                die "internal error: $(. bt; echo; bt | indent-stdin)"
                ;;
        esac
    done


    ## end generated code

    for f in "$@"; do
        tid=${field_tab_map[$f]}

        if test "${tid}" -a "${only_if_missing}" = -o; then
            log "$f already in ${tabs_id_name_map[$tid]}, and --only-if-missing is on, skip"
            continue
        fi
        if test "${which_tab}" = -w; then
            log "need ask which tab"
            tab_name=$(
                select-args -p "Which tab to move '$f' to?" "${tabs_names[@]}"
                    )
            tab_id=${tabs_name_id_map[$tab_name]}
        else
            log "no need to ask which tab: $which_tab"
        fi
        case "$tid" in
            $tab_id)
                if test -z "${tab_id}"; then
                    die "tab_id is empty!"
                fi
                log "$f already in $tab_id"
                continue
                ;;
            '')
                get-f_id
                add-field-to-tab
                ;;
            *)
                if test "${force_move}" = true; then
                    tid=${field_tab_map[$f]}
                    log "delete $f from $tid first"
                    get-f_id
                    for f_id in $f_id; do
                        jkd rest screens/${screen_id}/tabs/${tid}/fields/${f_id} -- -X DELETE
                        add-field-to-tab
                    done
                else
                    hint "$f already in tab: ${tabs_id_name_map[$tid]}"
                fi
                ;;
        esac
    done
}

if test "${action}" = add-fields; then
    log "add-fields $*"
    add-fields "$@"
elif test "${action}" = list-fields; then
    list-fields
elif test "${action}" = delete-fields; then
    delete-fields
elif test "${action}" = sync-from-screen; then
    sync-from-screen "$@"
elif test "${action}" = add-tab; then
    log "add-tab $tab_name"
    jkd rest -a screens/${screen_id}/tabs -- -X POST --data '{"name" : "'"${tab_name}"'"}' -H 'Content-Type: application/json'
elif test "${action}" = delete-tab; then
    log "add-tab $tab_name"
    jkd rest -a screens/${screen_id}/tabs/${tab_id} -- -X DELETE
else
    die "Don't know how to work with your action: '$action'"
fi
