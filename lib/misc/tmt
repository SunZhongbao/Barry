#!/usr/bin/env bash
set -e


declare comment_doc=$(
    cat <<'EOFe9576f8668e0' | grep -v '#.*org-mode%'
# {%org-mode%}
patato work method

蕃茄工作法，用固定的时间段，短频快的工作，中间 3 分钟小休息、10 分钟大休
息，等等等等。

参考 https://github.com/baohaojun/Wrench/tree/master/TomatoNitifications
# {%/org-mode%}
EOFe9576f8668e0
        )

## start code-generator "^\\s *#\\s *"
# generate-getopt -P '?"${comment_doc}"' \
    # t:times=4 '?"执行 4 次蕃茄工作法"' \
    # T:work-time=45m '?"每次的时间是 45 分钟"' \
    # r:rest-time1=3m '?"小休息 3 分钟"' \
    # R:rest-time2=10m '?"大休息 10 分钟"' \
    # b:big-break-times=4 '?"4 个蕃茄一次大休息"' \
    # pprint-only \
    # e:extra-txt '?"用于调试（分清楚哪个是哪个）"' \

## end code-generator
## start generated code
TEMP=$(POSIXLY_CORRECT=true getopt -o b:e:pr:R:t:T:h \
                      --long big-break-times:,extra-txt:,print-only,rest-time1:,rest-time2:,times:,work-time:,help,no-print-only \
                      -n "$(basename -- "$0")" -- "$@")
declare big_break_times=4
declare extra_txt=
declare print_only=false
declare rest_time1=3m
declare rest_time2=10m
declare times=4
declare work_time=45m
eval set -- "$TEMP"
while true; do
    case "$1" in

        -b|--big-break-times)
            big_break_times=$2
            shift 2

            ;;
        -e|--extra-txt)
            extra_txt=$2
            shift 2

            ;;
        -p|--print-only|--no-print-only)
            if test "$1" = --no-print-only; then
                print_only=false
            else
                print_only=true
            fi
            shift

            ;;
        -r|--rest-time1)
            rest_time1=$2
            shift 2

            ;;
        -R|--rest-time2)
            rest_time2=$2
            shift 2

            ;;
        -t|--times)
            times=$2
            shift 2

            ;;
        -T|--work-time)
            work_time=$2
            shift 2

            ;;
        -h|--help)
            set +x
            echo -e "${comment_doc}"
            echo
            echo Options and arguments:
            printf %6s '-b, '
            printf %-24s '--big-break-times=BIG_BREAK_TIMES'
            echo
            printf "%30s" ""
            echo "4 个蕃茄一次大休息"
            printf %6s '-e, '
            printf %-24s '--extra-txt=EXTRA_TXT'
            echo "用于调试（分清楚哪个是哪个）"
            printf %6s '-p, '
            printf %-24s '--[no-]print-only'
            echo
            printf %6s '-r, '
            printf %-24s '--rest-time1=REST_TIME1'
            echo "小休息 3 分钟"
            printf %6s '-R, '
            printf %-24s '--rest-time2=REST_TIME2'
            echo "大休息 10 分钟"
            printf %6s '-t, '
            printf %-24s '--times=TIMES'
            echo "执行 4 次蕃茄工作法"
            printf %6s '-T, '
            printf %-24s '--work-time=WORK_TIME'
            echo "每次的时间是 45 分钟"
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code


adb_script=$(
    cat <<'EOF2cebd151d598' | . .replace-%% --
# {%perl-mode%}
#!/usr/bin/env perl
use strict;
use v5.10.1; # for say and switch
use autodie qw(:all);
use IPC::System::Simple qw(run runx capture capturex $EXITVAL EXIT_ANY);
binmode(STDOUT, ":utf8");
binmode(STDERR, ":utf8");
use Encode;
use utf8;
@ARGV = map {decode_utf8 $_} @ARGV;

use feature 'signatures';
no warnings "experimental::signatures";

use Data::Dumper;
use JSON;

my $json = JSON->new->utf8->canonical->pretty;

my $title;
my $text;
my $fire = 1;
sub title($t) {
    $title = $t;
}

my $json_data = [];
sub text($t) {
    $text = "${t}[%extra_txt%]";

    push @$json_data,
        {
            "title" => $title,
            "text" => $text,
            "fire" => $fire,
        };

}

sub start_tomato($t) {
    title "tomato start $t";
    text 'start working, dude!';
}

sub small_break($t) {
    title "tomato small break $t";
    text 'take a small break, dude!';
}

sub big_break($t) {
    title "tomato big break $t";
    text 'take a big break, dude!';
}

sub my_sleep($s) {
    if ($s =~ s,m$,,) {
        $s *= 60;
    }

    $fire = $s;
}

for my $x (1..[%times%]) {
    start_tomato "$x";
    my_sleep "[%work_time%]";

    if ($x % [%big_break_times%] == 0) {
        big_break $x;
        my_sleep "[%rest_time2%]";
    } else {
        small_break $x;
        my_sleep "[%rest_time1%]";
    }
}

my $json_text = decode_utf8($json->encode($json_data));
if ("[%print_only%]" eq "true") {
    print $json_text;
    exit 0;
}

runx("debug-run", "my-adb", "am", "start-foreground-service",
     "-n", "com.bhj.tomatonotifications/.PutClipService",
     "--ei", "notify", "-1",
     "--es", "notifyExtra",  $json_text
);
# {%/perl-mode%}
EOF2cebd151d598

          )

perl -e "${adb_script}" </dev/null
# adb_script=$(printf %q "$adb_script")

# my-adb "echo ${adb_script} > /data/data/com.android.shell/tomato.sh"
# adb-bg 'bash ~/tomato.sh'
