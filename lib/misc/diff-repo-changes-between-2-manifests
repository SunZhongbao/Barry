#!/usr/bin/env perl
use strict;
use v5.10.1; # for say and switch
use autodie qw(:all);
use IPC::System::Simple qw(run runx capture capturex $EXITVAL EXIT_ANY);
binmode(STDOUT, ":utf8");
binmode(STDERR, ":utf8");
use Encode;
use utf8;
@ARGV = map {decode_utf8 $_} @ARGV;

use feature 'signatures';
no warnings "experimental::signatures";

use Data::Dumper;
use JSON;

my $json = JSON->new->utf8->canonical->pretty;

(my $comment_doc = <<~'EOFc83131117f09') =~ s,^# .*org-mode.*,,gm;
# {%org-mode%}

# {%/org-mode%}
EOFc83131117f09

## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl -P '?"$comment_doc"' \
# 1:m1 '?"old manifest"' \
# 2:m2 '?"new manifest"' \
# m:match='"."' '?"要求匹配到指定文本才输出"' \

## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("posix_default");



my $m1 = "";
my $m2 = "";
my $match = ".";

my $handler_help = sub {
    print "$comment_doc";
    print "\n\n选项和参数：\n";
    printf "%6s", '-1, ';
    printf "%-24s", '--m1=M1';
    if (length('--m1=M1') > 24 and length("old manifest") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "old manifest";
    print "\n";
    printf "%6s", '-2, ';
    printf "%-24s", '--m2=M2';
    if (length('--m2=M2') > 24 and length("new manifest") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "new manifest";
    print "\n";
    printf "%6s", '-m, ';
    printf "%-24s", '--match=MATCH';
    if (length('--match=MATCH') > 24 and length("要求匹配到指定文本才输出") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "要求匹配到指定文本才输出";
    print "\n";

    my $exit_value = 0;
    if (@_ && $_[0] ne "help" && $_[1] != 1) {
        $exit_value = shift @_;
        print "@_\n";
    }

    exit($exit_value);
};

GetOptions (
    'm1|1=s' => \$m1,
    'm2|2=s' => \$m2,
    'match|m=s' => \$match,
    'help|h!' => \&$handler_help,
);


## end generated code

use Mojo::DOM;
use File::Slurp;
my $xml_str = read_file($m1);

$xml_str = decode_utf8($xml_str);

my $dom = Mojo::DOM->new->parse($xml_str);

my %m1_project_revisions;
$dom->find('project')->each(
    sub {
        my $project = $_->{name};
        my $revision = $_->{revision};

        $m1_project_revisions{$project} = $revision;
    });

$xml_str = read_file($m2);

$xml_str = decode_utf8($xml_str);

$dom = Mojo::DOM->new->parse($xml_str);

my %m2_project_revisions;
$dom->find('project')->each(
    sub {
        my $project = $_->{name};
        my $revision = $_->{revision};
        $m2_project_revisions{$project} = $revision;
    });

for my $project (keys %m1_project_revisions) {
    if ($m1_project_revisions{$project} ne $m2_project_revisions{$project}) {
        my $command = <<~'EOFc83131117f09';
project=%s
echo working with $project
cd /data/git/$project.git
tmplog=~/tmp/logs.$$
. atexit rm -f $tmplog
git log -p %s..%s -1000 > $tmplog

if grep -q -P "%s" $tmplog; then
    cat $tmplog
fi

EOFc83131117f09

        $command = sprintf $command, $project, $m1_project_revisions{$project}, $m2_project_revisions{$project}, $match;
        say STDERR "running $command";
        run($command);
    }}
