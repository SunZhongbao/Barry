#+LAST_MOBILE_CHANGE: 2015-03-08 21:47:17
#+title: Bash参数处理（使用getopt命令）

* 准备工作

  我希望使用的语法格式是这样的：

  #+BEGIN_SRC sh
    gerenate-getopt \
        oboolean-option=def-value-o ?help-o \
        a:argument ?help-a=def-value-a
  #+END_SRC



  其中，第一个字母是短选项，比如上面的这段脚本，最后生成的会有 =-o= 和 =-a= 两个选项。第二个字母如果是 =:= 的话，表示这个选项是带参数的；否则它是不带参数的（真/假 / 乒乓 / 开关）选项。

  后面的 ~=.*~ 代表这个选项的初始值，等号前面可以不加空格。

  后面的 =?.*= 代表这个选项的帮助，问号前面也可以不加空格。

  如果 ~='()'~ 的话，表示这个选项带的参数是个数组（多次指定该选项会累积），否则它是个简单的字符串（多次指定该选项会覆盖，以最后指定的值为准）。

  最后输出一段脚本，可以用来进行参数处理。

   #+name: prepare
   #+BEGIN_SRC sh
     declare -A short_opts_map
     declare -A long_opts_map
     declare -A help_map
     declare -A default_val_map
     declare -A var_name_map
     declare -A var_type_map

     ## start code-generator "^\\s *#\\s *"
     # generate-getopts s:style=bash p:prefix Pposixly-correct lis-local H:global-help eexport-all
     ## end code-generator
     ## start generated code

     export_all=false
     global_help=
     is_local=false
     posixly_correct=false
     prefix=
     style=bash
     OPTIND=1
     while getopts "eH:lPp:s:h" opt; do
         case "$opt" in

             e) export_all=true ;;
             H) global_help=$OPTARG ;;
             l) is_local=true ;;
             P) posixly_correct=true ;;
             p) prefix=$OPTARG ;;
             s) style=$OPTARG ;;
             h)
                 echo
                 echo
                 printf %6s%s '-e ' 'export-all'
                 printf %-24s ''
                 echo ''
                 printf %6s%s '-H ' 'global-help'
                 printf %-24s 'GLOBAL_HELP'
                 echo ''
                 printf %6s%s '-l ' 'is-local'
                 printf %-24s ''
                 echo ''
                 printf %6s%s '-P ' 'posixly-correct'
                 printf %-24s ''
                 echo ''
                 printf %6s%s '-p ' 'prefix'
                 printf %-24s 'PREFIX'
                 echo ''
                 printf %6s%s '-s ' 'style'
                 printf %-24s 'STYLE'
                 echo ''
                 shift
                 exit 0
                 ;;
             ,*)
                 echo
                 echo
                 printf %6s%s '-e ' 'export-all'
                 printf %-24s ''
                 echo ''
                 printf %6s%s '-H ' 'global-help'
                 printf %-24s 'GLOBAL_HELP'
                 echo ''
                 printf %6s%s '-l ' 'is-local'
                 printf %-24s ''
                 echo ''
                 printf %6s%s '-P ' 'posixly-correct'
                 printf %-24s ''
                 echo ''
                 printf %6s%s '-p ' 'prefix'
                 printf %-24s 'PREFIX'
                 echo ''
                 printf %6s%s '-s ' 'style'
                 printf %-24s 'STYLE'
                 echo ''
                 exit 2
                 ;;
         esac
     done

     shift $((OPTIND - 1))

     ## end generated code


     if [[ $1 =~ ^\? ]]; then
         global_help=${1:1}
         shift
     fi

     while test "$1"; do
         spec=$1
         shift

         if [[ $spec =~ ^@ ]]; then
             short=
         else
             short=${spec:0:1}
         fi
         spec=${spec:1}
         if [[ $spec =~ ^: ]]; then
             short=$short:
             spec=${spec:1}
         fi

         long=$(echo "$spec"|perl -npe 's/(\?|=).*//')
         help=$(echo "$spec" | perl -ne 'print if s/.*\?(.*?)(=.*|$)/$1/')
         default=$(echo "$spec" | perl -ne 'print if s/.*=(.*?)(\?.*|$)/$1/')

         while true; do
             if test "${1:0:1}" = '?'; then
                 help=${1:1}
                 shift
             elif test "${1:0:1}" = '='; then
                 default=${1:1}
                 shift
             else
                 break
             fi
         done

         short_opts_map[$long]=$short
         if [[ $short =~ : ]]; then
             var_type_map[$long]=string
             long_opts_map[$long]=$long:
             if test "${default:0:1}" = '('; then
                 var_type_map[$long]=array
             fi
         else
             long_opts_map[$long]=$long
             var_type_map[$long]=boolean

             if test "${style}" = bash; then
                 default_val_map[$long-off-]=false
                 default_val_map[$long-on-]=true
             elif test "${style}" = perl; then
                 default_val_map[$long-off-]=0
                 default_val_map[$long-on-]=1
             fi

             if [[ $default =~ \( ]]; then
                 eval bool_val=$default
                 if test "${style}" = bash; then
                     add_around=
                 else
                     add_around=\"
                 fi

                 default_val_map[$long-off-]=${add_around}${bool_val[0]}${add_around}
                 default_val_map[$long-on-]=${add_around}${bool_val[1]}${add_around}
                 if test ${#bool_val[@]} = 3; then
                     default=${add_around}${bool_val[2]}${add_around}
                 else
                     default=${add_around}${bool_val[0]}${add_around}
                 fi
             elif test -z "$default"; then
                 if test "${style}" = bash; then
                     default=false
                 else
                     default=0
                 fi
             fi
         fi
         if test "$style" = bash; then
             default_val_map[$long]=$default
         elif test "$style" = perl; then
             if test "${var_type_map[$long]}" = boolean; then
                 default_val_map[$long]=$default
             elif test "${var_type_map[$long]}" = string; then
                 default_val_map[$long]=${default:-\"\"};
             elif test "${var_type_map[$long]}" = array; then
                 default_val_map[$long]='()'
             fi
         fi
         help_map[$long]=$help
         var_name_map[$long]=${long//-/_}
         if test "$prefix"; then
             var_name_map[$long]=${prefix}_${long//-/_}
         fi
     done

     eval "$(sort-args.reliably -t long_opts_sorted -- "${!long_opts_map[@]}")"

     output-no-long-opts() {
         output_done=false
         for long in "${long_opts_sorted[@]}"; do
             short=${short_opts_map[$long]}
             if test "${var_type_map[$long]}" = boolean; then
                 echo -n ,no-$long
             fi
         done
     }

   #+END_SRC

* bash格式的处理
** 输出范本：

#+BEGIN_SRC sh

  ## start code-generator "^\\s *#\\s *"
  # generate-getopt ggnu p:phone
  ## end code-generator
  ## start generated code
  TEMP=$(getopt -o p:g --long phone:,gnu  -n "$(basename -- "$0")" -- "$@")
  phone=
  gnu=false
  eval set -- "$TEMP"
  while true; do
      case "$1" in
          -p|--phone)
              phone=$2
              shift 2
              ;;
          -g|--gnu|--no-gnu)
              if test "$1" = --no-gnu; then
                  gnu=false
              else
                  gnu=true
              fi
              ;;
          --)
              shift
              break
              ;;
          ,*)
              die "internal error: \$(. bt; echo; bt | indent-stdin)"
              ;;
      esac
  done

  ## end generated code

#+END_SRC

** 输出 ~TEMP=~

  #+name: output-temp-eq
  #+BEGIN_SRC sh
    TEMP=\$($(
                if test "$is_local" = true -o "$posixly_correct" = true; then
                    echo POSIXLY_CORRECT=true
                fi
            ) getopt -o $(string-join '' $(for x in "${long_opts_sorted[@]}"; do x="${short_opts_map[$x]}"; if test "$x" -a "$x" != :; then echo $x; fi; done) h) \\
     --long $(string-join , $(for x in "${long_opts_sorted[@]}"; do echo ${long_opts_map[$x]}; done) help; output-no-long-opts) \\
     -n "\$(basename -- "\$0")" -- "\$@")
  #+END_SRC

** 输出变量初始值

  #+name: output-var-def-val
  #+BEGIN_SRC sh
    for long in "${long_opts_sorted[@]}"; do
        var=${var_name_map[$long]}
        declare declare_opt=
        if test "$export_all" = true; then
            declare_opt=" -x"
        fi
        declare is_array_var=false
        if test "${default_val_map[$long]:0:1}" = '('; then
            declare_opt="$declare_opt -a"
            is_array_var=true
        fi
        if test "$export_all" = false -o "$is_array_var" = true; then
            echo declare${declare_opt} ${var}=${default_val_map[$long]}
        else
            echo declare${declare_opt} ${var}=\$\{$var:-${default_val_map[$long]}\}
        fi
    done
  #+END_SRC

** 输出范本2
  #+name: template2
  #+BEGIN_SRC sh
  eval set -- "\$TEMP"
  while true; do
    case "\$1" in

  #+END_SRC

** 输出参数处理
  #+name: output-1-bool
  #+BEGIN_SRC sh
    if test "\$1" = --no-$long; then
        ${var}=${default_val_map[$long-off-]}
    else
        ${var}=${default_val_map[$long-on-]}
    fi
    shift

  #+END_SRC
  #+name: output-1-case
  #+BEGIN_SRC sh :noweb yes
    $(
        if test "$s"; then
            echo -n "-$s|"
        fi
        echo -n "--$long";
        if test "${var_type_map[$long]}" = boolean; then
            echo -n "|--no-$long"
        fi
        echo ")"
    )
    $(
        if test "${var_type_map[$long]}" = array; then
            echo ${var}=\(\"\${${var}[@]}\" \""\$2\""\)
            echo shift 2
        elif test "${var_type_map[$long]}" = string; then
            echo ${var}=\$2
            echo shift 2
        else
            cat << EOF3
    <<output-1-bool>>
    EOF3
        fi
    )

  #+END_SRC
  #+name: arg-handle
  #+BEGIN_SRC sh :noweb yes
    for long in "${long_opts_sorted[@]}"; do
        s=${short_opts_map[$long]}
        s=${s/:/}
        var=${var_name_map[$long]}
        cat << EOF2
    <<output-1-case>>
    EOF2
        echo ";;"
    done

  #+END_SRC

** 输出帮助

  #+name: output-help
  #+BEGIN_SRC sh
    $(
        echo set +x
        echo echo -e "$global_help"
        echo echo
        echo echo Options and arguments:
        for long in ${long_opts_sorted[@]}; do
            short=${short_opts_map[$long]}
            short=${short/:/}
            if test "$short"; then
                echo printf "%6s" "'-$short, '"
            else
                echo 'printf "%6s" " "'
            fi
            long_output=$(
                if test "${var_type_map[$long]}" = boolean; then
                    echo -n --[no-]$long
                else
                    uc_long=$long
                    uc_long=${uc_long^^}
                    echo -n --$long=${uc_long//-/_}
                    if [[ ${default_val_map[$long]} =~ \( ]]; then
                        echo -n ...
                    fi
                fi
                       )
            opt_chars=$(( ${#long_output} + 6))
            echo printf "%-24s" "'$long_output'"

            if test "${help_map[$long]}"; then
                if test "$opt_chars" -gt 30; then
                    echo echo
                    echo 'printf "%30s" ""'
                fi
                echo echo "${help_map[$long]}"
            else
                echo echo
            fi
        done
        echo exit
    )
  #+END_SRC

** 输出范本3
  #+name: foot
 #+BEGIN_SRC sh :noweb yes
   -h|--help)
       <<output-help>>
       shift
       ;;
   --)
      shift
      break
      ;;
      ,*)
          die "internal error: \$(. bt; echo; bt | indent-stdin)"
          ;;
      esac
   done

  #+END_SRC

** 输出全部变量

* perl格式的处理

#+name: perl-template
#+BEGIN_SRC perl
  use Getopt::Long;

  <%declare-perl-posix%>

  <%declare_perl_local%>

  <%declare-perl-vars%>

  my $handler_help = sub {
      <%output-help%>

      my $exit_value = 0;
      if (@_ && $_[0] ne "help" && $_[1] != 1) {
         $exit_value = shift @_;
         print "@_\n";
      }

      exit($exit_value);
  };

  GetOptions (
  <%output-calls-to-GetOptions%>
      );
  <%output-handlers%>

  #+END_SRC

#+name: perl-getopt-template
#+BEGIN_SRC perl
  '<%opt-name-spec%><%opt-arg-spec%>' => \<%opt-target-spec%>,
#+END_SRC

#+name: perl-handler-template
#+BEGIN_SRC perl
  sub <%handler-name%> {
      my ($opt_name, $opt_value) = @_;
      <%v%> = $opt_value ? <%var-on-value%> : <%var-off-value%>;
  }
#+END_SRC

#+name: perl-global-help-template
#+BEGIN_SRC perl
  print <%global-help%>;
  print "\n\n选项和参数：\n";
#+END_SRC

#+name: perl-var-help-template
#+BEGIN_SRC perl
  printf "%6s", '<%short-opt%>';
  printf "%-24s", '<%long-opt%>';
  if (length('<%long-opt%>') > 24 and length(<%var-doc%>) > 0) {
      print "\n";
      printf "%30s", "";
  }
  printf "%s", <%var-doc%>;
  print "\n";

#+END_SRC

#+name: output-for-perl
#+BEGIN_SRC sh :noweb yes
  init-perl-var-info() {
      var_name=${var_name_map[$long]}
      sigil=\$
      if test "${var_type_map[$long]}" = array; then
          sigil=@
      fi

      v=${sigil}${var_name}

      s=${short_opts_map[$long]}
      s=${s%:}

      l=${long_opts_map[$long]}
      l=${l%:}

      t=${var_type_map[$long]}

      if test "$t" = boolean &&
              test "${default_val_map[$long-off-]}" != 0 -o \
                   "${default_val_map[$long-on-]}" != 1; then
          need_handler=true
          handler_name=handler_${var_name}
          var_on_value=${default_val_map[$long-on-]}
          var_off_value=${default_val_map[$long-off-]}
      else
          need_handler=false
      fi
  }

  declare declare_perl_posix=$(
      if test "${posixly_correct}" = true; then
          echo 'Getopt::Long::Configure("posix_default");'
      else
          echo 'Getopt::Long::Configure("default");'
      fi
          )

  declare declare_perl_local=$(
      if test "${is_local}" = true; then
          echo 'local @ARGV = @_;'
      else
          echo ""
      fi
          )

  declare declare_perl_vars=$(
      for long in "${long_opts_sorted[@]}"; do
          init-perl-var-info
          echo my $v = "${default_val_map[$long]}"\;
      done
                   )

  declare output_calls_to_GetOptions=$(
      for long in "${long_opts_sorted[@]}"; do
          init-perl-var-info
          declare opt_name_spec=$(
              echo -n "$l"
              if test "$s"; then
                  echo -n "|$s"
              fi
                       )
          declare opt_arg_spec=$(
              if test ${t} = boolean; then
                  echo '!'
              else
                  echo =s
              fi
                         )

          declare opt_target_spec=$(
              if test "$need_handler" = false; then
                  echo $v
              else
                  echo \&$handler_name
              fi
                         )
          cat <<'EOF42934b465d64' | perl -npe 's/^#//' | . .replace-%% --
  #<<perl-getopt-template>>
  EOF42934b465d64
      done

      opt_name_spec='help|h'
      opt_arg_spec='!'
      opt_target_spec='&$handler_help'
      cat <<'EOF42934b465d64' | perl -npe 's/^#//' | . .replace-%% --
  #<<perl-getopt-template>>
  EOF42934b465d64
                            )

  declare output_handlers=$(
      for long in "${long_opts_sorted[@]}"; do
          init-perl-var-info
          if test "${need_handler}" = true; then
              cat <<'EOF42934b465d64' | perl -npe 's/^#//' | . .replace-%% --
  #<<perl-handler-template>>
  EOF42934b465d64
          fi
      done
          )

  declare output_help=$(
      cat <<'EOFc6000ee724fd' | perl -npe 's/^#//' | . .replace-%% --
  #<<perl-global-help-template>>
  EOFc6000ee724fd

      for long in "${long_opts_sorted[@]}"; do
          init-perl-var-info
          declare short_opt=
          if test "$s"; then
              short_opt="-$s, "
          fi

          if test "$t" = boolean; then
              long_opt=--\[no\]$l
          else
              long_opt=--$l=${l^^}
          fi

          declare var_doc=${help_map[$long]}

          cat <<'EOF7f0beacf3665' | perl -npe 's/^#//' | . .replace-%% --
  #<<perl-var-help-template>>
  EOF7f0beacf3665
      done
          )


  cat <<'EOF42934b465d64' | . .replace-%% --
  <<perl-template>>
  EOF42934b465d64
#+END_SRC

* Read only
#+name: read-only
#+BEGIN_SRC sh
# Local Variables: #
# eval: (read-only-mode 1) #
# End: #
#+END_SRC

* 最终脚本

#+name: the-ultimate-script
#+BEGIN_SRC sh :tangle ~/system-config/bin/generate-getopt :comments link :shebang "#!/usr/bin/env bash" :noweb yes

  # All bash scripts should start with ~set -e~ to fail early and loudly.
  set -e
  <<prepare>>

  if test "$style" = bash; then
  cat <<EOF
  <<output-temp-eq>>
    $(
  <<output-var-def-val>>
    )
  <<template2>>
    $(
  <<arg-handle>>
    )
  <<foot>>
  EOF
  elif test "$style" = perl; then
  <<output-for-perl>>
  fi

  <<read-only>>

#+END_SRC

#+results: the-ultimate-script

