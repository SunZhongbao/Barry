#!/usr/bin/env perl
use strict;
use v5.10.1;                    # for say and switch
use autodie qw(:all);
use IPC::System::Simple qw(run runx capture capturex $EXITVAL EXIT_ANY);
binmode(STDOUT, ":utf8");
binmode(STDERR, ":utf8");
use Encode;
use utf8;
@ARGV = map {decode_utf8 $_} @ARGV;


use Data::Dumper;
use JSON;

my $json = JSON->new->utf8->canonical->pretty;
use DateTime;

## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl j:job-url m:min-build-number=0 d:min-date='DateTime->now()->ymd()' \
# ndry-run \

## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("default");



my $dry_run = 0;
my $job_url = "";
my $min_build_number = 0;
my $min_date = DateTime->now()->ymd();

my $handler_help = sub {
    print ;
    print "\n\n选项和参数：\n";
    printf "%6s", '-n, ';
    printf "%-24s", '--[no]dry-run';
    if (length('--[no]dry-run') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-j, ';
    printf "%-24s", '--job-url=JOB-URL';
    if (length('--job-url=JOB-URL') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-m, ';
    printf "%-24s", '--min-build-number=MIN-BUILD-NUMBER';
    if (length('--min-build-number=MIN-BUILD-NUMBER') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-d, ';
    printf "%-24s", '--min-date=MIN-DATE';
    if (length('--min-date=MIN-DATE') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";

    my $exit_value = 0;
    if (@_ && $_[0] ne "help" && $_[1] != 1) {
        $exit_value = shift @_;
        print "@_\n";
    }

    exit($exit_value);
};

GetOptions (
    'dry-run|n!' => \$dry_run,
    'job-url|j=s' => \$job_url,
    'min-build-number|m=s' => \$min_build_number,
    'min-date|d=s' => \$min_date,
    'help|h!' => \&$handler_help,
);


## end generated code

my $job_json = qx(jc curl ${job_url}api/json);
$job_json = decode_json $job_json;
use v5.10;

my %gerrit_params_map;
for (@{$job_json->{builds}}) {
    my $build_url = $_->{url};
    (my $job_name = $build_url) =~ s,.*?/job/(.*?)/.*,$1,;
    my $build_json = $json->decode(scalar capturex("jc", "curl", "${build_url}api/json", ));

    my $build_date = DateTime->from_epoch(epoch => $build_json->{timestamp}/1000)->ymd();



    if ($build_json->{result} && $build_json->{result} ne "SUCCESS") {
        if ($build_json->{number} < $min_build_number && $min_build_number) {
            printf STDERR "build %d smaller then min_build_number, do not retrigger\n", $build_json->{number};
            next;
        }

        if ($build_date lt $min_date) {
            printf STDERR "build %d too old (before $min_date) do not retrigger\n", $build_json->{number};
            next;
        }
        say "retrigger: $build_url, result: ", $build_json->{result};
        if ($dry_run) {
            next;
        }
        if (runx(EXIT_ANY, "jc", "build", "-j", $job_name, "--rebuild-url", "${build_url}") != 0) {
            say "Failed to use rebuild on ${build_url}";
        } else {
            say "Started with rebuild: ${build_url}";
        }
    }
}
