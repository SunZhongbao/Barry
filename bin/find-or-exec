#!/usr/bin/env bash

set -e


## start code-generator "^\\s *#\\s *"
# generate-getopt eerror-exit @:window-id p:process-pattern
## end code-generator
## start generated code
TEMP=$( getopt -o ep:h \
               --long error-exit,process-pattern:,window-id:,help,no-error-exit \
               -n $(basename -- $0) -- "$@")
declare error_exit=false
declare process_pattern=
declare window_id=
eval set -- "$TEMP"
while true; do
    case "$1" in

        -e|--error-exit|--no-error-exit)
            if test "$1" = --no-error-exit; then
                error_exit=false
            else
                error_exit=true
            fi
            shift

            ;;
        -p|--process-pattern)
            process_pattern=$2
            shift 2

            ;;
        --window-id)
            window_id=$2
            shift 2

            ;;
        -h|--help)
            set +x
            echo -e
            echo
            echo Options and arguments:
            printf %6s '-e, '
            printf %-24s '--[no-]error-exit'
            echo
            printf %6s '-p, '
            printf %-24s '--process-pattern=PROCESS_PATTERN'
            echo
            printf "%6s" " "
            printf %-24s '--window-id=WINDOW_ID'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code

if echo $SHELLOPTS | grep -q xtrace; then
    if ! is-tty-io; then
        exec > ~/.cache/system-config/logs/find-or-exec.log 2>&1
    fi
else
    exec >/dev/null 2>&1
fi

if test $# = 0 -a -z "${window_id}"; then
    die "Error: Usage $(basename $0) window_class [program_to_exec]"
fi

window_not_found_command=${2:-true}


to_match=$1
case "$1" in
    konsole|lxterminal|xterm)
        to_match='konsole|lxterminal|xterm'
        ;;
esac

if is-sawfish; then
    is_sawfish=true
else
    is_sawfish=false
fi

if test "${is_sawfish}" = false -o "${process_pattern}"; then
    wmctrl -l -p -x |
        if test "${is_sawfish}" = true; then
            # sort them in the stacking order
            perl -e "$(
cat <<'EOFf8df153f3112'
# {%perl-mode%}
my @list_windows = <>;

my %wid_line_map;

for (@list_windows) {
    (my $wid = $_) =~ s,\s.*,,;
    $wid = hex($wid);
    $wid_line_map{$wid} = $_;
}
# (#<window 1c00004> #<window 2e0000f>)
my $sawfish_output = qx(sawfish-client  -e '(stacking-order)');

my %stacking_map;

my $n = 0;

while ($sawfish_output =~ m/#<window (.*?)>/g) {
    my $wid = hex("0x$1");
    $stacking_map{$wid} = ++$n;
}

for (sort {$stacking_map{$a} <=> $stacking_map{$b} }keys %wid_line_map) {
    print $wid_line_map{$_};
}
# {%/perl-mode%}
EOFf8df153f3112

)"
        else
            cat
        fi | tee ~/tmp/find-or-exec.list |
        (
            while read wid desktop pid class user name; do
                if [[ ${class,,} =~ ${to_match,,} ]]; then
                    if test $pid != 0 -a "${process_pattern}"; then
                        if ! (ls -l /proc/$pid/exe /proc/$pid/file; cat /proc/$pid/cmdline) | tr '\0' ' ' | grep -P "$process_pattern"; then
                            continue
                        fi
                    fi
                    wmctrl -a $wid -i
                    exit 0
                fi
            done
            exit 1
        ) || (
        $window_not_found_command &

        if test "$error_exit" = true; then
            exit 1
        fi
        exit 0
    )
    exit 0
fi

if test "$error_exit" = true; then
    window_not_found_command="${2:-touch ~/tmp/find-or-exec-failed.$$}"
fi

if test "${window_id}"; then
    sawfish_exp=$(
        cat <<'EOF0b05412d4d3b' | . .replace-%% --
; {%sawfish-mode%}
(find-window-or-exec
 (lambda (w) (= (window-id w) <%window-id%>))
 "<%window_not_found_command%>")
; {%/sawfish-mode%}
EOF0b05412d4d3b
               )

elif test "$1" = konsole; then
    sawfish_exp=$(printf '(find-window-or-exec %s "%s")' \
                         '(lambda (w) (and
                                        (string-match "'"$to_match"'" (bhj-window-class w) 0 t)
                                        (not (string= "emacs" (window-name w)))))' \
                                            "$window_not_found_command"
               )
elif test "$1" = emacs -a "$(which emacs)" = ~/external/local/bin/emacs; then
    sawfish_exp=$(printf '(find-window-or-exec (lambda (w) (string= (window-name w) "emacs")))')
else
    sawfish_exp=$(printf '(find-window-or-exec "%s" "%s")' "$1" "$window_not_found_command")
fi

sawfish-client -e "$sawfish_exp"

(
    if test "$1" = emacs; then
        if emacsclient -e 'before-save-hook' | grep "'"; then
            bhj-notify "Warning" "Emacs before-save-hook has gone weird"
        fi
    fi
)&

if test $error_exit = true; then
    if test -e ~/tmp/find-or-exec-failed.$$; then
        rm ~/tmp/find-or-exec-failed.$$
        exit 1
    fi
    exit 0
fi
