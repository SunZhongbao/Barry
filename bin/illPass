#!/usr/bin/env bash

## start code-generator "^\\s *#\\s *"
# generate-getopt -P @confirm=false
## end code-generator
## start generated code
TEMP=$(POSIXLY_CORRECT=true getopt -o h \
                      --long confirm,help,no-confirm \
                      -n $(basename -- $0) -- "$@")
declare confirm=false
eval set -- "$TEMP"
while true; do
    case "$1" in

        --confirm|--no-confirm)
            if test "$1" = --no-confirm; then
                confirm=false
            else
                confirm=true
            fi
            shift

            ;;
        -h|--help)
            set +x
            echo -e
            echo
            echo Options and arguments:
            printf "%6s" " "
            printf %-24s '--[no-]confirm'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code


umask 0077
if true; then
    set -e
fi

export EMACS=t
export SELECT_HISTORY_ORDER=true
window_class=$(sawfish-top-window-class)
window_name=$(sawfish-top-window-name)

sawfish-window mark -t illPass -s
. atexit sawfish-window mark -t illPass -r

window_class=${window_class,,}
window_name=${window_name,,}

add_newline_and_notify=false

if test "${window_name}" = myscr && [[ "${window_class}" =~ xterm ]]; then
    add_newline_and_notify=true
    screen_text_reversed=$(
        tmux capture-pane;
        tmux save-buffer - | reverse;
        tmux delete-buffer
                        )
    who_and_where=$(
        echo "${screen_text_reversed}" | grep '^\{ ([-\w]+@\S+)\s' -o -P | head -n 1|tr -d ' {' # make it work with system-config's PS1
                 )

    if test "${who_and_where}"; then
        window_class=${who_and_where#*@}/${who_and_where%@*}
        window_name=$(echo "${screen_text_reversed}" | grep . | head -n 1)
    fi

elif [[ $window_class =~ firefox ]]; then
    if test "$(sawfish-top-window-wmclass)" = Prompt:Firefox:; then
        true
    elif [[  "$(sawfish-top-window-name)" =~ ^(パスワードを入力してください|Password Required)( - Mozilla Firefox)?$ ]]; then
        true
    else
        url=$(get-firefox-tab-url --no-with-xkeytool|tr -d '"')

        url_host=$(
            perl -e "$(
cat <<'EOF2dc8a5676097' | . .replace-%% --
# {%perl-mode%}
use URI;

$url = URI->new("<%url%>")->canonical;
print $url->host
# {%/perl-mode%}
EOF2dc8a5676097

)" || true

                )

        if test "${url_host}"; then
            window_name=$url_host
        else
            bhj-notify illPass "Can't get firefox url"
        fi
    fi
fi

IFS=$'\n'
passwords=$(
    cd ~/.password-store/
    find "${window_class}/${window_name}/" -name "*.gpg" \( -type f -o -type l \)|perl -pe 's,\.gpg$,,'
         )

declare -A password_map
for password in ${passwords}; do
    password_map[$password]=1
done

extra_options=(
    "请选择你想要使用的密码，此处显示的是按照你的窗口上下文匹配出来的密码"
    "也可以输入「[*+]密码名字或片断」!<return>来强制使用(*)或新增(+)一个密码"
    "也可以输入 「[~>]密码名字或片断」!<return>来生成一个软链接（~）或编辑（>）"
)

is-extra-options() {
    for x in "${extra_options[@]}"; do
        if test "$x" = "$1"; then
            return 0
        fi
    done
    return 1
}

if test "${#password_map[*]}" = 1 -a "$confirm" = false; then
    which_password=${passwords}
else
    which_password=$(select-args -o -p "Which password do you want to use for ${window_class}/${window_name}?" $passwords "${extra_options[@]}")
fi

if test "${password_map[$which_password]}" != 1; then
    if is-extra-options "${which_password}"; then
        bhj-notify illPass "这是一个帮助用的提示选项，选它不会执行任何操作，请重试"
        exit 0
    elif [[ $which_password =~ ^(\*|~|\>) ]]; then
        first_char=${which_password:0:1}
        abbrev=${which_password:1}

        which_password=$(
            cd ~/.password-store
            select-output-line -1 -p "请选择、确认你想使用的密码" find ./ -name .git -prune -o -type f -path "*$abbrev*.gpg" -print | perl -pe 's,\.gpg$,,'
                      )
        if test "${first_char}" = \~; then
            (
                cd ~/.password-store
                mkdir -p "${window_class}/${window_name}"
                relative-link "$which_password".gpg "${window_class}/${window_name}/"
                git add .
                git commit -m "Add symlink" || true
            )
        elif test "${first_char}" = \>; then
            bhj-notify illPass "edit ${which_password}"
            pass edit "$which_password"
            sawfish-window mark -t illPass -r
        fi
    elif [[ $which_password =~ ^\+ ]]; then
        which_password=${which_password#+}
        if ! [[ $which_password =~ / ]] && yes-or-no-p -y "你输入的密码名字不包含目录，使用 ${window_class}/${window_name} 作为父目录？"; then
            which_password="${window_class}/${window_name}/${which_password}"
        fi

        if yes-or-no-p -y "生成一个随机密码？"; then
            pass generate "$which_password" 12
        fi
        bhj-notify illPass "edit ${which_password}"
        pass edit $which_password
        sawfish-window mark -t illPass -r
    fi
fi

if test "${confirm}" = true && yes-or-no-p -y "Edit your password?"; then
    exec pass edit "${which_password}"
fi

password=$(
    pass "${which_password}"
        )

if test ${#password} -gt 20 || [[ $password =~ $'\n' ]]; then
    bhj-notify illPass "Bad password, too long"
    exit
fi
sawfish-window mark -t illPass -r

xdotool-when-keyboard-clear type --clearmodifiers "${password}"

if test "${add_newline_and_notify}" = true; then
    xdotool-when-keyboard-clear type --clearmodifiers $'\r'
    bhj-notify illPass "Have inputed your password ${which_password}!"
fi
