#!/usr/bin/env bash
set -e

saved_args=("$@")

declare comment_doc=$(
    cat <<'EOFe9576f8668e0' | grep -v '#.*org-mode%'
# {%org-mode%}
This script runs a command, but caches its output.

Next time the same command is run, it will be skipped, only the old cached result is output.

You can use -r (--renew-caches) to force run the command, and update the cache.

The output is not cached if the command fails.
# {%/org-mode%}
EOFe9576f8668e0
        )

## start code-generator "^\\s *#\\s *"
# generate-getopt -P '?"${comment_doc}"' \
    # d:cache-dir='${CACHED_RUN_SAVE_DIR:-~/.cache/system-config/cached-run}' \
    # e:extra-envvars='${CACHED_RUN_EXTRA_ENVVARS}' '?"额外的会影响运行结果的环境变量，将其作为命令行的一部分，在取 cache 的时候进行对比"' \
    # rrenew-caches='"${renew_caches:-false}"' '?"更新 cache 结果（本次所有子进程包括自己 cached-run 均当作 cache 不存在）"' \
    # @renew-cache-bg=true '?"运行完成后在后台刷新 cache，默认为 true"' \
    # vverbose '?"显示更多信息"' \
    # @edit

## end code-generator
## start generated code
TEMP=$(POSIXLY_CORRECT=true getopt -o d:e:rvh \
                      --long cache-dir:,edit,extra-envvars:,renew-cache-bg,renew-caches,verbose,help,no-edit,no-renew-cache-bg,no-renew-caches,no-verbose \
                      -n $(basename -- $0) -- "$@")
declare cache_dir=${CACHED_RUN_SAVE_DIR:-~/.cache/system-config/cached-run}
declare edit=false
declare extra_envvars=${CACHED_RUN_EXTRA_ENVVARS}
declare renew_cache_bg=true
declare renew_caches="${renew_caches:-false}"
declare verbose=false
eval set -- "$TEMP"
while true; do
    case "$1" in

        -d|--cache-dir)
            cache_dir=$2
            shift 2

            ;;
        --edit|--no-edit)
            if test "$1" = --no-edit; then
                edit=false
            else
                edit=true
            fi
            shift

            ;;
        -e|--extra-envvars)
            extra_envvars=$2
            shift 2

            ;;
        --renew-cache-bg|--no-renew-cache-bg)
            if test "$1" = --no-renew-cache-bg; then
                renew_cache_bg=false
            else
                renew_cache_bg=true
            fi
            shift

            ;;
        -r|--renew-caches|--no-renew-caches)
            if test "$1" = --no-renew-caches; then
                renew_caches=false
            else
                renew_caches=true
            fi
            shift

            ;;
        -v|--verbose|--no-verbose)
            if test "$1" = --no-verbose; then
                verbose=false
            else
                verbose=true
            fi
            shift

            ;;
        -h|--help)
            set +x
            echo -e "${comment_doc}"
            echo
            echo Options and arguments:
            printf %6s '-d, '
            printf %-24s '--cache-dir=CACHE_DIR'
            echo
            printf "%6s" " "
            printf %-24s '--[no-]edit'
            echo
            printf %6s '-e, '
            printf %-24s '--extra-envvars=EXTRA_ENVVARS'
            echo
            printf "%30s" ""
            echo "额外的会影响运行结果的环境变量，将其作为命令行的一部分，在取 cache 的时候进行对比"
            printf "%6s" " "
            printf %-24s '--[no-]renew-cache-bg'
            echo "运行完成后在后台刷新 cache，默认为 true"
            printf %6s '-r, '
            printf %-24s '--[no-]renew-caches'
            echo "更新 cache 结果（本次所有子进程包括自己 cached-run 均当作 cache 不存在）"
            printf %6s '-v, '
            printf %-24s '--[no-]verbose'
            echo "显示更多信息"
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code

if is-jenkins; then
    "$@"
    exit $?
fi

export renew_caches
if test "${FORCE_RENEW_CACHES}" = true; then
    renew_caches=${FORCE_RENEW_CACHES}
elif test "${renew_caches}" = true; then
    export FORCE_RENEW_CACHES=true
fi

cache_dir=$(absp "${cache_dir}")
mkdir -p "$cache_dir"

cmd_md5=$(echo "$*" | md5sum | pn 1)
cmd_md5_file_prefix=${cache_dir}/${cmd_md5:0:2}/${cmd_md5:2}

mkdir -p "${cmd_md5_file_prefix%/*}"

get-env-and-cmd() {
    for x in $extra_envvars; do
        declare -x -p "$x" 2>/dev/null || true
    done

    echo -n "$*"
}

if test -e "${cmd_md5_file_prefix}.cmd" -a -e "${cmd_md5_file_prefix}.out" &&
        test "$(cat "${cmd_md5_file_prefix}.cmd")" = "$(get-env-and-cmd "$@")"; then
    if test "${renew_caches}" != true; then
        cat "${cmd_md5_file_prefix}.out"
        (
            if test "$edit" = true; then
                e "${cmd_md5_file_prefix}.out" || true
            fi &>/dev/null&
            if test "${renew_cache_bg}" != true; then
                exit
            fi
            sleep 1
            FORCE_RENEW_CACHES=true setsid nohup cached-run "${saved_args[@]}"
        ) >/dev/null 2>&1&
        exit
    fi
fi

if test "${verbose}" = true; then
    exec 2>> ~/tmp/cached-run.log
    log running "${saved_args[*]}"
    set -x
fi

get-env-and-cmd "$@" > "${cmd_md5_file_prefix}.cmd"
. atexit rm -f "${cmd_md5_file_prefix}.out.$$"

set -o pipefail
if ! "$@" | tee "${cmd_md5_file_prefix}.out.$$"; then
    log cached-run "Failed to run $*" || true
    exit 1
elif test "${verbose}" = true; then
    if test "${CACHED_RUN_VERBOSE_OUTPUT}"; then
        log "extra output: $(eval "${CACHED_RUN_VERBOSE_OUTPUT}")"
    fi
    log cached-run "Done running $*"$'\n'"@${cmd_md5_file_prefix}.out.$$" || true
fi
. aterr log cached-run.err "Failed running $*"
if test ! -e "${cmd_md5_file_prefix}.out"; then
    FORCE_RENEW_CACHES=true
    touch "${cmd_md5_file_prefix}.out"
fi

if test "${FORCE_RENEW_CACHES}" = true &&
        ! diff=$(diff "${cmd_md5_file_prefix}.out.$$" "${cmd_md5_file_prefix}.out"); then
    echo "$diff" > ${cmd_md5_file_prefix}.diff
    mv "${cmd_md5_file_prefix}.out.$$" "${cmd_md5_file_prefix}.out"
elif test "${verbose}" = true; then
    log cached-run "no diff between cache and real result"
fi

if test "$edit" = true; then
    e "${cmd_md5_file_prefix}.out" || true
fi &>/dev/null&
