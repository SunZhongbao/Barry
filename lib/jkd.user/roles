#!/usr/bin/env perl
use strict;
use v5.10.1; # for say and switch
use autodie qw(:all);
use IPC::System::Simple qw(run runx capture capturex $EXITVAL EXIT_ANY);
binmode(STDOUT, ":utf8");
binmode(STDERR, ":utf8");
use Encode;
use utf8;
@ARGV = map {decode_utf8 $_} @ARGV;

use JSON;

my $json = JSON->new->utf8->canonical->pretty;

(my $comment_doc = <<~'EOFc83131117f09') =~ s,^# .*org-mode.*,,gm;
# {%org-mode%}
* action = list

列出指定项目的角色列表

* action = add-user

将指定的 user 加入到指定的 role

- 特殊值 ALL：加入所有 roles
- 若不指定 role，会让你手动选择
* action = query
查询 USER 在哪些 ROLES 里
* action = del-user
将指定用户从指定 role 里删除
# {%/org-mode%}
EOFc83131117f09

## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl -P '?"$comment_doc"' \
# a:action p:project  r:role-name u:user-name
## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("posix_default");



my $action = "";
my $project = "";
my $role_name = "";
my $user_name = "";

my $handler_help = sub {
    print "$comment_doc";
    print "\n\n选项和参数：\n";
    printf "%6s", '-a, ';
    printf "%-24s", '--action=ACTION';
    if (length('--action=ACTION') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-p, ';
    printf "%-24s", '--project=PROJECT';
    if (length('--project=PROJECT') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-r, ';
    printf "%-24s", '--role-name=ROLE-NAME';
    if (length('--role-name=ROLE-NAME') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-u, ';
    printf "%-24s", '--user-name=USER-NAME';
    if (length('--user-name=USER-NAME') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";

    my $exit_value = 0;
    if (@_ && $_[0] ne "help" && $_[1] != 1) {
        $exit_value = shift @_;
        print "@_\n";
    }

    exit($exit_value);
};

GetOptions (
    'action|a=s' => \$action,
    'project|p=s' => \$project,
    'role-name|r=s' => \$role_name,
    'user-name|u=s' => \$user_name,
    'help|h!' => \&$handler_help,
);


## end generated code

if (not $action) {
    $action = shift @ARGV;
}

sub list_roles() {

    my $roles_json =
        $json->decode(scalar capture("cached-run -e scm_jira_url jkd rest project/${project}/role"));

    my %roles;
    for (keys %$roles_json) {
        (my $role_id = $roles_json->{$_}) =~ s,.*/,,;
        my $role_details =
            $json->decode(scalar capture("cached-run -e scm_jira_url jkd rest project/${project}/role/${role_id}"));
        $roles{$_} = $role_details;
    }

    print decode_utf8($json->encode(\%roles));
}

die "Must specify project" unless $project;

sub is_exact_action($) {
    our %exact_actions;
    my $target_action = $_[0];
    $exact_actions{$target_action} = 1;
    return $action eq $target_action;
}

if (is_exact_action "list") {
    list_roles;
} else {
    my $roles_json =
        $json->decode(scalar capture("cached-run -e scm_jira_url jkd roles -a list -p $project"));

    if (is_exact_action ("add-user") || is_exact_action("del-user")) {

        die "No such role: $role_name" unless $roles_json->{$role_name};
        my $role_id = $roles_json->{$role_name}{id};

        if (grep {$_->{name} eq $user_name} @{$roles_json->{$role_name}{actors}}) {
            if (is_exact_action "del-user") {
                runx "debug-run", "jkd", "rest", "-a", "project/${project}/role/${role_id}?user=${user_name}", "--", "-X", "DELETE";
                exit 0;
            }
            say STDERR "$user_name already in role $role_name";
            exit (0);
        } elsif (is_exact_action "del-user") {
            die "Can't find user $user_name in $role_name";
        }

        my $user_json = {
            user => [$user_name],
        };

        runx "debug-run", "jkd", "rest", "-a", "project/${project}/role/${role_id}",
            "--", "-X", "POST", "--data",
            decode_utf8($json->encode($user_json)), "-H", 'Content-Type: application/json';
    } elsif (is_exact_action "query") {
        for (keys %$roles_json) {
            my $role_name = $_;
            if (grep {$_->{name} eq $user_name} @{$roles_json->{$role_name}{actors}}) {
                say "$role_name";
            }
        }
    } else {
        our %exact_actions;
        die "Can't handle action: '$action', must be one of: " . join(", ", sort keys %exact_actions) . "\n";
    }
}
