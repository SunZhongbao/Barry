#!/usr/bin/env perl
use strict;
use v5.10.1; # for say and switch
use autodie qw(:all);
use IPC::System::Simple qw(run runx capture capturex $EXITVAL EXIT_ANY);
binmode(STDOUT, ":utf8");
binmode(STDERR, ":utf8");
use Encode;
use utf8;
@ARGV = map {decode_utf8 $_} @ARGV;

use JSON;

my $json = JSON->new->utf8->canonical->pretty;

use File::Slurp;

(my $comment_doc = <<~'EOFc83131117f09') =~ s,^# .*org-mode.*,,gm;
# {%org-mode%}

# {%/org-mode%}
EOFc83131117f09

## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl -P '?"$comment_doc"' \
# i:issuetype-name d:dump-dir='"$ENV{HOME}/src/jenkins-tasks/jira/$ENV{scm_jira_url}/issuetypes"' vverbose
## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("posix_default");



my $dump_dir = "$ENV{HOME}/src/jenkins-tasks/jira/$ENV{scm_jira_url}/issuetypes";
my $issuetype_name = "";
my $verbose = 0;

my $handler_help = sub {
    print "$comment_doc";
    print "\n\n选项和参数：\n";
    printf "%6s", '-d, ';
    printf "%-24s", '--dump-dir=DUMP-DIR';
    if (length('--dump-dir=DUMP-DIR') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-i, ';
    printf "%-24s", '--issuetype-name=ISSUETYPE-NAME';
    if (length('--issuetype-name=ISSUETYPE-NAME') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-v, ';
    printf "%-24s", '--[no]verbose';
    if (length('--[no]verbose') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";

    my $exit_value = 0;
    if (@_ && $_[0] ne "help" && $_[1] != 1) {
        $exit_value = shift @_;
        print "@_\n";
    }

    exit($exit_value);
};

GetOptions (
    'dump-dir|d=s' => \$dump_dir,
    'issuetype-name|i=s' => \$issuetype_name,
    'verbose|v!' => \$verbose,
    'help|h!' => \&$handler_help,
);


## end generated code

$dump_dir = "$dump_dir/$issuetype_name";
runx("mkdir", "-p", "$dump_dir");

chdir($dump_dir);

$ENV{CACHED_RUN_EXTRA_ENVVARS} = "scm_jira_url";

my $issuetypeschemes_json =
    $json->decode(scalar capture("debug-run cached-run -e scm_jira_url jkd export-issuetypeschemes | tee issuetypeschemes.json"));

my $fieldconfigschemes_json =
    $json->decode(scalar capture("debug-run cached-run -e scm_jira_url jkd export-fieldconfigschemes | tee fieldconfigschemes.json"));

my $issuetypescreenschemes_json =
    $json->decode(scalar capture("debug-run cached-run -e scm_jira_url jkd export-issuetypescreenschemes | tee issuetypescreenschemes.json"));

my $workflowschemes_json =
    $json->decode(scalar capture("debug-run cached-run -e scm_jira_url jkd export-workflowschemes | tee workflowschemes.json"));

my $project_name;
use Data::Dumper;
my $issuetypescheme_name;
map {
    my $name = $_;
    $_ = $issuetypeschemes_json->{$_};
    if (grep {$issuetype_name eq $_} @{$_->{issuetypes}} ) {
        if (@{$_->{projects}} > 1) {
            my $not_this_one = "以上都不是";
            my $selected_project = decode_utf8(scalar capturex("select-args", "-o", "-p", "选择哪个 Project？", $not_this_one, map {$_->{name}} @{$_->{projects}}));
            if ($selected_project ne $not_this_one) {
                $issuetypescheme_name = $name;
                $project_name = $selected_project;
            }
        } elsif (@{$_->{projects}} == 1) {
            $issuetypescheme_name = $name;
            $project_name = $_->{projects}[0]{name};
        }
    }
} keys %{$issuetypeschemes_json};

my $fieldconfigscheme_id;
my $fieldconfigscheme_name;
map {
    my @projects = @{$fieldconfigschemes_json->{$_}{projects}};
    if (grep {$project_name eq $_->{name}} @projects) {
        $fieldconfigscheme_id = $fieldconfigschemes_json->{$_}{id};
        $fieldconfigscheme_name = $_;
    }
} keys %$fieldconfigschemes_json;

my $fcs_json = {};
if ($fieldconfigscheme_id) {
    $fcs_json =
        $json->decode(scalar capture("debug-run cached-run -e scm_jira_url jkd export-fieldconfigscheme -i $fieldconfigscheme_id"));
}

my $fieldconfig_id;
my $fieldconfig_name;

map {
    if ($_ eq $issuetype_name) {
        $fieldconfig_id = $fcs_json->{$_}{id};
        $fieldconfig_name = $fcs_json->{$_}{name};
    }
} keys %$fcs_json;

my $fieldconfig_json =
    $fieldconfig_id ?
    $json->decode(scalar capture("debug-run cached-run -e scm_jira_url jkd export-fieldconfig -i $fieldconfig_id")) :
    {};

my $issuetypescreenscheme_id;
my $issuetypescreenscheme_name;

map {
    my @projects = @{$issuetypescreenschemes_json->{$_}{projects}};
     if (grep {$project_name eq $_->{name}} @projects) {
        $issuetypescreenscheme_id = $issuetypescreenschemes_json->{$_}{id};
        $issuetypescreenscheme_name = $_;
    }
} keys %$issuetypescreenschemes_json;

my $issuetypescreenscheme_json =
    $issuetypescreenscheme_id ?
    $json->decode(scalar capture("debug-run cached-run -e scm_jira_url jkd export-issuetypescreenscheme -i $issuetypescreenscheme_id")) :
    {};

my $screenscheme_id;
my $screenscheme_name;

map {
    if ($issuetype_name eq $_) {
        $screenscheme_id = $issuetypescreenscheme_json->{$_}{id};
        $screenscheme_name = $issuetypescreenscheme_json->{$_}{name};
    }
} keys %$issuetypescreenscheme_json;

my $screenscheme_json = $screenscheme_id ?
    $json->decode(scalar capture("debug-run cached-run -e scm_jira_url jkd export-screenscheme -i $screenscheme_id")) :
    {};

my $workflow_id;
my $workflow_name;
my $workflowscheme_name;

map {
    if ($_->{issuetypes_workflow}{$issuetype_name} and grep {$project_name eq $_} @{$_->{projects}}) {
        $workflowscheme_name = $_->{name};
        $workflow_name = $_->{issuetypes_workflow}{$issuetype_name};
    }
} @$workflowschemes_json;

if ($workflow_name) {
    runx("debug-run", "cached-run", "-e", "scm_jira_url", "jkd", "workflow", "export", "-w", "${workflow_name}", "-f", "${workflow_name}.workflow.xml", "-c")
}


my %screens;

map {
    if (ref $screenscheme_json->{$_}) {
        my $screen_name = $screenscheme_json->{$_}{name};
        $screens{$screen_name} = 1;
    }
} keys %$screenscheme_json;

my $workflow_api_json =
    $json->decode(scalar capture("debug-run cached-run -e scm_jira_url jkd rest workflow"));
my $screens_api_json =
    $json->decode(scalar capture("debug-run cached-run -e scm_jira_url jkd rest screens"));

my %screen_ids_and_names = map {
    (
        $_->{id} => $_->{name},
        $_->{name} => $_->{id},
    )
} @$screens_api_json;

my $workflow_xml = "";
if ($workflow_name) {
    $workflow_xml = decode_utf8 read_file("${workflow_name}.workflow.xml");
    use Mojo::DOM;
    my $dom = Mojo::DOM->new->parse($workflow_xml);
    $dom->find('meta[name="jira.fieldscreen.id"]')->each(
        sub {
            my $id = $_->text;
            if ($id) {
                my $name = $id;
                $screens{$name} = 1 if $name;
                say STDERR "found screen from xml: $name";
            }
        }
    );
}

map {
    $screens{$_} =
        $json->decode(scalar capturex("debug-run", "cached-run", "-e", "scm_jira_url", "jkd", "dump-screen", "-s", "$_"));
} keys %screens;


# fields: get from the screens

my %wanted_fields;
map {
    my $screen = $screens{$_};
    my $tabs = $screen->{tabs};
    map {
        map {
            $wanted_fields{$_->{name}} = 1;
        } @{$_->{fields}}
    } @$tabs;
} keys %screens;

my $issuetype_complete_data = {
    issuetype => $issuetype_name,
    issuetypescheme => $issuetypescheme_name,
    project => $project_name,
    fieldconfigscheme => $fieldconfigscheme_name,
    fieldconfig => $fieldconfig_name,
    fieldconfig_json => $fieldconfig_json,
    screenscheme => $screenscheme_name,
    screenscheme_json => $screenscheme_json,
    issuetypescreenscheme => $issuetypescreenscheme_name,
    workflowscheme => $workflowscheme_name,
    workflow_xml => $workflow_xml,
    workflow => $workflow_name,
    screens => \%screens,
    fields => \%wanted_fields,
};

if ($verbose) {
    $issuetype_complete_data->{issuetypeschemes_json} = $issuetypescreenschemes_json;
    $issuetype_complete_data->{fieldconfigschemes_json} = $fieldconfigschemes_json;
    $issuetype_complete_data->{issuetypescreenschemes_json} = $issuetypescreenschemes_json;
    $issuetype_complete_data->{workflowschemes_json} = $workflowschemes_json;
}

map {
    delete $fieldconfig_json->{$_}{screens};
    if (not $wanted_fields{$_} and not $fieldconfig_json->{$_}{required}) {
        delete $fieldconfig_json->{$_};
    }
} keys %$fieldconfig_json;

print decode_utf8 ($json->encode($issuetype_complete_data));
my $issuetype_json_file = "$ENV{HOME}/src/jenkins-tasks/jira/$ENV{scm_jira_url}/issuetypes/$issuetype_name.dump.json";
use File::Basename;
my $issuetype_json_dir = dirname($issuetype_json_file);
runx("mkdir", "-p", "$issuetype_json_dir", );
open my $fh, ">:encoding(UTF-8)", "${issuetype_json_file}";
print $fh decode_utf8($json->encode($issuetype_complete_data));
close $fh;

my $comment = <<~'EOFc83131117f09';
# {%org-mode%}
接下来要做的事情：

1. 计算出哪些 screens 要处理
2. 计算出哪些 fields 要处理
3. 在两边都导出 issuetype
4. 如果在目标环境上，某些 issuetype、字段、screen、scheme 不存在，要允许导入
5. 如果在目标环境上，如果某些模块已经存在，要允许对比其差异，如果有需要的话，就导入。
# {%/org-mode%}
EOFc83131117f09
