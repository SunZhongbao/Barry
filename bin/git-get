#!/usr/bin/env bash
set -e
saved_args=("$@")
notify-error() {
    if is-jenkins; then
        echo "${saved_args[@]}" | mail-cms -e -o -i -s "git-get failed in $(jenkins-info)"
    fi
}

. aterr notify-error

## start code-generator "^\\s *#\\s *"
# generate-getopt \
    # d:dir \
    # u:url \
    # b:branch \
    # r:reference \
    # c:create \
    # @:clone-args @single-branch @mirror='("" --mirror)' \
    # @:retry-regexp="'.'" \
    # @:depth '?"默认下载全部历史记当，如果指定的话，只下载深度为 DEPTH 个历史提交"'
## end code-generator
## start generated code
TEMP=$( getopt -o b:c:d:r:u:h \
               --long branch:,clone-args:,create:,depth:,dir:,mirror,reference:,retry-regexp:,single-branch,url:,help,no-mirror,no-single-branch \
               -n $(basename -- $0) -- "$@")
declare branch=
declare clone_args=
declare create=
declare depth=
declare dir=
declare mirror=
declare reference=
declare retry_regexp='.'
declare single_branch=false
declare url=
eval set -- "$TEMP"
while true; do
    case "$1" in

        -b|--branch)
            branch=$2
            shift 2

            ;;
        --clone-args)
            clone_args=$2
            shift 2

            ;;
        -c|--create)
            create=$2
            shift 2

            ;;
        --depth)
            depth=$2
            shift 2

            ;;
        -d|--dir)
            dir=$2
            shift 2

            ;;
        --mirror|--no-mirror)
            if test "$1" = --no-mirror; then
                mirror=
            else
                mirror=--mirror
            fi
            shift

            ;;
        -r|--reference)
            reference=$2
            shift 2

            ;;
        --retry-regexp)
            retry_regexp=$2
            shift 2

            ;;
        --single-branch|--no-single-branch)
            if test "$1" = --no-single-branch; then
                single_branch=false
            else
                single_branch=true
            fi
            shift

            ;;
        -u|--url)
            url=$2
            shift 2

            ;;
        -h|--help)
            set +x
            echo -e
            echo
            echo Options and arguments:
            printf %6s '-b, '
            printf %-24s '--branch=BRANCH'
            echo
            printf "%6s" " "
            printf %-24s '--clone-args=CLONE_ARGS'
            echo
            printf %6s '-c, '
            printf %-24s '--create=CREATE'
            echo
            printf "%6s" " "
            printf %-24s '--depth=DEPTH'
            echo "默认下载全部历史记当，如果指定的话，只下载深度为 DEPTH 个历史提交"
            printf %6s '-d, '
            printf %-24s '--dir=DIR'
            echo
            printf "%6s" " "
            printf %-24s '--[no-]mirror'
            echo
            printf %6s '-r, '
            printf %-24s '--reference=REFERENCE'
            echo
            printf "%6s" " "
            printf %-24s '--retry-regexp=RETRY_REGEXP'
            echo
            printf "%6s" " "
            printf %-24s '--[no-]single-branch'
            echo
            printf %6s '-u, '
            printf %-24s '--url=URL'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code

branch=${branch:-master}


if test -z "$dir" -o -z "$url"; then
    die "Error: Usage $(basename $0) -d LOCAL_DIR -u REMOTE_GIT_URL"
fi

valid-git-dir() {
    local dir=$1
    if test -d "$dir"/.git || [[ $dir =~ \.git$ ]]; then
        if (
            cd "$dir"
            git log -1
        ) >/dev/null 2>&1; then
            return 0;
        else
            echo "你的 $dir git 仓库目录好像有点问题，可能需要重新创建"
            sleep 1
        fi
    fi
    return 1
}

if ! valid-git-dir "$dir"; then
    mkdir -p "$dir"
    if test "$(find "$dir" -maxdepth 1 | wc -l)" != 1; then
        die "Can't clone into current folder, it's not empty!"
    fi
    (
        cd "$dir"
        if test "${mirror}"; then
            git init --bare .
        else
            git init .
        fi
    )
fi

extra_clone_args=()
extra_fetch_args=()
extra_submod_update_args=()
if test "$depth"; then
    extra_clone_args+=(--depth $depth)
    extra_fetch_args+=(--depth $depth)
    # extra_submod_update_args+=(--depth $depth)
    single_branch=true
fi

if test "$reference"; then
    extra_clone_args+=(--reference "$reference")
fi

if test ! -d $dir; then
    (
        . aterr rm -rf "$dir"
        mkdir -p $dir
        cd $dir

        function do-clone() {
            (
                if test "${single_branch}" = true -o "${depth}"; then
                    # some git repos can't be cloned with
                    # --single-branch, such as this will fail:

                    #   git clone --single-branch https://gerrit.googlesource.com/git-repo/

                    # so we must try twice.
                    single_branch_trys=(--single-branch '')
                else
                    single_branch_trys=('')
                fi

                for single_branch_arg in "${single_branch_trys[@]}"; do
                    if [[ $branch =~ [0-9a-f]{40} ]] ||
                       echo $branch | grep -q -P -e '^refs/(?!heads/|tags/)'; then
                        git init .
                        git remote add origin $url
                        git fetch origin $branch "${extra_fetch_args[@]}"
                        git reset --hard FETCH_HEAD
                        exit 0
                    fi
                    if git clone $clone_args $mirror ${single_branch_arg} -b $branch $url . \
                           "${extra_clone_args[@]}"; then
                        exit 0
                    fi
                done

                exit 1
            )
        }

        if ! (
                . run-with-retry \
                  --errout-regexp "${retry_regexp}" \
                  do-clone
           ); then
            if test "$create" = true; then
                git init .
                git commit -m 'init commit' --allow-empty --author 'qualcomm <someone@qualcomm.com>'
                git push $url HEAD:refs/heads/$branch
                rm .git -rf
                git clone --single-branch -b $branch $url .
            else
                die "无法从 $url git clone 到 $dir 目录，请检查一下 1. $dir 目录是否已损坏，删除试试？ 2. 是否拥有 $url 仓库代码权限"
            fi
        fi
    )
else
    if ! (
            cd $dir
            if test "$(git config remote.origin.url)" != "$url"; then
                git remote remove origin >/dev/null 2>&1 || true
                git remote add origin $url
            fi
            if test "$mirror"; then
                git config remote.origin.fetch '+refs/heads/*:refs/heads/*'
            else
                git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'
            fi
            if test "$single_branch" != true; then
                git fetch -v origin "${extra_fetch_args[@]}" || exit -1
            fi

            git fetch -v origin $branch "${extra_fetch_args[@]}" || exit -1
            if test -z "$mirror"; then
                git clean -xfd || true

                git reset --hard FETCH_HEAD
                git checkout -B $branch origin/$branch >/dev/null 2>&1 || true
            fi
        ); then
        die "从 $url 更新代码到 $dir 目录失败，请检查一下 1. $dir 目录是否已损坏，删除试试？ 2. 是否拥有 $url 仓库代码权限"
    fi
fi

(
    cd $dir
    git submodule update --init "${extra_submod_update_args[@]}" || true

    if test "${scm_gerrit_server}" && [[ "$url" =~ ${scm_gerrit_server} ]]; then
        gitdir=$(git rev-parse --git-dir);
        if ! grep -q 'Change-Id' ${gitdir}/hooks/commit-msg &>/dev/null; then
            debug-run scp -p -P ${scm_gerrit_port} ${scm_gerrit_user}@${scm_gerrit_server}:hooks/commit-msg ${gitdir}/hooks/
        fi
    fi || true
)

(
    cd $dir
    log "Your git @$PWD has been updated, here's some details:"
    log "$(git log -1)"
) || true
