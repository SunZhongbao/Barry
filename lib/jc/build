#!/usr/bin/env perl
use strict;
use v5.10.1; # for say and switch
use autodie qw(:all);
use IPC::System::Simple qw(run runx capture capturex $EXITVAL EXIT_ANY);
binmode(STDOUT, ":utf8");
binmode(STDERR, ":utf8");
use Encode;
use utf8;
@ARGV = map {decode_utf8 $_} @ARGV;

use String::ShellQuote;
use File::Slurp;

use Data::Dumper;
use JSON;

my $json = JSON->new->utf8->canonical->pretty;

## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl -P p:params='()' '?"可以指定多个，格式为 name=value，目前不支持文件格式参数"' \
# j:job-name-or-url '?"指定 job 名字，或 job url"' \
# @:extra-environ-params '?"额外传递指定的环境变量列表作为 build 的参数，可指定多个，以空格分格；build 参数名即环境变量名；build 参数值即环境变量的值"' \
# @:extra-environ-params-regexp '?"参考 extra_environ_params 的帮助，环境变量中所有名字匹配指定正则表达式的变量，全部作为 build 的参数传入"' \
# @print-params-only '?"仅打印启动任务时的参数列表，之后就退出，不真正启动编译"' \
# @:extra-params-from-build-url '?"从另一个 build 里读取它的参数列表，指定的话会确保在第一个运行（指定的参数生效的优先级最低）"' \
# @:rebuild-url '?"指定要 rebuild 的 url（不适合于直接用 jc rebuild，可能因为它是个 gerrit trigger）。如有需要，用它计算 JOB_URL 和 EXTRA_PARAMS_FROM_BUILD_URL"' \
# @:gerrit-trigger '?"使用这个参数指定的 gerrit review url，模拟 gerrit trigger"' \
# ssynchronized '?"同步编译，直到编译结束才 exit，并通过 exit value 体现其结果"' \
# vverbose '?"实时输出本次 build 的终端输出"' \
# ddebug '?"调试选项，打印出 build 相关的一些信息"' \
# @:save-build-url-to '?"Specify a file where the new build url will be saved"' \
# @rest-retry=1 '?"有时候 Jenkins rest api 调用会返回 502 proxy error，要不要 retry，默认要"' \
# @:execute-with-url '?"指定要执行的命令，其中 %B 会替换为下游 build 的 build_url。只有在同步执行（指定 -s）的时候有效"' \

## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("posix_default");



my $debug = 0;
my $execute_with_url = "";
my $extra_environ_params_regexp = "";
my $extra_environ_params = "";
my $extra_params_from_build_url = "";
my $gerrit_trigger = "";
my $job_name_or_url = "";
my @params = ();
my $print_params_only = 0;
my $rebuild_url = "";
my $rest_retry = 1;
my $save_build_url_to = "";
my $synchronized = 0;
my $verbose = 0;

my $handler_help = sub {
    print ;
    print "\n\n选项和参数：\n";
    printf "%6s", '-d, ';
    printf "%-24s", '--[no]debug';
    if (length('--[no]debug') > 24 and length("调试选项，打印出 build 相关的一些信息") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "调试选项，打印出 build 相关的一些信息";
    print "\n";
    printf "%6s", '';
    printf "%-24s", '--execute-with-url=EXECUTE-WITH-URL';
    if (length('--execute-with-url=EXECUTE-WITH-URL') > 24 and length("指定要执行的命令，其中 %B 会替换为下游 build 的 build_url。只有在同步执行（指定 -s）的时候有效") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "指定要执行的命令，其中 %B 会替换为下游 build 的 build_url。只有在同步执行（指定 -s）的时候有效";
    print "\n";
    printf "%6s", '';
    printf "%-24s", '--extra-environ-params-regexp=EXTRA-ENVIRON-PARAMS-REGEXP';
    if (length('--extra-environ-params-regexp=EXTRA-ENVIRON-PARAMS-REGEXP') > 24 and length("参考 extra_environ_params 的帮助，环境变量中所有名字匹配指定正则表达式的变量，全部作为 build 的参数传入") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "参考 extra_environ_params 的帮助，环境变量中所有名字匹配指定正则表达式的变量，全部作为 build 的参数传入";
    print "\n";
    printf "%6s", '';
    printf "%-24s", '--extra-environ-params=EXTRA-ENVIRON-PARAMS';
    if (length('--extra-environ-params=EXTRA-ENVIRON-PARAMS') > 24 and length("额外传递指定的环境变量列表作为 build 的参数，可指定多个，以空格分格；build 参数名即环境变量名；build 参数值即环境变量的值") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "额外传递指定的环境变量列表作为 build 的参数，可指定多个，以空格分格；build 参数名即环境变量名；build 参数值即环境变量的值";
    print "\n";
    printf "%6s", '';
    printf "%-24s", '--extra-params-from-build-url=EXTRA-PARAMS-FROM-BUILD-URL';
    if (length('--extra-params-from-build-url=EXTRA-PARAMS-FROM-BUILD-URL') > 24 and length("从另一个 build 里读取它的参数列表，指定的话会确保在第一个运行（指定的参数生效的优先级最低）") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "从另一个 build 里读取它的参数列表，指定的话会确保在第一个运行（指定的参数生效的优先级最低）";
    print "\n";
    printf "%6s", '';
    printf "%-24s", '--gerrit-trigger=GERRIT-TRIGGER';
    if (length('--gerrit-trigger=GERRIT-TRIGGER') > 24 and length("使用这个参数指定的 gerrit review url，模拟 gerrit trigger") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "使用这个参数指定的 gerrit review url，模拟 gerrit trigger";
    print "\n";
    printf "%6s", '-j, ';
    printf "%-24s", '--job-name-or-url=JOB-NAME-OR-URL';
    if (length('--job-name-or-url=JOB-NAME-OR-URL') > 24 and length("指定 job 名字，或 job url") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "指定 job 名字，或 job url";
    print "\n";
    printf "%6s", '-p, ';
    printf "%-24s", '--params=PARAMS';
    if (length('--params=PARAMS') > 24 and length("可以指定多个，格式为 name=value，目前不支持文件格式参数") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "可以指定多个，格式为 name=value，目前不支持文件格式参数";
    print "\n";
    printf "%6s", '';
    printf "%-24s", '--[no]print-params-only';
    if (length('--[no]print-params-only') > 24 and length("仅打印启动任务时的参数列表，之后就退出，不真正启动编译") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "仅打印启动任务时的参数列表，之后就退出，不真正启动编译";
    print "\n";
    printf "%6s", '';
    printf "%-24s", '--rebuild-url=REBUILD-URL';
    if (length('--rebuild-url=REBUILD-URL') > 24 and length("指定要 rebuild 的 url（不适合于直接用 jc rebuild，可能因为它是个 gerrit trigger）。如有需要，用它计算 JOB_URL 和 EXTRA_PARAMS_FROM_BUILD_URL") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "指定要 rebuild 的 url（不适合于直接用 jc rebuild，可能因为它是个 gerrit trigger）。如有需要，用它计算 JOB_URL 和 EXTRA_PARAMS_FROM_BUILD_URL";
    print "\n";
    printf "%6s", '';
    printf "%-24s", '--[no]rest-retry';
    if (length('--[no]rest-retry') > 24 and length("有时候 Jenkins rest api 调用会返回 502 proxy error，要不要 retry，默认要") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "有时候 Jenkins rest api 调用会返回 502 proxy error，要不要 retry，默认要";
    print "\n";
    printf "%6s", '';
    printf "%-24s", '--save-build-url-to=SAVE-BUILD-URL-TO';
    if (length('--save-build-url-to=SAVE-BUILD-URL-TO') > 24 and length("Specify a file where the new build url will be saved") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "Specify a file where the new build url will be saved";
    print "\n";
    printf "%6s", '-s, ';
    printf "%-24s", '--[no]synchronized';
    if (length('--[no]synchronized') > 24 and length("同步编译，直到编译结束才 exit，并通过 exit value 体现其结果") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "同步编译，直到编译结束才 exit，并通过 exit value 体现其结果";
    print "\n";
    printf "%6s", '-v, ';
    printf "%-24s", '--[no]verbose';
    if (length('--[no]verbose') > 24 and length("实时输出本次 build 的终端输出") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "实时输出本次 build 的终端输出";
    print "\n";

    my $exit_value = 0;
    if (@_ && $_[0] ne "help" && $_[1] != 1) {
        $exit_value = shift @_;
        print "@_\n";
    }

    exit($exit_value);
};

GetOptions (
    'debug|d!' => \$debug,
    'execute-with-url=s' => \$execute_with_url,
    'extra-environ-params-regexp=s' => \$extra_environ_params_regexp,
    'extra-environ-params=s' => \$extra_environ_params,
    'extra-params-from-build-url=s' => \$extra_params_from_build_url,
    'gerrit-trigger=s' => \$gerrit_trigger,
    'job-name-or-url|j=s' => \$job_name_or_url,
    'params|p=s' => \@params,
    'print-params-only!' => \$print_params_only,
    'rebuild-url=s' => \$rebuild_url,
    'rest-retry!' => \$rest_retry,
    'save-build-url-to=s' => \$save_build_url_to,
    'synchronized|s!' => \$synchronized,
    'verbose|v!' => \$verbose,
    'help|h!' => \&$handler_help,
);


## end generated code

use AtExit;

if ($execute_with_url and not $synchronized) {
    die "execute_with_url 必须在同步执行的时候才能使用";
}

use Encode;

# curl -X POST JENKINS_URL/job/JOB_NAME/build \
#   --user USER:TOKEN \
#   --data-urlencode json='{"parameter": [{"name":"id", "value":"123"}, {"name":"verbosity", "value":"high"}]}'

my %params_map;

my %default_params_map;

my $job_url = $job_name_or_url;

if ($rebuild_url) {
  if (not $job_url) {
    ($job_url = $rebuild_url) =~ s,(.*)/\d+/?$,$1,;
  }

  if (not $extra_params_from_build_url) {
    $extra_params_from_build_url = $rebuild_url;
  }
}

if ($job_url !~ m,://.*/job/, ) {
  $job_url = "$ENV{scm_jenkins_url}job/$job_url"
}

(my $job_api_url = $job_url) =~ s,/*$,/api/json,;
$job_api_url = shell_quote $job_api_url;

my $job_api_str = capture("jc curl $job_api_url");
# print ("jc curl $job_api_url", $job_api_str) if $verbose;
my $job_api_json_obj  = eval {
    $json->decode($job_api_str)
};

if ($@) {
    die "Can't decode json $@: $job_api_str";
}

my $job_supports_params = 0;
for (@{$job_api_json_obj->{property}}) {
  if ($_->{_class} eq "hudson.model.ParametersDefinitionProperty") {
    $job_supports_params = 1;
    for (@{$_->{parameterDefinitions}}) {
      my $name = $_->{defaultParameterValue}{name};
      my $value = $_->{defaultParameterValue}{value};
      if ($_->{_class} eq "hudson.model.BooleanParameterDefinition") {
          $value = $value ? 'true' : 'false';
      }
      $default_params_map{$name} = $value unless defined $params_map{$name};
      say STDERR "${name}: ${value}" if $debug;
    }
  }
}

for (keys %default_params_map) {
  $params_map{$_} = $default_params_map{$_};
}

my $json_str = "{}";

if ($extra_params_from_build_url) {
    $extra_params_from_build_url =~ s,/*$,/,;
    say STDERR "extra_params_from_build_url is $extra_params_from_build_url";
    $json_str = capture("jc curl ${extra_params_from_build_url}api/json");
}

my $json_obj = eval { $json->decode ($json_str) };
if ($@) {
    die "Can't decode json: $json_str";
}

for (@{$json_obj->{actions}}) {
  if ($_->{_class} eq "hudson.model.ParametersAction") {
      for (@{$_->{parameters}}) {
          my $value = $_->{value};

          if (JSON::is_bool $value) {
              $value = $value ? 'true' : 'false';
          }

          say STDERR sprintf("Got name: %s, value: %s", $_->{name}, $value);
          $params_map{$_->{name}} = $value;
    }
  }
}

map {
    m,(.*?)=(.*),s;
    my ($name, $value) = ($1, $2);
    $params_map{$name} = $value;
} @params;

if ($extra_environ_params) {
  map {
    my ($name, $value) = ($_, $ENV{$_});
    $params_map{$name} = $value;
  } split(" ", $extra_environ_params);
}

if ($extra_environ_params_regexp) {
  $extra_environ_params_regexp = qr($extra_environ_params_regexp);
  map {
    my ($name, $value) = ($_, $ENV{$_});
    $params_map{$name} = $value;
  } grep { m/$extra_environ_params_regexp/ } keys %ENV;
}

if ($gerrit_trigger) {
    my $gr_json_str = capture("gr q -u $gerrit_trigger -e CURRENT_REVISION -e DETAILED_ACCOUNTS");
    my $gr_json = eval { $json->decode($gr_json_str)};
    if ($@) {
        die "Can't decode json: $gr_json_str";
    }
  die "Can't find a single gerrit review for your trigger url: $gerrit_trigger"
    unless (@{$gr_json});
  $params_map{GERRIT_BRANCH} = $gr_json->[0]{branch};
  $params_map{GERRIT_TOPIC} = $gr_json->[0]{topic} || "";
  $params_map{GERRIT_CHANGE_NUMBER} = $gr_json->[0]{_number};
  $params_map{GERRIT_CHANGE_ID} = $gr_json->[0]{change_id};

  my $current_revision_info = $gr_json->[0]{revisions}{$gr_json->[0]{current_revision}};
  $params_map{GERRIT_PATCHSET_NUMBER} = $current_revision_info->{_number};
  $params_map{GERRIT_PATCHSET_REVISION} = $gr_json->[0]{current_revision};
  $params_map{GERRIT_REFSPEC} = $current_revision_info->{ref};
  $params_map{GERRIT_PROJECT} = $gr_json->[0]{project};
  $params_map{GERRIT_CHANGE_SUBJECT} = $gr_json->[0]{subject};
  $params_map{GERRIT_CHANGE_COMMIT_MESSAGE} = qx(gr get-commit-msg -u $gerrit_trigger --format base64);
  $params_map{GERRIT_CHANGE_URL} = "$ENV{scm_gerrit_url}" . $params_map{GERRIT_CHANGE_NUMBER};
  $params_map{GERRIT_CHANGE_OWNER} = sprintf('"%s" <%s>', $gr_json->[0]{owner}{name}, $gr_json->[0]{owner}{email});
  $params_map{GERRIT_CHANGE_OWNER_NAME} = $gr_json->[0]{owner}{name};
  $params_map{GERRIT_CHANGE_OWNER_EMAIL} = $gr_json->[0]{owner}{email};
  $params_map{GERRIT_PATCHSET_UPLOADER} = sprintf('"%s" <%s>', $current_revision_info->{uploader}{name}, $current_revision_info->{uploader}{email});
  $params_map{GERRIT_PATCHSET_UPLOADER_NAME} = $current_revision_info->{uploader}{name};
  $params_map{GERRIT_PATCHSET_UPLOADER_EMAIL} = $current_revision_info->{uploader}{email};

  $params_map{GERRIT_EVENT_ACCOUNT} = $params_map{GERRIT_CHANGE_OWNER};
  $params_map{GERRIT_EVENT_ACCOUNT_NAME} = $params_map{GERRIT_CHANGE_OWNER_NAME};
  $params_map{GERRIT_EVENT_ACCOUNT_EMAIL} = $params_map{GERRIT_CHANGE_OWNER_EMAIL};

  $params_map{GERRIT_NAME} = "Gerrit"; # fixme: hardcode
  $params_map{GERRIT_HOST} = $ENV{scm_gerrit_server};
  $params_map{GERRIT_PORT} = 29418;
  $params_map{GERRIT_SCHEME} = "ssh";
  $params_map{GERRIT_VERSION} = "2.14.3"; # fixme: hardcode

}

if ($job_url !~ m,/,) {
  $job_url = "$ENV{scm_jenkins_url}job/${job_url}/";
}

@params = map {
  {
    name => $_, value => $params_map{$_}
  }
} keys %params_map;

if ($print_params_only) {
  for (@params) {
    my $name = $_->{name};
    my $value = $_->{value};
    if ($name =~ m/^\w+$/) {
      printf "export %s=%s\n", $name, shell_quote($value);
    }
  }
  exit;
}

use URI::Encode qw(uri_encode uri_decode);

my $params_str = join
  ('&',
   map {sprintf "%s=%s", map {uri_encode($_, {encode_reserved => 1})} ($_->{name}, $_->{value})} @params
  );

my $job_build_url = $job_url;
if ($params_str) {
  if ($job_supports_params) {
    $job_build_url =~ s,/*$,/buildWithParameters/?,;
    $job_build_url .= $params_str
  } else {
    die "job $job_url does not support parameters";
  }
} elsif (not $job_supports_params) {
  $job_build_url =~ s,/*$,/build/,;
}


use HTTP::Request::Common;
use LWP::UserAgent;

my $ua = LWP::UserAgent->new;

my $jenkins_crumb = $ENV{JC_CRUMB};

unless ($jenkins_crumb) {
    my $request = GET "$ENV{scm_jenkins_url}crumbIssuer/api/xml?xpath=concat(//crumbRequestField,\":\",//crumb)";

    $request->authorization_basic($ENV{scm_jenkins_user}, $ENV{scm_jenkins_password});

    my $response = $ua->request($request);

    die sprintf("invalid request result: code = %d, content = '%s'", $response->code, $response->content) if ($response->code < 200 or $response->code >= 300);
    $jenkins_crumb = $response->content;
    $ENV{JC_CRUMB} = $jenkins_crumb;
} else {
    say STDERR "already got crumb from env";
}

my ($crumb_header, $crumb_value) = split(':', $jenkins_crumb);

my $old_last_build_json_str = eval {capture "jc curl $job_url/lastBuild/api/json"} || "{}";
my $old_last_build_json = $json->decode($old_last_build_json_str);
my $old_last_build_id = $old_last_build_json->{id} || 0;

my $request = POST $job_build_url, # the url contains the params
  'Content-Type' => 'application/x-www-form-urlencoded',
  "charset" => "utf-8",
  $crumb_header => $crumb_value;


$request->authorization_basic($ENV{scm_jenkins_user}, $ENV{scm_jenkins_password});

# say STDERR "request: ", $request->as_string() if $verbose;
my $response = $ua->request($request);

die sprintf("invalid request result: code = %d, content = '%s'", $response->code, $response->content) if ($response->code < 200 or $response->code >= 300);

say STDERR "Location is ", $response->header('Location') if $verbose;

if (not $synchronized) {
  exit 0;
}

my $location = $response->header('Location');

die "Can't get queue info" unless $location =~ m,queue/item/,;

(my $queueIdFromHttpResponse = $location) =~ s,.*item/,,;

$queueIdFromHttpResponse =~ s,/,,;

my $build_url;

my $start_time = time();
use List::Util qw(max min);

while (1) {
    my $queue_json = $json->decode(scalar capture("jc curl ${location}api/json"));
    my $queueId = $queue_json->{id};
    my $queueCancelled = $queue_json->{cancelled};

    if ($queueCancelled) {
        die "build is cancelled: ${location}api/json";
    }

    my $sleep = max(1, min(10, (time() - $start_time)/5));

    $build_url = $queue_json->{executable}{url} unless $build_url;

    if ($build_url) {
        say STDERR "building at $build_url" if $debug;
        if ($execute_with_url) {
            $execute_with_url =~ s,\%B,$build_url,g;
            say STDERR "execute_with_url: $execute_with_url";
            run(EXIT_ANY, "${execute_with_url}");
        }
        write_file($save_build_url_to, "$build_url") if $save_build_url_to;

        if ($verbose) {
            system("jc console -b $build_url");
        }

        my $max_continuous_errors = 0;

        chomp (my $temp_err = decode_utf8(scalar capturex("mktemp")));
        *clean_tmpfile = sub {
            unlink $temp_err;
        };
        atexit(\&clean_tmpfile);

        while (1) {
            my $build_json;
            while (1) {
                eval {
                    $build_json = $json->decode(scalar capture("jc curl ${build_url}api/json 2>$temp_err"));
                };
                if ($@) {
                    $max_continuous_errors ++;
                    my $error_txt = decode_utf8(scalar capturex("cat", "$temp_err"));
                    die "Too many errors: " . $error_txt if $max_continuous_errors > 60;
                    if ($error_txt =~ m,The proxy server could not handle the request,) {
                        say STDERR "Retry, it's proxy error";
                        sleep(10);
                        if (not $rest_retry) {
                            die "Proxy error and rest-retry not set, die";
                        }
                    } else {
                        die "Can't retry for unknown error: " . $error_txt;
                    }
                } else {
                    $max_continuous_errors = 0;
                    last;
                }
            }


            if ($build_json->{result}) {
                if ($build_json->{result} eq 'SUCCESS') {
                    exit 0;
                } else {
                    say STDERR "build exited with ", $build_json->{result};
                    exit 1;
                }
            } else {
                sleep $sleep;
            }

        }
    } elsif ($queueId == $queueIdFromHttpResponse) {
        sleep $sleep;
    } else {
        say STDERR "Can't get build_url and queueId, this is rare, need to check all builds";
        my $new_last_build_json = $json->decode(scalar capture("jc curl $job_url/lastBuild/api/json"));
        my $new_last_build_id = $new_last_build_json->{id} || 0;

        my $checking_build_id = $new_last_build_id;

        while ($checking_build_id > $old_last_build_id) {
            my $checking_build_json = $json->decode(scalar capture("jc curl $job_url/build/$checking_build_id/api/json"));
            if ($checking_build_json->{queueId} == $queueIdFromHttpResponse) {
                $build_url = "$job_url/build/$checking_build_id/";
                last;
            }
        }
        if (not $build_url) {
            die "Build not found: queueId = $queueIdFromHttpResponse, maybe cancelled?"
        }
    }
}

exit 0
