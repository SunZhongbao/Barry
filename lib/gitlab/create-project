#!/usr/bin/env bash
set -e

declare comment_doc=$(
    cat <<'EOFe9576f8668e0' | grep -v '#.*org-mode%'
# {%org-mode%}

# {%/org-mode%}
EOFe9576f8668e0
        )

## start code-generator "^\\s *#\\s *"
# generate-getopt -P '?"${comment_doc}"' \
    # n:project-name '?"仓库的名字"' \
    # d:description '?"仓库的描述"' \
    # g:group-name='${GITLAB_USERNAME}' '?"在哪个组里创建"' \


## end code-generator
## start generated code
TEMP=$(POSIXLY_CORRECT=true getopt -o d:g:n:h \
                      --long description:,group-name:,project-name:,help \
                      -n "$(basename -- "$0")" -- "$@")
declare description=
declare group_name=${GITLAB_USERNAME}
declare project_name=
eval set -- "$TEMP"
while true; do
    case "$1" in

        -d|--description)
            description=$2
            shift 2

            ;;
        -g|--group-name)
            group_name=$2
            shift 2

            ;;
        -n|--project-name)
            project_name=$2
            shift 2

            ;;
        -h|--help)
            set +x
            echo -e "${comment_doc}"
            echo
            echo Options and arguments:
            printf %6s '-d, '
            printf %-24s '--description=DESCRIPTION'
            echo
            printf "%30s" ""
            echo "仓库的描述"
            printf %6s '-g, '
            printf %-24s '--group-name=GROUP_NAME'
            echo "在哪个组里创建"
            printf %6s '-n, '
            printf %-24s '--project-name=PROJECT_NAME'
            echo
            printf "%30s" ""
            echo "仓库的名字"
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code


project_name=$(urlify "${project_name}")
description=$(urlify "${description}")

export group_name
namespace_id=$(
    curl --header "PRIVATE-TOKEN: ${GITLAB_PRIVATE_TOKEN}" \
         "${GITLAB_URL}api/v4/namespaces" | jq '.[]|if .name == env.group_name then .id else empty end'
            )
if test -z "${namespace_id}"; then
    die "Can't get namespace_id for group: $group_name"
elif (set -- $namespace_id; test $# != 1); then
    die "Got too many namespace_ids $namespace_id for group: $group_name"
fi

set -o pipefail

curl -s --header "PRIVATE-TOKEN: ${GITLAB_PRIVATE_TOKEN}" \
     -X POST "${GITLAB_URL}api/v4/projects?name=${project_name}&description=${description}&namespace_id=${namespace_id}" |
    jq .
