#!/usr/bin/env perl
use strict;
use v5.10.1; # for say and switch
use autodie qw(:all);
use IPC::System::Simple qw(run runx capture capturex $EXITVAL EXIT_ANY);
binmode(STDOUT, ":utf8");
binmode(STDERR, ":utf8");
use Encode;
use utf8;
@ARGV = map {decode_utf8 $_} @ARGV;

use JSON;

my $json = JSON->new->utf8->canonical->pretty;

(my $comment_doc = <<~'EOFc83131117f09') =~ s,^# .*org-mode.*,,gm;
# {%org-mode%}

# {%/org-mode%}
EOFc83131117f09

my $jkd_verbose = "$ENV{jkd_verbose}";
## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl -P '?"$comment_doc"' \
# p:project \
# i:issue-type \
# @json-data
## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("posix_default");



my $issue_type = "";
my $json_data = 0;
my $project = "";

my $handler_help = sub {
    print "$comment_doc";
    print "\n\n选项和参数：\n";
    printf "%6s", '-i, ';
    printf "%-24s", '--issue-type=ISSUE-TYPE';
    if (length('--issue-type=ISSUE-TYPE') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '';
    printf "%-24s", '--[no]json-data';
    if (length('--[no]json-data') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-p, ';
    printf "%-24s", '--project=PROJECT';
    if (length('--project=PROJECT') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";

    my $exit_value = 0;
    if (@_ && $_[0] ne "help" && $_[1] != 1) {
        $exit_value = shift @_;
        print "@_\n";
    }

    exit($exit_value);
};

GetOptions (
    'issue-type|i=s' => \$issue_type,
    'json-data!' => \$json_data,
    'project|p=s' => \$project,
    'help|h!' => \&$handler_help,
);


## end generated code

sub no_spaces_equal($$) {
    my @pair = @_;
    map {s, | ,,g} @pair;
    return $pair[0] eq $pair[1];
}

sub no_spaces_convert($) {
    map {s, | ,,g} @_;
    return $_[0];
}

sub no_spaces_hash_convert(\%) {
    my $hash = $_[0];
    map {
        (my $key = $_) =~ s, | ,,g;
        $hash->{$key} = $hash->{$_}
    } keys %$hash;
}

sub no_spaces_hashget(\%$) {
    my ($hash, $key) = @_;

    if ($hash->{$key}) {
        return $hash->{$key};
    }

    if ($hash->{no_spaces_hash_convert_done} ne 'true') {
        no_spaces_hash_convert %$hash;
        $hash->{no_spaces_hash_convert_done} = 'true';
    }

    $hash->{$key} = $hash->{no_spaces_convert $key};
    return $hash->{$key};
}

die "Must specify the project" unless $project;

my $createmeta_json =
    $json->decode(scalar capturex("jkd", "rest", "issue/createmeta?projectKeys=${project}&expand=projects.issuetypes.fields"));

say STDERR "create meta is " . decode_utf8($json->encode($createmeta_json)) if $jkd_verbose;

my %issuetype_name_id_map;
my @issuetypes = @{$createmeta_json->{projects}[0]{issuetypes}};
map {
    $issuetype_name_id_map{$_->{name}} = $_->{id}
} @issuetypes;

my $id = no_spaces_hashget(%issuetype_name_id_map, $issue_type);

sub print_it() {
    if ($json_data) {
        map {
            if ($_->{id} eq $id) {
                print decode_utf8($json->encode($_));
            }
        } @issuetypes;
    } else {
        print $id;
    }
}
if ($id) {
    print_it();
    exit 0;
}

$issue_type =
    decode_utf8(scalar capturex("select-args", "-O", "select-jira-issuetype", "-i", "${issue_type}", "-p", "Which issue type do you want to use?",
                            sort {$a cmp $b} map {$_->{name}} @issuetypes));

$id = no_spaces_hashget(%issuetype_name_id_map, $issue_type);
die "Can't get issuetype id from $issue_type" unless $id;
print_it();
