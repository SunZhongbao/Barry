#!/usr/bin/env bash

set -e

## start code-generator "^\\s *#\\s *"
# generate-getopt -P @jira '?"edit jira with org-mode"' \
    # @html '?"edit html with org-mode"' \
    # @markdown '?"edit markdown with org-mode"' \
    # @io-only '?"仅作 input/output，不作拷贝粘贴"'
## end code-generator
## start generated code
TEMP=$(POSIXLY_CORRECT=true getopt -o h \
                      --long html,io-only,jira,markdown,help,no-html,no-io-only,no-jira,no-markdown \
                      -n $(basename -- $0) -- "$@")
declare html=false
declare io_only=false
declare jira=false
declare markdown=false
eval set -- "$TEMP"
while true; do
    case "$1" in

        --html|--no-html)
            if test "$1" = --no-html; then
                html=false
            else
                html=true
            fi
            shift

            ;;
        --io-only|--no-io-only)
            if test "$1" = --no-io-only; then
                io_only=false
            else
                io_only=true
            fi
            shift

            ;;
        --jira|--no-jira)
            if test "$1" = --no-jira; then
                jira=false
            else
                jira=true
            fi
            shift

            ;;
        --markdown|--no-markdown)
            if test "$1" = --no-markdown; then
                markdown=false
            else
                markdown=true
            fi
            shift

            ;;
        -h|--help)
            set +x
            echo -e
            echo
            echo Options and arguments:
            printf "%6s" " "
            printf %-24s '--[no-]html'
            echo "edit html with org-mode"
            printf "%6s" " "
            printf %-24s '--[no-]io-only'
            echo "仅作 input/output，不作拷贝粘贴"
            printf "%6s" " "
            printf %-24s '--[no-]jira'
            echo "edit jira with org-mode"
            printf "%6s" " "
            printf %-24s '--[no-]markdown'
            echo "edit markdown with org-mode"
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code

if test "${io_only}" != true; then
    top_window=$(sawfish-top-window)
    mkdir -p ~/tmp/edit-with-emacs
fi

next_file=~/tmp/edit-with-emacs/$(get-next-file -p "emacs-edit-%d.org")

if test "$top_window" = QtCreator; then
    exec sawfish-events-delayed .1 "C-S-s" "M-t" "e" "Up" "Up" "RET"
elif test "${top_window}" = Emacs; then
    sawfish-events-delayed .1 "F1"
elif test "${top_window}" = XTerm; then
    exec sawfish-events-delayed .1 "F1"
elif test "${top_window}" = jetbrains-studio; then
    bhj-notify "edit-with-emacs" "top_window is ${top_window}"
    exec sawfish-events-delayed .1 "M-S-F1"
else
    sawfish-window mark -s -t edit-with-emacs.$$ &>/dev/null

    . atexit bash -c "sawfish-window mark -r -t edit-with-emacs.$$ &>/dev/null"

    if test "$1" = region; then
        sawfish-events-delayed .1 "C-c"
    elif test "${io_only}" != true; then
        sawfish-events-delayed .1 "C-Home" "C-S-End"
        sawfish-events-delayed .1 "C-c"
    fi
    if test "${io_only}" = true; then
       echo "$@" > $next_file
    else
        getclip > $next_file
    fi

    if test "${jira}" = true; then
        cat $next_file | ejwo | tee-with-tmp $next_file
    elif test "${html}" = true; then
        cat $next_file | ok ehwo | tee-with-tmp $next_file
    elif test "${markdown}" = true; then
        cat $next_file | ejwo --syntax markdown | tee-with-tmp $next_file
    else
        ew $next_file &>/dev/null
    fi

    if test "${io_only}" = true; then
        exit
    fi
    cat $next_file| putclip

    sawfish-window mark -r -t edit-with-emacs.$$ &>/dev/null ||
        misc die "Can't find the old window in edit-with-emacs.$$"
    exec sawfish-events-delayed .1 "S-Insert"
fi
