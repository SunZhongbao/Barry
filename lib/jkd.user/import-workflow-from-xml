#!/usr/bin/env bash
set -e

declare comment_doc=$(
    cat <<'EOFe9576f8668e0' | grep -v '#.*org-mode%'
# {%org-mode%}

# {%/org-mode%}
EOFe9576f8668e0
        )

## start code-generator "^\\s *#\\s *"
# generate-getopt -P '?"${comment_doc}"' \
    # w:workflow-name f:workflow-filename x:xml-str cconvert-names-to-ids
## end code-generator
## start generated code
TEMP=$(POSIXLY_CORRECT=true getopt -o cf:w:x:h \
                      --long convert-names-to-ids,workflow-filename:,workflow-name:,xml-str:,help,no-convert-names-to-ids \
                      -n $(basename -- $0) -- "$@")
declare convert_names_to_ids=false
declare workflow_filename=
declare workflow_name=
declare xml_str=
eval set -- "$TEMP"
while true; do
    case "$1" in

        -c|--convert-names-to-ids|--no-convert-names-to-ids)
            if test "$1" = --no-convert-names-to-ids; then
                convert_names_to_ids=false
            else
                convert_names_to_ids=true
            fi
            shift

            ;;
        -f|--workflow-filename)
            workflow_filename=$2
            shift 2

            ;;
        -w|--workflow-name)
            workflow_name=$2
            shift 2

            ;;
        -x|--xml-str)
            xml_str=$2
            shift 2

            ;;
        -h|--help)
            set +x
            echo -e "${comment_doc}"
            echo
            echo Options and arguments:
            printf %6s '-c, '
            printf %-24s '--[no-]convert-names-to-ids'
            echo
            printf %6s '-f, '
            printf %-24s '--workflow-filename=WORKFLOW_FILENAME'
            echo
            printf %6s '-w, '
            printf %-24s '--workflow-name=WORKFLOW_NAME'
            echo
            printf %6s '-x, '
            printf %-24s '--xml-str=XML_STR'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code

. ${scm_common_libdir}/jkd.user/websudo

if test -z "${xml_str}"; then
    xml_str=$(
        cat "${workflow_filename}"
           )
elif test "${workflow_filename}"; then
    die "Can't specify both xml_str and workflow_filename"
fi

if test "${convert_names_to_ids}" = true; then
    xml_str=$(
        jkd workflow -a name2id -x "$xml_str"
           )
fi

json_layout=$(
    echo "${xml_str}" | perl -ne 'print if m,<!-- start of jira workflow layout, .. m,end of jira workflow layout -->,' |
        perl -ne 'print unless (m,<!-- start of jira workflow layout, || m,end of jira workflow layout -->,)'
           )

xml_str=$(
    echo "${xml_str}" | perl -ne 'print unless m,<!-- start of jira workflow layout, .. m,end of jira workflow layout -->,'
       )



echo Importing XML...

output=$(
    curl-f -s -b "$COOKIES" -H "$HEADER" -X POST \
           --data-urlencode "name=${workflow_name}" \
           --data-urlencode "description=" \
           --data-urlencode "definition=inline" \
           --data-urlencode "filePath=" \
           --data-urlencode "workflowXML=$xml_str" \
           --data-urlencode "Import=Import" \
           "${scm_jira_url}secure/admin/workflows/ImportWorkflowFromXml.jspa"
      )

log "Finished importing: ${workflow_name}"

if echo "${output}" | grep 'Error parsing workflow XML'; then
    die "Workflow XML 格式错误！"
fi

if echo "${output}" | grep 'A workflow with this name already exists.' -q; then
    die "这个 Workflow 已存在！"
fi

export workflow_name
json_layout=$(
    echo "$json_layout" | jq '.name = env.workflow_name'
           )

log "update workflow layout json"
jkd webcurl "${scm_jira_url}rest/workflowDesigner/latest/workflows" -X POST --data "${json_layout}" "-H" 'Content-Type: application/json'
log "done update workflow layout json"


# name=hello-world&description=&definition=inline&filePath=&workflowXML=XML&Import=Import
