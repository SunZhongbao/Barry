** 写个脚本，把.png文件引用全部换成pdf文件
#+name: replace-pngs-with-pdfs
#+BEGIN_SRC perl

  while (m,(/home/bhj/src/github/private-config/Wrench-cache|/home/bhj/src/github/Wrench/release/emojis)/.*?.png,g) {
      $png_file = $&;
      unless (-e "$png_file.size") {
          chomp($size = qx(identify "$png_file" | pn 3));
          ($x = $size) =~ s/x.*//;
          ($y = $size) =~ s/.*x//;
          open my $file, ">$png_file.size" or
              die "Can't open $png_file.size";

          print $file ",natwidth=${x}bp,natheight=${y}bp";
          close $file;
          $done_edit = 1;
      }

      $size_map{$png_file} = qx(cat $png_file.size) unless $size_map{$png_file} ;
  }

  s|\]\{(/home/bhj/src/github/.*?.png)|$size_map{$1}$&|g;
  END {
      system "touch",
          "/home/bhj/src/github/private-config/.git/sc-not-merged",
          "/home/bhj/src/github/Wrench/.git/sc-not-merged"
          if $done_edit;
  }




#+END_SRC
** 写个脚本，把某个.tex文件里的emoji字符替换成对应的tex命令

   #+name: move-cn-lines
   #+BEGIN_SRC perl :var items='() :results output :exports output
     my $elisp_template = <<~'EOFc83131117f09';
     # {%emacs-lisp-mode%}
       (goto-char (point-min))
       (search-forward-regexp "^\\\\[%item%]{")
       (setq [%item%]-text (thing-at-point 'line t))
       (beginning-of-line)
       (kill-line)
     # {%/emacs-lisp-mode%}
     EOFc83131117f09

     $elisp_template =~ s,^#.*$,,gm;

     for (@$items) {
         (my $elisp = $elisp_template) =~ s,\Q[%item%]\E,$_,g;
         print $elisp;
     }
   #+END_SRC

参考 =org2pdf-emojify= elisp 命令
#+name: org2pdf-emojify
#+BEGIN_SRC emacs-lisp :noweb yes
  (let (title-text subtitle-text author-text)
    (find-file "<%tex-file%>")
    (org2pdf-emojify)
    (goto-char (point-min))
    (search-forward "\\usepackage{graphicx}")
    (insert "\n\\usepackage[export]{adjustbox}")
    (insert "\n\\usepackage{lmodern}")
    <<move-cn-lines(items='("title" "subtitle" "author"))>>
    (search-forward-regexp "^\\\\maketitle")
    (beginning-of-line)
    (insert title-text subtitle-text author-text "\n")
    (save-buffer)
    (kill-buffer))
#+END_SRC
#+name: handle-tex
#+BEGIN_SRC perl
s,(\\\Qbegin{document}\E),$1\n\\begin{CJK*}{UTF8}{simsun},;
s,(\\\Qend{document}\E),\\end{CJK*}\n$1,;
#+END_SRC
** 最终的版本：

   #+name: the-ultimate-script
   #+BEGIN_SRC sh :tangle ~/system-config/bin/org2pdf :comments link :shebang "#!/usr/bin/env bash" :noweb yes
     set -e

     error-msg() {
         hint "$(
     cat <<'EOF423e92c7f0e5' | . .replace-%% -- | grep -v '^#' -P
     # {%text-mode%}

     ,****************************************************************

     在生成 pdf 演示稿的时候，如果提示 .toc 文件中 inputenc 错误，一般是因为在「* 章节」下直接输入文字导致，必须有「** 小节」才可以输入文字

     另外，有可能需要删除所有的 .toc 文件才能修复相关问题。
     # {%/text-mode%}
     EOF423e92c7f0e5

     )"

     }

     . aterr error-msg

     ## start code-generator "^\\s *#\\s *"
     # generate-getopt s:style=default c:color=default
     ## end code-generator
     ## start generated code
     TEMP=$(getopt -o s:c:h \
                   --long style:,color:,help \
                   -n $(basename -- $0) -- "$@")
     style=default
     color=default
     eval set -- "$TEMP"
     while true; do
         case "$1" in

             -s|--style)
                 style=$2
                 shift 2
                 ;;
             -c|--color)
                 color=$2
                 shift 2
                 ;;
             -h|--help)
                 set +x
                 echo
                 echo
                 echo Options and arguments:
                 printf %6s '-c, '
                 printf %-24s '--color=COLOR'
                 echo
                 printf %6s '-s, '
                 printf %-24s '--style=STYLE'
                 echo
                 exit
                 shift
                 ;;
             --)
                 shift
                 break
                 ;;
             ,*)
                 die "internal error: $(. bt; echo; bt | indent-stdin)"
                 ;;
         esac
     done


     ## end generated code

     if test "$style" = '?' -o "$style" = 's'; then
         styles=$(
             cd /usr/share/texlive/texmf-dist/tex/latex/beamer/ || (
                 echo "Can't get to beamer"
                 kill $$
             )
             find . -type f|
                 perl -ne 's,.*/,,; s/\.sty//; print if s/beamertheme//;'
               );
         if test "$style" = '?'; then
             for style in $styles; do
                 git add .
                 if timeout 15 org2pdf "$@" -s $style -c $color; then
                     touch "$style.work"
                 fi
                 git add .
                 pdf=${1%.org}.pdf
                 if test -e "$pdf"; then
                     mv "$pdf" $style-work.$pdf
                 fi
             done
             exit
         fi

         if test "$style" = s; then
             style=$(select-args -o -p "您想使用哪种风格？" $styles)
         fi
     fi

     if test "$color" = s; then
         color=$(
             select-args -o -p "您想使用哪种颜色？" $(
                 cd /usr/share/texlive/texmf-dist/tex/latex/beamer/themes/color/
                 for x in *; do
                     echo ${x%.*}
                 done|perl -npe 's/beamercolortheme//'
                         )
              )
     fi
     export ORG2PDF=true
     function die() {
         echo Error: "$@"
         exit -1
     }

     if test $# != 1; then
         die "Error: Usage $(basename $0) TEX_FILE"
     fi

     if test ! -e "$1"; then
         die "$1 doesn't exist"
     fi

     org_file=false
     if test "${1##*.}" = org; then
         org_file=true
         git-snapshot
         org2pdf-fix-images.pl "$1"
         if test -d ./images/; then
             git add ./images/
         fi
         e "$1"
         find-or-exec "konsole"
         git-snapshot

         set -- "${1/%.org/.tex}"
     fi

     if test $org_file = true || yes-or-no-p -y "Export from .org"; then
         exp_func=org-latex-export-to-latex
         if grep -q -P -i 'org-beamer-mode|BEAMER_THEME|LaTeX_CLASS:.*beamer' "${1/%.tex/.org}"; then
             exp_func=org-beamer-export-to-latex
             notify-presentation() {
                 bhj-notify "org2pdf" "记住：分享的时候，不要用笔记本自带的键盘和鼠标！"
             }
             . atexit notify-presentation
         fi
         eval_arg=$(cat <<EOF | . .replace-%% --
     ; {%emacs-lisp-mode%}
     (progn
       (package-initialize)
       (require 'ox-latex)
       (require 'emojis)
       (setq org-latex-listings 'minted)
       (add-to-list 'org-latex-packages-alist '("" "minted"))
       (find-file "${1/%.tex/.org}")
       (<%exp-func%>))
     ; {%/emacs-lisp-mode%}
     EOF
                 )
         emacsclient -e "$eval_arg"

         tex_file=${1/%.org/.tex}
         emacs-close "${tex_file}"

         emacsclient -e "$(cat <<'EOF6405e5bce1d2' | . .replace-%% --
     <<org2pdf-emojify>>
     EOF6405e5bce1d2
     )"
         set -- "${1/%.org/.tex}"
     fi

     for x in aux log out dvi; do
         rm ${1/%.tex/.$x} -f
     done

     cp "$1" "$1".emacs
     emacs-close "$1"

     perl -npe "$(cat <<'EOFf0ea35142ce4'
     <<replace-pngs-with-pdfs>>
     EOFf0ea35142ce4
     )" -i "$1"

     if grep -q "usepackage.*CJKutf8" "$1"; then
         perl -pe "$(cat <<'EOF1f8ab604aea3'
     <<handle-tex>>
     EOF1f8ab604aea3
     )" -i $1
     fi

     if test "${style}" != default; then
         perl -npe "s,\\\\usetheme\\{\\w+\\},\\\\usetheme{$style}," -i "$1"
     fi
     if test "$color" != default; then
         perl -npe "s,(\\\\usetheme\\{\\w+\\}),\$1 \\\\usecolortheme{$color}," -i "$1"
     fi
     perl -npe 's/ /\\thinspace /g' -i $1
     latex -halt-on-error -shell-escape $1
     latex -shell-escape $1
     dvipdfmx ${1/%.tex/.dvi}

     ps-killall acroread || true
     evince --unique ${1/%.tex/.pdf}&
     sleep 2
     qpdfview-resize

     <<read-only>>
   #+END_SRC

   #+results: the-ultimate-script

#+name: read-only
#+BEGIN_SRC sh
# Local Variables: #
# eval: (read-only-mode 1) #
# End: #
#+END_SRC

