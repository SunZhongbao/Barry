#!/usr/bin/env bash
set -e

if echo $SHELLOPTS | grep -q xtrace; then
    export SHELLOPTS
fi

declare comment_doc=$(
    cat <<'EOFe9576f8668e0' | grep -v '#.*org-mode%'
# {%org-mode%}
后面指定参数的时候，

- 可以指定一个目录，目录下的每个文件，其名字代表一个 deb 包
- 可以指定 N 个 deb 包的名字
# {%/org-mode%}
EOFe9576f8668e0
        )

## start code-generator "^\\s *#\\s *"
# generate-getopt -P '?"${comment_doc}"' \
    # @check-first E:extra-apt-args @:max-retry=20 @check-only eexit-on-err \

## end code-generator
## start generated code
TEMP=$(POSIXLY_CORRECT=true getopt -o eE:h \
                      --long check-first,check-only,exit-on-err,extra-apt-args:,max-retry:,help,no-check-first,no-check-only,no-exit-on-err \
                      -n "$(basename -- "$0")" -- "$@")
declare check_first=false
declare check_only=false
declare exit_on_err=false
declare extra_apt_args=
declare max_retry=20
eval set -- "$TEMP"
while true; do
    case "$1" in

        --check-first|--no-check-first)
            if test "$1" = --no-check-first; then
                check_first=false
            else
                check_first=true
            fi
            shift

            ;;
        --check-only|--no-check-only)
            if test "$1" = --no-check-only; then
                check_only=false
            else
                check_only=true
            fi
            shift

            ;;
        -e|--exit-on-err|--no-exit-on-err)
            if test "$1" = --no-exit-on-err; then
                exit_on_err=false
            else
                exit_on_err=true
            fi
            shift

            ;;
        -E|--extra-apt-args)
            extra_apt_args=$2
            shift 2

            ;;
        --max-retry)
            max_retry=$2
            shift 2

            ;;
        -h|--help)
            set +x
            echo -e "${comment_doc}"
            echo
            echo Options and arguments:
            printf "%6s" " "
            printf %-24s '--[no-]check-first'
            echo
            printf "%6s" " "
            printf %-24s '--[no-]check-only'
            echo
            printf %6s '-e, '
            printf %-24s '--[no-]exit-on-err'
            echo
            printf %6s '-E, '
            printf %-24s '--extra-apt-args=EXTRA_APT_ARGS'
            echo
            printf "%6s" " "
            printf %-24s '--max-retry=MAX_RETRY'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code


if test $# = 1; then
    if test ! -d "$1" && test -d ~/system-config/bin/Linux/config/"$1"; then
        set -- ~/system-config/bin/Linux/config/$1
    fi
    if test -d "$1"; then
        export PACKAGES_DIR=$(readlink -f "$1")
        set --
    fi
fi

if test $# != 0; then
    packages=$(echo "$@")
else
    packages_dir=${PACKAGES_DIR:-~/system-config/bin/Linux/config/pkgs/}
    packages=$(
        (
            find "$packages_dir" -maxdepth 1 -type f
            packages_dir_by_dist=~/system-config/bin/Linux/config/install-pkgs-by-distribution/$(lsb_release -s -c 2>/dev/null)/$(basename -- "$packages_dir")
            if test -d "$packages_dir_by_dist"; then
                find "$packages_dir_by_dist" -maxdepth 1 -type f
            fi
        ) | perl -npe 's,.*/,,'|grep -v '^\.' -P)

    if test -d "$packages_dir/$USER"; then
        packages="$packages $(find "$packages_dir/$USER" -maxdepth 1 -type f|perl -npe 's,.*/,,')"
    fi
fi

export complete_packages_list="$packages"

if test "$check_first" = true || "$check_only" = true; then
    need_install=false
    for x in $packages; do
        if ! dpkg-query -l $x | grep -q "^.i  \Q$x\E" -P; then
            need_install=true
            if test "$check_only" = true; then
                echo "$x 还没有安装，请检查其安装为何安装失败，并尝试手动重装"
                continue
            fi
            hint "你需要安装 $x 程序，可能需要输入sudo密码"
            break
        fi
    done

    if test "$need_install" = true; then
        if test "$check_only" = true; then
            exit 1
        fi
    else
        exit 0
    fi
fi

export LC_ALL=C
export LANG=C
export retry=1
unset -f sudo
if test "$http_proxy"; then
    function sudo() {
        command sudo env http_proxy="$http_proxy" "$@"
    }
fi

set -o pipefail
(
    . atexit rm -f ~/tmp/install-pkgs.$$
    for retry in $(seq 0 $max_retry); do
        if ! sudo apt-get install $extra_apt_args -y $packages 2>&1 | tee ~/tmp/install-pkgs.$$; then
            if test "$exit_on_err" = true; then
                die "Some packages failed to install, will exit"
            fi
            if (( retry == max_retry)); then
                if yes-or-no-p "I have tried $max_retry times, should we continue trying to install?"; then
                    true
                else
                    echo "Failed: package installation not complete. Please ask for help."
                    exit 1
                fi
            fi
            packages=$(arg1-arg2 "$packages" "$(cat ~/tmp/install-pkgs.$$)");
            echo installing: $packages
        else
            if test "$retry" = 0; then
                exit 0 # no need to install other stuff
            else
                break
            fi
        fi
    done
    if test $# = 0 || yes-or-no-p -y "install missing packages?"; then
        ~/system-config/bin/Linux/config/install-missing-pkgs "$@"
    fi

    if test "$#" = 0; then
        for x in ${PACKAGES_DIR:-~/system-config/bin/Linux/config/pkgs/}/*:*; do
            if test ! -e "$x"; then
                continue
            fi
            sudo apt-get install $extra_apt_args -y "${x##*/}" || true
        done
    fi
)
