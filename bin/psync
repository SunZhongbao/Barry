#!/usr/bin/env bash
set -e

me=$(readlink -f $0)
if test ! -e "$me"; then
    me=$(readlink -f "$(which $0)")
    if test ! -e "$me"; then
        die "Can't find out about me"
        exit 1
    fi
fi

abs0=$0
if ! [[ $abs0 =~ ^/ ]]; then
    if [[ $abs0 =~ / ]] && test -e $PWD/$abs0; then
        abs0=$PWD/$abs0
    elif test -e "$(which $0)"; then
        abs0=$(which $0)
    else
        die "Can't find abs path for $0"
    fi
fi

b0=$(basename $0)

sync_saved_args=("$@")

## start code-generator "^\\s *#\\s *"
# generate-getopt rreverse @follow-symlink Sgit-st \
    # t:target-dir @delete cchecksum \
    # @gitp='("" --gitp)' \
    # p:dir-prefix='收藏夹/' '?"上传目录的 prefix，比如「收藏夹」"' \

## end code-generator
## start generated code
TEMP=$( getopt -o cp:Srt:h \
               --long checksum,delete,dir-prefix:,follow-symlink,git-st,gitp,reverse,target-dir:,help,no-checksum,no-delete,no-follow-symlink,no-git-st,no-gitp,no-reverse \
               -n $(basename -- $0) -- "$@")
declare checksum=false
declare delete=false
declare dir_prefix=收藏夹/
declare follow_symlink=false
declare git_st=false
declare gitp=
declare reverse=false
declare target_dir=
eval set -- "$TEMP"
while true; do
    case "$1" in

        -c|--checksum|--no-checksum)
            if test "$1" = --no-checksum; then
                checksum=false
            else
                checksum=true
            fi
            shift

            ;;
        --delete|--no-delete)
            if test "$1" = --no-delete; then
                delete=false
            else
                delete=true
            fi
            shift

            ;;
        -p|--dir-prefix)
            dir_prefix=$2
            shift 2

            ;;
        --follow-symlink|--no-follow-symlink)
            if test "$1" = --no-follow-symlink; then
                follow_symlink=false
            else
                follow_symlink=true
            fi
            shift

            ;;
        -S|--git-st|--no-git-st)
            if test "$1" = --no-git-st; then
                git_st=false
            else
                git_st=true
            fi
            shift

            ;;
        --gitp|--no-gitp)
            if test "$1" = --no-gitp; then
                gitp=
            else
                gitp=--gitp
            fi
            shift

            ;;
        -r|--reverse|--no-reverse)
            if test "$1" = --no-reverse; then
                reverse=false
            else
                reverse=true
            fi
            shift

            ;;
        -t|--target-dir)
            target_dir=$2
            shift 2

            ;;
        -h|--help)
            set +x
            echo -e
            echo
            echo Options and arguments:
            printf %6s '-c, '
            printf %-24s '--[no-]checksum'
            echo
            printf "%6s" " "
            printf %-24s '--[no-]delete'
            echo
            printf %6s '-p, '
            printf %-24s '--dir-prefix=DIR_PREFIX'
            echo "上传目录的 prefix，比如「收藏夹」"
            printf "%6s" " "
            printf %-24s '--[no-]follow-symlink'
            echo
            printf %6s '-S, '
            printf %-24s '--[no-]git-st'
            echo
            printf "%6s" " "
            printf %-24s '--[no-]gitp'
            echo
            printf %6s '-r, '
            printf %-24s '--[no-]reverse'
            echo
            printf %6s '-t, '
            printf %-24s '--target-dir=TARGET_DIR'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code

. .set-true-val checksum --checksum
. .set-true-val follow_symlink -L
. .set-true-val git_st --files-from=-
. .set-true-val delete --delete

saved_target_dir=${target_dir}

if test -z "${target_dir}"; then
    target_dir=$(up .)
fi

if [[ "$target_dir" =~ $HOME/ ]]; then
    target_dir=\~/${target_dir#$HOME/}
elif test "$target_dir" = "$HOME"; then
    target_dir=\~
fi

if is-in-emacs; then

    if test $# = 0; then
        psync_host=$(get-about-me ${b0}-host)
        if test "${psync_host}"  = unknown; then
            set -- cmdev
        else
            set -- "${psync_host}"
        fi
    fi

    if test "$#" = 1; then
        psync_host=$1
        nohup setsid bash -c "$(
cat <<'EOFb52d0b099efd' | . .replace-%% --
# {%sh-mode%}
set -x;
emacs_current_file=$(emacs-current-file)

CHECK_ORG=true out-of-emacs bash -x "<%b0%>" \
         [%psync_host%] "$(emacs-current-file)"
# {%/sh-mode%}
EOFb52d0b099efd

)" rsync "${sync_saved_args[@]}" </dev/null > ~/tmp/psync.log 2>&1&
        exit
    fi
fi

if test $# = 0 -o $# = 1; then
    die "Can't do system-config sync, please use misc sync-system-config-to"
    exit
fi

host=$1
shift

if test "${b0}" = psync; then
    ssh $host mkdir -p "$target_dir"
elif test "${b0}" = jsync; then
    emacs_target_dir=${target_dir#\~/}
    emacs_target_dir=$(eval echo "${emacs_target_dir}")
    emacs_target_dir=$(emacs-quote-string "${emacs_target_dir}")
    target_dir=$(emacs-quote-string "${target_dir}")

    emacsclient -e "$(
cat <<'EOFda3074d5015b' | . .replace-%% --
; {%emacs-lisp-mode%}
(let ((default-directory "/jssh:<%host%>:"))
  (shell-command-to-string (format "(set -x; mkdir -p %s) 2>&1" "<%target_dir%>")))
; {%/emacs-lisp-mode%}
EOFda3074d5015b

)"
elif test "${b0}" = jsftp; then
    jsftp_tmpdir=/tmp/.jsftp.$$
    jsftp_target_dir=${target_dir#\~/}
    jsftp_target_dir=$(eval echo "${jsftp_target_dir}")
    jsftp_target_dir=$(printf %q "$jsftp_target_dir")

    (
        set -o pipefail
        jssh $host --execute "
# {%sh-mode%}
ln -s / $jsftp_tmpdir;
mkdir -p $jsftp_target_dir;
echo target: \$(readlink -f $jsftp_target_dir)
echo host: \$(hostname)
echo ip: \$(echo \$SSH_CONNECTION | pn 3)
# {%/sh-mode%}
" 2>&1 | tr -d '\r' |
            tee ~/tmp/$b0.$$
    )

    . atexit rm ~/tmp/$b0.$$
    jsftp_target_dir=.jsftp.$$/$( # this dir is under /tmp already when using lftp sftp://
        cat ~/tmp/$b0.$$ | perl -ne 'print $1 if m,^target: (.*),'
                    )
    jsftp_target_ip=$(
        cat ~/tmp/$b0.$$ | perl -ne 'print $1 if m,^ip: (.*),'
                   )

    sftp_host=$(jumpserver.rest -f $jsftp_target_ip)

    if test -z "${sftp_host}"; then
        die "Can't sync when host is empty, too bad!"
    fi

    jsftp_target_dir=$(printf %q "$jsftp_target_dir")
    log "jsftp_target_dir is $jsftp_target_dir, sftp_host is $sftp_host"
fi

if test -e psync-exclude.rc -a -z "$delete"; then
    local_exclude="--exclude-from $PWD/psync-exclude.rc"
else
    local_exclude=
fi

if test "$git_st"; then
    cd "$(dirname "$(lookup-file -e .git)")"
fi
if test "$git_st"; then
    . .gitx
    (git st -S | grep .) | cut -b 4-|perl -npe 's/.* -> /\n/'
fi |
if test "$reverse" = true; then
    for x in "$@"; do
        my-rsync $git_st $follow_symlink $checksum -av $host:"$target_dir"/$x $(dirname $x) --exclude .repo --exclude .git --exclude .gitmodules --exclude "*#*" --exclude ".#*" $local_exclude --progress
    done
else
    if lookup-file -e .git >/dev/null 2>&1 && ! lookup-file -e .is-private-git; then
        for x in "$@"; do
            if test -d "$x"; then
                chmod a+rx "$x"
            elif test -f "$x"; then
                chmod a+r "$x"
                if test -x "$x"; then
                    chmod a+x "$x"
                fi
            fi
        done
    fi

    if test "${b0}" = psync; then
        my-rsync $git_st $follow_symlink $checksum -av "$@" $host:"$target_dir" --exclude .git --exclude .repo --exclude "*#*" --exclude ".#*" $delete $local_exclude --progress
    elif test "${b0}" = jsync; then
        for x in "${@}"; do
            if test -f "${x}"; then
                if test "$gitp"; then
                    extra_dir=$(
                        emacs-quote-string \
                            /"$(cd "$(dirname "$x")"; gitp .)"
                             )
                else
                    extra_dir=""
                fi
                source_file=$(emacs-quote-string "$(readlink -f "${x}")")
                target_file="${emacs_target_dir}${extra_dir}"/"${source_file##*/}"
                emacsclient -e "$(
cat <<'EOF0ecb2235bec3' | . .replace-%% --
; {%emacs-lisp-mode%}
(let ((before-save-hook))
  (find-file "/jssh:<%host%>:<%target-file%>")
  (read-only-mode -1)
  (delete-region (point-min) (point-max))
  (insert-file-contents "<%source-file%>")
  (save-buffer)
  (kill-buffer))
; {%/emacs-lisp-mode%}
EOF0ecb2235bec3

)"
            fi
        done
    elif test "${b0}" = jsftp; then
        for x in "$@"; do
            if test "$gitp"; then
                extra_dir=$(
                    printf %q \
                        /"$(cd "$(dirname "$x")"; gitp .)"
                         )
            else
                extra_dir=""
            fi

            tmpdir=jsftp.$$

            source_file=$(printf %q "$(readlink -f "${x}")")
            target_file="${jsftp_target_dir}${extra_dir}/${source_file##*/}"

            if test -f "${x}"; then
                lftp_command=put
                extra_file_arg=/${source_file##*/}
            else
                lftp_command="mirror -R -P 5"
                extra_file_arg=
            fi

            (
                set -x
                js_username=$(git config -f $scm_secrets_conf sftp.js.username) || die "Must specify sftp.js.username in \${scm_secrets_conf}"
                js_port=$(git config -f $scm_secrets_conf sftp.js.port || echo 2222)
                lftp "sftp://${js_username}:@js:${js_port}/${dir_prefix}${sftp_host}/" -e "cd $jsftp_target_dir; ${lftp_command} $source_file .${extra_file_arg};" || true
            )
        done
        jssh $host --execute "rm -f $jsftp_tmpdir"
    fi

    if test "$CHECK_ORG" = true && [[ $1 =~ \.org$ ]]; then
        x=$1
        (
            for tangle_target in $(grep -o ':tangle\s+\S+\s+' -P "$x" -i |pn 2); do
                tangle_target=$(expand-file-name "$tangle_target")
                if test -e "$tangle_target" -a "$x" -nt "$tangle_target"; then
                    bhj-notify hello "tangle and sync ${x##*/}"
                    emacsclient -e '(progn (find-file "'"$x"'") (org-babel-tangle))'
                fi
                cd "$(dirname "$tangle_target")"
                $b0 "${sync_saved_args[@]:0:${#sync_saved_args[@]}-2}" "$host" "$(bp "$tangle_target")"
                bhj-notify "$b0" "finished to sync: ${tangle_target}"
            done
        )
    fi
fi
