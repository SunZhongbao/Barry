#!/usr/bin/env perl
use strict;
use v5.10.1; # for say and switch
use autodie qw(:all);
use IPC::System::Simple qw(run runx capture capturex $EXITVAL EXIT_ANY);
binmode(STDOUT, ":utf8");
binmode(STDERR, ":utf8");
use Encode;
use utf8;
@ARGV = map {decode_utf8 $_} @ARGV;

use JSON;

my $json = JSON->new->utf8->canonical->pretty;

(my $comment_doc = <<~'EOFc83131117f09') =~ s,^# .*org-mode.*,,gm;
# {%org-mode%}

# {%/org-mode%}
EOFc83131117f09

## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl -P '?"$comment_doc"' \
# f:from-jira-url i:issuetype-name j:from-jira-json @:skip-import
## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("posix_default");



my $from_jira_json = "";
my $from_jira_url = "";
my $issuetype_name = "";
my $skip_import = "";

my $handler_help = sub {
    print "$comment_doc";
    print "\n\n选项和参数：\n";
    printf "%6s", '-j, ';
    printf "%-24s", '--from-jira-json=FROM-JIRA-JSON';
    if (length('--from-jira-json=FROM-JIRA-JSON') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-f, ';
    printf "%-24s", '--from-jira-url=FROM-JIRA-URL';
    if (length('--from-jira-url=FROM-JIRA-URL') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-i, ';
    printf "%-24s", '--issuetype-name=ISSUETYPE-NAME';
    if (length('--issuetype-name=ISSUETYPE-NAME') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '';
    printf "%-24s", '--skip-import=SKIP-IMPORT';
    if (length('--skip-import=SKIP-IMPORT') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";

    my $exit_value = 0;
    if (@_ && $_[0] ne "help" && $_[1] != 1) {
        $exit_value = shift @_;
        print "@_\n";
    }

    exit($exit_value);
};

GetOptions (
    'from-jira-json|j=s' => \$from_jira_json,
    'from-jira-url|f=s' => \$from_jira_url,
    'issuetype-name|i=s' => \$issuetype_name,
    'skip-import=s' => \$skip_import,
    'help|h!' => \&$handler_help,
);


## end generated code

if (not $from_jira_url) {
    die "Must specify the from_jira_url";
} else {
    $from_jira_json = $from_jira_json ||
        decode_utf8 (scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "-j", "$from_jira_url", "dump-issuetype", "-i", "$issuetype_name"));
}

$from_jira_json = $json->decode(encode_utf8 $from_jira_json);

my $to_jira_json =
    $json->decode(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "dump-issuetype", "-v", "-i", "$issuetype_name"));

# my $issuetype_complete_data = {
#     issuetype => $issuetype_name,
#     issuetypescheme => $issuetypescheme_name,
#     issuetypeschemes => $issuetypescreenschemes_json,
#     project => $project_name,
#     fieldconfigscheme_name => $fieldconfigscheme_name,
#     fieldconfig => $fieldconfig_name,
#     fieldconfig_json => $fieldconfig_json,
#     screenscheme => $screenscheme_name,
#     screenscheme_json => $screenscheme_json,
#     workflowscheme => $workflowscheme_name,
#     workflow => $workflow_xml,
#     screens => \%screens,
#     fields => \%wanted_fields,
# }

my $issuetypes_json =
    $json->decode(scalar capture("cached-run -e scm_jira_url jkd rest issuetype"));

my $from_issuetype = $from_jira_json->{issuetype};
if (not grep {$from_issuetype eq $_->{name}} @$issuetypes_json) {
    say STDERR "need create issuetype: $from_issuetype";
    runx("jkd", "issuetype", "-a", "create", "-n", "$from_issuetype");
}

my $from_issuetypescheme = $from_jira_json->{issuetypescheme};
if (not $to_jira_json->{issuetypescheme}) {
    # maybe need create the scheme
    my $issuetypeschemes_json = $json->decode(scalar capture("cached-run -e scm_jira_url jkd rest issuetypescheme"));
    if (not $to_jira_json->{issuetypeschemes}{$from_issuetypescheme} and not grep {$from_issuetypescheme eq $_->{name}} @{$issuetypeschemes_json->{schemes}}) {
        die "Need create issuetypescheme: $from_issuetypescheme";
    } else {
        say STDERR "Need add issuetype to issuetypescheme";
        runx("jkd", "issuetype", "-a", "add-to-scheme", "-n", "${issuetype_name}", "-s", "${from_issuetypescheme}");
    }
} elsif ($to_jira_json->{issuetypescheme} ne $from_issuetypescheme) {
    die sprintf( "Can't work with different issuetype scheme: %s v.s. %s", $to_jira_json->{issuetypescheme}, $from_issuetypescheme);
}

my $from_project = $from_jira_json->{project};
if (not $to_jira_json->{project}) {
    say STDERR "Need to associate project: $from_project";
} elsif ($to_jira_json->{project} ne $from_project) {
    die sprintf("Can't work with different project: %s v.s. %s", $to_jira_json->{project}, $from_project);
}

my $from_fieldconfig = $from_jira_json->{fieldconfig};
if (not $from_fieldconfig && runx("yes-or-no-p", "from field config is null; create field config?")) {
    $from_fieldconfig = "$from_project.$from_issuetype.fieldconfig"
}

my $fieldconfigs =
    $json->decode(scalar capture("cached-run -e scm_jira_url jkd export-fieldconfigs"));
if (not grep {$from_fieldconfig eq $_->{name}} @$fieldconfigs) {
    say STDERR "Field config $from_fieldconfig not exist, create it!";
    runx (
        "jkd", "fieldconfig", "-a", "create", "-n", "${from_fieldconfig}"
    )
}

my $from_fieldconfigscheme = $from_jira_json->{fieldconfigscheme};
if (not $to_jira_json->{fieldconfigscheme}) {
    if (not $to_jira_json->{fieldconfigschemes_json}{$from_fieldconfigscheme}) {
        say STDERR "Need to create fieldconfigscheme: $from_fieldconfigscheme";
    } else {
        say STDERR "Need to associate fieldconfigscheme $from_fieldconfigscheme with $issuetype_name";
    }
} elsif ($to_jira_json->{fieldconfigscheme} ne $from_fieldconfigscheme) {
    die sprintf("can't work with different fieldconfigscheme: %s v.s. %s", $to_jira_json->{fieldconfigscheme}, $from_fieldconfigscheme);
}

if (not $to_jira_json->{fieldconfig} || $to_jira_json->{fieldconfig} eq "Default Field Config") {

    say STDERR "Need to add fieldconfig";
    runx(
        "jkd", "fieldconfig", "-a", "add-to-scheme", "-s", "$from_fieldconfigscheme", "-n", "$from_fieldconfig", "-i", "$from_issuetype"
    );
}

my $from_fields_list =
    $json->decode(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "-j", "$from_jira_url", "rest", "field"));
my %from_fields_name_id;

map {
    my $name = $_->{name};
    my $id = $_->{id};
    $from_fields_name_id{$name} = $id;
} @$from_fields_list;

my $to_fields_list =
    $json->decode(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "rest", "field"));

my %to_fields_name_id;
map {
    my $name = $_->{name};
    my $id = $_->{id};
    $to_fields_name_id{$name} = $id;
} @$to_fields_list;

map {
    my $field_name = $_;
    if ($from_fields_name_id{$field_name} and not $to_fields_name_id{$field_name}) {
        say STDERR "You need to create $field_name";
        my %answers = (
            update => "update existing field",
            create => "create new field",
        );
        my $ans = decode_utf8 (
            scalar capturex (
                "select-args", "-p", "What do you want to do with $field_name", (map {$answers{$_}} keys %answers)
            )
        );

        my $from_field_dump = decode_utf8 (
            scalar capturex (
                "cached-run", "-e", "scm_jira_url", "jkd", "-j", "$from_jira_url", "dump-field", "-f", "$field_name"
            )
        );
        if ($ans eq $answers{update}) {
            my $old_field_name = decode_utf8 (scalar capturex (
                "select-args", "-p", "Which existing field do you want?", map {$_->{name}} @$to_fields_list
            ));

            runx (
                "jkd", "field", "-a", "update", "-f", "问题发起人", "-j", "$from_field_dump"
            );
        } else {
            runx (
                "jkd", "import-field", "-j", "$from_field_dump"
            );
        }
    }
} keys %{$from_jira_json->{fields}};

my $screens =
    $json->decode(scalar capture("cached-run -e scm_jira_url jkd rest screens"));

my %from_screens = %{$from_jira_json->{screens}};
for my $screen (keys %from_screens) {
    my $screen_json = decode_utf8 $json->encode($from_screens{$screen});
    runx("jkd", "import-screen", "-s", "$screen", "-d", $from_jira_json->{screens}{$screen}{description}, "-j", ("$screen_json"));
}

my $from_screenscheme = $from_jira_json->{screenscheme};
my $to_screenschemes =
    $json->decode(scalar capture("cached-run -e scm_jira_url jkd export-screenschemes"));

runx (
    "debug-run", "jkd", "import-screenscheme", "-j", decode_utf8 ($json->encode($from_jira_json->{screenscheme_json}))
);

my $from_issuetypescreenscheme = $from_jira_json->{issuetypescreenscheme};
runx (
    "jkd", "attach-issuetypescreenscheme", "--issuetype-screenscheme", "$from_issuetypescreenscheme", "--screenscheme", "$from_screenscheme", "--issuetype", "$issuetype_name"
);

# *** workflow and statuses ***
if ($skip_import =~ m,workflow,) {
    exit;
}
my %from_statuses;
use Mojo::DOM;
my $dom = Mojo::DOM->new->parse($from_jira_json->{workflow_xml});
$dom->find ('meta[name="jira.status.id"]')->each (
    sub {
        if (my $status = $_->text) {
            say STDERR "Need ensure status: $status";
            $from_statuses{$status} = 1;
        }
    }
);

my $from_statuses_json =
    $json->decode(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "-j", "$from_jira_url", "status", "-a", "list"));
my $to_statuses_json =
    $json->decode(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "status", "-a", "list"));

my %from_statuses_name_json_map =
    map {
        ($_->{name}, $_)
    } @$from_statuses_json;

my %to_statuses_name_json_map =
    map {
        ($_->{name}, $_)
    } @$to_statuses_json;

for my $status_name (keys %from_statuses) {
    if (not $to_statuses_name_json_map{$status_name}) {
        my $json = decode_utf8 ($json->encode ($from_statuses_name_json_map{$status_name}));
        runx (
            "jkd", "status", "-a", "import", "-n", "$status_name", "-j", "$json"
        );
    }
}

my $workflow_name = $from_jira_json->{workflow};
my $workflow_xml = $from_jira_json->{workflow_xml};

my @id_lines;
my %id_lines;
while ($workflow_xml =~ m,^\s*(.*\b\d{5}\b.*?)\s*$,mg) {
    push @id_lines, $1 unless $id_lines{$1};
    $id_lines{$1} = 1;
}

if (@id_lines) {
    say STDERR "\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";
    say STDERR join("\n", @id_lines);
    runx("yes-or-no-p", "Continue to run? seems id2name is not complete");
}

runx (
    "jkd", "upgrade-workflow", "-w", "$workflow_name", "-x", "$workflow_xml", "-i", $issuetype_name, "-s", $from_jira_json->{workflowscheme}
);

say STDERR "Will now fix fields (descriptions, required, etc.)";
runx "jkd", "diff-issuetype", "-i", "${issuetype_name}", "--j2", "${from_jira_url}", "--fix-fields";
say STDERR "Done fixing fields, yay!";
