#!/usr/bin/env perl
use strict;
use v5.10.1; # for say and switch
use autodie qw(:all);
use IPC::System::Simple qw(run runx capture capturex $EXITVAL EXIT_ANY);
binmode(STDOUT, ":utf8");
binmode(STDERR, ":utf8");
use Encode;
use utf8;
@ARGV = map {decode_utf8 $_} @ARGV;

use Data::Dumper;
use JSON;

my $json = JSON->new->utf8->canonical->pretty;

(my $comment_doc = <<~'EOFc83131117f09') =~ s,^# .*org-mode.*,,gm;
# {%org-mode%}

# {%/org-mode%}
EOFc83131117f09

## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl -P '?"$comment_doc"' \
# u:username='"$ENV{scm_jumpserver_user}"' \
# p:password \
# a:api '?"api 接口地址，比如 api/v1/assets/assets/"' \
# f:favorite '?"指定一个IP地址，将其所属的机器添加到收藏夹"' \

## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("posix_default");



my $api = "";
my $favorite = "";
my $password = "";
my $username = "$ENV{scm_jumpserver_user}";

my $handler_help = sub {
    print "$comment_doc";
    print "\n\n选项和参数：\n";
    printf "%6s", '-a, ';
    printf "%-24s", '--api=API';
    if (length('--api=API') > 24 and length("api 接口地址，比如 api/v1/assets/assets/") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "api 接口地址，比如 api/v1/assets/assets/";
    print "\n";
    printf "%6s", '-f, ';
    printf "%-24s", '--favorite=FAVORITE';
    if (length('--favorite=FAVORITE') > 24 and length("指定一个IP地址，将其所属的机器添加到收藏夹") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "指定一个IP地址，将其所属的机器添加到收藏夹";
    print "\n";
    printf "%6s", '-p, ';
    printf "%-24s", '--password=PASSWORD';
    if (length('--password=PASSWORD') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-u, ';
    printf "%-24s", '--username=USERNAME';
    if (length('--username=USERNAME') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";

    my $exit_value = 0;
    if (@_ && $_[0] ne "help" && $_[1] != 1) {
        $exit_value = shift @_;
        print "@_\n";
    }

    exit($exit_value);
};

GetOptions (
    'api|a=s' => \$api,
    'favorite|f=s' => \$favorite,
    'password|p=s' => \$password,
    'username|u=s' => \$username,
    'help|h!' => \&$handler_help,
);


## end generated code

die "Must specify the jumpserver username" unless $username;
if (not $password) {
    chomp($password =
     decode_utf8(
         scalar capturex(
             "git", "config",
             "-f", "$ENV{scm_secrets_conf}",
             "ldap.${username}.password", )));
}

my $login_data = {
    username => $username,
    password => $password,
};

my $login_reply;

my $cookie_file = "$ENV{HOME}/.cache/system-config/jumpserver.cookie";

use File::Slurp;
if (-e $cookie_file) {
    $login_reply = $json->decode(scalar read_file($cookie_file));

    use DateTime::Format::HTTP;
    my $expire = DateTime::Format::HTTP->parse_datetime($login_reply->{date_expired});
    use DateTime;
    if (DateTime->compare(DateTime->now->add(hours => 1), $expire) == 1) {
        $login_reply = undef;
    }
}

if (not $login_reply) {
    $login_reply = $json->decode(scalar capturex(
        "debug-run", "curl-f", "-X", "POST", "-s",
        "$ENV{scm_jumpserver_url}api/v1/authentication/auth/", "-H", 'Content-Type: application/json', "-d", decode_utf8($json->encode($login_data)),
    ));

    write_file($cookie_file, $json->encode($login_reply));
}

my $token = $login_reply->{token};

if ($api) {
    my $api_reply =
        $json->decode(scalar capturex(
            "debug-run", "curl-f", "-s", "$ENV{scm_jumpserver_url}$api", "-H", "Authorization: Bearer $token",  @ARGV
        ));
    print decode_utf8($json->encode($api_reply));
}

if ($favorite) {
    my $list_of_assets =
        $json->decode(scalar capturex("jumpserver.rest", "-a", 'api/v1/perms/users/assets/?cache_policy=1&draw=4&limit=9999&offset=0', ));

    my ($id, $hostname) =
        map {($_->{id}, $_->{hostname})}
        grep {$_->{ip} eq "$favorite"}
        @{$list_of_assets->{results}};
    print "$id, $hostname\n";

    my $data = {
        asset => $id
    };

    runx("debug-run", "jumpserver.rest", "-a", "api/v1/assets/favorite-assets/", "--", "-X", "POST", "-H", 'Content-Type: application/json; charset=utf-8', "--data-raw",  decode_utf8($json->encode($data)))
}
