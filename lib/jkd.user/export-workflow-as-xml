#!/usr/bin/env bash
set -e

declare comment_doc=$(
    cat <<'EOFe9576f8668e0' | grep -v '#.*org-mode%'
# {%org-mode%}

# {%/org-mode%}
EOFe9576f8668e0
        )

## start code-generator "^\\s *#\\s *"
# generate-getopt -P '?"${comment_doc}"' \
    # w:workflow-name f:workflow-filename \
    # i:issuetype-name \
    # cconvert-to-names
## end code-generator
## start generated code
TEMP=$(POSIXLY_CORRECT=true getopt -o ci:f:w:h \
                      --long convert-to-names,issuetype-name:,workflow-filename:,workflow-name:,help,no-convert-to-names \
                      -n $(basename -- $0) -- "$@")
declare convert_to_names=false
declare issuetype_name=
declare workflow_filename=
declare workflow_name=
eval set -- "$TEMP"
while true; do
    case "$1" in

        -c|--convert-to-names|--no-convert-to-names)
            if test "$1" = --no-convert-to-names; then
                convert_to_names=false
            else
                convert_to_names=true
            fi
            shift

            ;;
        -i|--issuetype-name)
            issuetype_name=$2
            shift 2

            ;;
        -f|--workflow-filename)
            workflow_filename=$2
            shift 2

            ;;
        -w|--workflow-name)
            workflow_name=$2
            shift 2

            ;;
        -h|--help)
            set +x
            echo -e "${comment_doc}"
            echo
            echo Options and arguments:
            printf %6s '-c, '
            printf %-24s '--[no-]convert-to-names'
            echo
            printf %6s '-i, '
            printf %-24s '--issuetype-name=ISSUETYPE_NAME'
            echo
            printf %6s '-f, '
            printf %-24s '--workflow-filename=WORKFLOW_FILENAME'
            echo
            printf %6s '-w, '
            printf %-24s '--workflow-name=WORKFLOW_NAME'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code

if test -z "${workflow_name}"; then
    if test -z "${issuetype_name}"; then
        die "Can't find issuetype_name"
    fi
    workflow_name=$(
        jkd issuetype -a get-workflow -n "${issuetype_name}"
                 )
    log workflow_name is $workflow_name
fi

. ${scm_common_libdir}/jkd.user/websudo

log Fetching XML...
output_xml=$(
    debug-run curl-f -s -b "$COOKIES" -H "$HEADER" -d "os_cookie=true" -d "webSudoIsPost=true" "${scm_jira_url}secure/admin/workflows/ViewWorkflowXml.jspa?workflowMode=live&workflowName=$(uri-escape "${workflow_name}")"
          )

workflows_dir=~/src/jenkins-tasks/jira/${scm_jira_url}/workflows/

mkdir -p "${workflows_dir}"
echo "${output_xml}" | tee "${workflows_dir}/${workflow_name}.id.xml" |
    if test "${convert_to_names}" = true; then
        debug-run jkd workflow -f /dev/stdin -a id2name | tee "${workflows_dir}/${workflow_name}.name.xml"
    else
        cat
    fi > "${workflow_filename:-/dev/stdout}"

export workflow_name

cat<<EOF >> "${workflow_filename:-/dev/stdout}"


<!-- start of jira workflow layout
$(jkd -u $scm_jira_admin_user webcurl "${scm_jira_url}rest/workflowDesigner/latest/workflows?name=$(urlify "${workflow_name}")&draft=false" |

perl -ne "$(
cat <<'EOF9bbcf4caf489' | . .replace-%% --
# {%perl-mode%}
#!/usr/bin/env perl
BEGIN {
    use strict;
    use v5.10.1;                # for say and switch
    use autodie qw(:all);
    use IPC::System::Simple qw(run runx capture capturex $EXITVAL EXIT_ANY);
    use Encode;
    use utf8;
    @ARGV = map {decode_utf8 $_} @ARGV;
    binmode(STDOUT, ":utf8");
    binmode(STDERR, ":utf8");
    my @lines;
    use JSON;

}

push @lines, $_;

END {
    my $json = JSON->new->utf8->canonical->pretty;
    my $text = join("", @lines);
    my $layout_json_out =
        $json->decode(encode_utf8($text));

    my %layout_in = (
        draft => JSON::false,
        name => $ENV{workflow_name},
        layout => {
            statuses => [],
            transitions => [],
        }
    );

    for (sort {$a->{id} cmp $b->{id}} @{$layout_json_out->{layout}{statuses}}) {
        my $stat = $_;

        my %stat_hash = map {
            ($_ => $stat->{$_})
        } ("id", "x", "y");

        push @{$layout_in{layout}{statuses}}, \%stat_hash;
    }

    for (sort {$a->{id} cmp $b->{id}} @{$layout_json_out->{layout}{transitions}}) {
        my $trans = $_;

        my %trans_hash = map {
                ($_ => $trans->{$_})
            } ("id","sourceAngle","targetAngle","sourceId","targetId");
        push @{$layout_in{layout}{transitions}},
            \%trans_hash;
    };

    print decode_utf8($json->encode(\%layout_in));
}
# {%/perl-mode%}
EOF9bbcf4caf489

)"
)

end of jira workflow layout -->
EOF
