#!/usr/bin/env bash
set -e

unset GIT_PAGER
default_complete_list_of_labels=(
    Build-Verified
    CommitMessage-Verified
    Jira-Verified
    Sonar-Verified
    StaticAnalysis-Verified
    UT-Verified
)

declare comment_doc=$(
    cat <<'EOFe9576f8668e0' | grep -v '#.*org-mode%'
# {%org-mode%}
这个脚本没有很好的模块化，以后不再建议使用。。。

set-project-labels -p PROJECT [-l COMPLETE-LIST] [ON-LABELS]...
# {%/org-mode%}
EOFe9576f8668e0
        )

## start code-generator "^\\s *#\\s *"
# generate-getopt -P '?"${comment_doc}"' \
    # l:complete-list='"${default_complete_list_of_labels[*]}"' \
    # p:project \
    # @:sme-group \
    # @:dev-group \
    # @:readonly-group \
    # @debug \
    # @new-project \
    # @special-labels=true
## end code-generator
## start generated code
TEMP=$(POSIXLY_CORRECT=true getopt -o l:p:h \
                      --long complete-list:,debug,dev-group:,new-project,project:,readonly-group:,sme-group:,special-labels,help,no-debug,no-new-project,no-special-labels \
                      -n $(basename -- $0) -- "$@")
declare complete_list="${default_complete_list_of_labels[*]}"
declare debug=false
declare dev_group=
declare new_project=false
declare project=
declare readonly_group=
declare sme_group=
declare special_labels=true
eval set -- "$TEMP"
while true; do
    case "$1" in

        -l|--complete-list)
            complete_list=$2
            shift 2

            ;;
        --debug|--no-debug)
            if test "$1" = --no-debug; then
                debug=false
            else
                debug=true
            fi
            shift

            ;;
        --dev-group)
            dev_group=$2
            shift 2

            ;;
        --new-project|--no-new-project)
            if test "$1" = --no-new-project; then
                new_project=false
            else
                new_project=true
            fi
            shift

            ;;
        -p|--project)
            project=$2
            shift 2

            ;;
        --readonly-group)
            readonly_group=$2
            shift 2

            ;;
        --sme-group)
            sme_group=$2
            shift 2

            ;;
        --special-labels|--no-special-labels)
            if test "$1" = --no-special-labels; then
                special_labels=false
            else
                special_labels=true
            fi
            shift

            ;;
        -h|--help)
            set +x
            echo -e "${comment_doc}"
            echo
            echo Options and arguments:
            printf %6s '-l, '
            printf %-24s '--complete-list=COMPLETE_LIST'
            echo
            printf "%6s" " "
            printf %-24s '--[no-]debug'
            echo
            printf "%6s" " "
            printf %-24s '--dev-group=DEV_GROUP'
            echo
            printf "%6s" " "
            printf %-24s '--[no-]new-project'
            echo
            printf %6s '-p, '
            printf %-24s '--project=PROJECT'
            echo
            printf "%6s" " "
            printf %-24s '--readonly-group=READONLY_GROUP'
            echo
            printf "%6s" " "
            printf %-24s '--sme-group=SME_GROUP'
            echo
            printf "%6s" " "
            printf %-24s '--[no-]special-labels'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code

if test "${new_project}" = true; then
    special_labels=false
    sme_group=$(
        gr repo2group -r ${project} -e -g SME
             )
    dev_group=$(
        gr repo2group -r ${project} -e -g DEV
             )
fi

declare -A label_config_fragment=(
    ["CommitMessage-Verified"]=$(
        cat <<'EOF'
[label "CommitMessage-Verified"]
        function = MaxWithBlock
        value = -1 Issues found
        value =  0 No score
        value = +1 Verified
        defaultValue = 0
EOF
                              )
    ["Build-Verified"]=$(
        cat <<'EOF'
[label "Build-Verified"]
        function = MaxWithBlock
        value = -1 Issues found
        value =  0 No score
        value = +1 Verified
        defaultValue = 0
EOF
                      )
    ["Jira-Verified"]=$(
        cat <<'EOF'
[label "Jira-Verified"]
        function = MaxWithBlock
        value = -1 Issues found
        value =  0 No score
        value = +1 Verified
        defaultValue = 0
EOF
                     )

    ["UT-Verified"]=$(
        cat <<'EOF'
[label "UT-Verified"]
        function = MaxWithBlock
        value = -1 Issues found
        value =  0 No score
        value = +1 Verified
        defaultValue = 0
EOF
                   )
    ["Sonar-Verified"]=$(
        cat <<'EOFa96f33e86757'
[label "Sonar-Verified"]
        function = MaxWithBlock
        value = -1 Issues found
        value =  0 No score
        value = +1 Verified
        defaultValue = 0
EOFa96f33e86757

                      )
    ["StaticAnalysis-Verified"]=$(
        cat <<'EOFd75a2d6802f0'
[label "StaticAnalysis-Verified"]
        function = MaxWithBlock
        value = -1 Issues found
        value =  0 No score
        value = +1 Verified
        defaultValue = 0
EOFd75a2d6802f0
                               )
)

declare -A handled_keys

tmpd=gerrit-set-project-labels.$$
if test "${debug}" != true; then
    . atexit rm -rf "$PWD/$tmpd"
else
    . atexit putclip "$PWD/$tmpd"
fi

gerrit-update-meta -s \
                   -d "$tmpd" \
                   -p ${scm_gerrit_admin_ssh_url}"${project}"

cd $tmpd

allow-group-on-label() {
    local g=$1
    local k=$2

    local v=${3:-1}

    if ! git config --get-all -f project.config access.'refs/*'.${k} "^-${v}\.\.\+${v} group $g$"; then
        git config --add -f project.config access.'refs/*'.${k} \
            "-${v}..+${v} group ${g}"
    fi
}

allow-permission() {
    declare comment_doc=$(
        cat <<'EOFe9576f8668e0' | grep -v '#.*org-mode%'
# {%org-mode%}

# {%/org-mode%}
EOFe9576f8668e0
            )

    ## start code-generator "^\\s *#\\s *"
    # generate-getopt -P '?"${comment_doc}"' \
        # b:branch g:group p:permission
    ## end code-generator
    ## start generated code
    TEMP=$(POSIXLY_CORRECT=true getopt -o b:g:p:h \
                          --long branch:,group:,permission:,help \
                          -n $(basename -- $0) -- "$@")
    declare branch=
    declare group=
    declare permission=
    eval set -- "$TEMP"
    while true; do
        case "$1" in

            -b|--branch)
                branch=$2
                shift 2

                ;;
            -g|--group)
                group=$2
                shift 2

                ;;
            -p|--permission)
                permission=$2
                shift 2

                ;;
            -h|--help)
                set +x
                echo -e "${comment_doc}"
                echo
                echo Options and arguments:
                printf %6s '-b, '
                printf %-24s '--branch=BRANCH'
                echo
                printf %6s '-g, '
                printf %-24s '--group=GROUP'
                echo
                printf %6s '-p, '
                printf %-24s '--permission=PERMISSION'
                echo
                exit
                shift
                ;;
            --)
                shift
                break
                ;;
            *)
                die "internal error: $(. bt; echo; bt | indent-stdin)"
                ;;
        esac
    done


    ## end generated code

    if ! git config --get-all -f project.config "access.${branch}.${permission}" "^group $group$"; then
        git config --add -f project.config "access.${branch}.${permission}" \
            "group ${group}"
    fi
}

if test "${special_labels}" = true; then
   for k in "$@"; do
       handled_keys[$k]=1
       if [[ $k =~ ^Code-Review ]]; then
           continue
       fi

       git config -f project.config --remove-section label.${k} &>/dev/null || true
       (
           echo
           echo "${label_config_fragment[$k]}"
       ) >> project.config
   done

   for k in $complete_list; do
       if test "${handled_keys[$k]}"; then
           continue
       fi
       git config -f project.config --remove-section label.${k} &>/dev/null || true
       (
           cat <<EOFca087349c47c >> project.config

[label "$k"]
        function = NoOp
EOFca087349c47c
       )
   done

   for k in $complete_list; do
       for g in Administrators "Non-Interactive Users"; do
           allow-group-on-label "$g" "label-$k"
       done
   done
fi

if test "${sme_group}"; then
    allow-group-on-label "${sme_group}" "label-Code-Review" 2
fi

if test "${dev_group}"; then
    allow-group-on-label "${dev_group}" "label-Verified" 1
    allow-permission -b "refs/for/refs/heads/*" -g "${dev_group}" -p push
    allow-permission -b "refs/for/refs/heads/*" -g "${dev_group}" -p pushMerge
    allow-permission -b "refs/heads/*" -g "${dev_group}" -p read
    allow-permission -b "refs/heads/*" -g "${dev_group}" -p submit

    for k in read submit; do
        g=${dev_group}
        if ! git config --get-all -f project.config access.'refs/*'.${k} "^group $g$"; then
            git config --add -f project.config access.'refs/*'.${k} \
                "group ${g}"
        fi
    done
fi

if test "${readonly_group}"; then
    for k in read; do
        g=${readonly_group}
        if ! git config --get-all -f project.config access.'refs/*'.${k} "^group $g$"; then
            git config --add -f project.config access.'refs/*'.${k} \
                "group ${g}"
        fi
    done
fi

gerrit-meta-fix-groups

if test "${debug}" = true; then
    cat project.config
fi

git add .
git commit -m "Update labels: $*" -s --allow-empty
HOME=/ git push ${scm_gerrit_admin_ssh_url}"${project}" HEAD:refs/meta/config
