#!/usr/bin/env perl
use strict;
use v5.10.1; # for say and switch
use autodie qw(:all);
use IPC::System::Simple qw(run runx capture capturex $EXITVAL EXIT_ANY);
binmode(STDOUT, ":utf8");
binmode(STDERR, ":utf8");
use Encode;
use utf8;
@ARGV = map {decode_utf8 $_} @ARGV;
my @saved_args = @ARGV;

use Data::Dumper;
use JSON;

my $json = JSON->new->utf8->canonical->pretty;

my @permissions = (
    "com.cloudbees.plugins.credentials.CredentialsProvider.Create",
    "com.cloudbees.plugins.credentials.CredentialsProvider.Delete",
    "com.cloudbees.plugins.credentials.CredentialsProvider.ManageDomains",
    "com.cloudbees.plugins.credentials.CredentialsProvider.Update",
    "com.cloudbees.plugins.credentials.CredentialsProvider.View",
    "com.sonyericsson.hudson.plugins.gerrit.trigger.PluginImpl.ManualTrigger",
    "com.sonyericsson.hudson.plugins.gerrit.trigger.PluginImpl.Retrigger",
    "hudson.model.Item.Build",
    "hudson.model.Item.Cancel",
    "hudson.model.Item.Configure",
    "hudson.model.Item.Create",
    "hudson.model.Item.Delete",
    "hudson.model.Item.Discover",
    "hudson.model.Item.Move",
    "hudson.model.Item.Read",
    "hudson.model.Item.Workspace",
    "hudson.model.Run.Delete",
    "hudson.model.Run.Replay",
    "hudson.model.Run.Update",
    "hudson.scm.SCM.Tag",
    "jenkins.metrics.api.Metrics.HealthCheck",
    "jenkins.metrics.api.Metrics.ThreadDump",
    "jenkins.metrics.api.Metrics.View",
    "org.jfrog.hudson.ArtifactoryPlugin.Promote",
    "org.jfrog.hudson.ArtifactoryPlugin.Release",
);

my $permissions_list = decode_utf8($json->encode(\@permissions));

## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl \
# t:role-type='"projectRoles"' '?"配置哪种类型的 role：one of globalRoles, projectRoles(default), slaveRoles"' \
# n:role-name '?"比如 SEC_DEV"' \
# p:role-projects-pattern '?"比如 jobA|jobB|jobPatternC。也可以用 +|jobPatternD 来表示增加一个正则表达式"' \
# g:add-group='()' '?"如需添加多个，允许多次指定此参数"' \
# @:del-group='()' '?"删除指定的用户/组，允许指定多次"' \
# @:add-perm='()' '?"权限列表见\n$permissions_list"' \
# @:del-perm='()' '?"删除权限列表"' \
# @:json-data '?"不使用其它参数，直接使用 json 数据"' \
# @delete-role '?"删除指定的 role"' \

## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("default");



my @add_group = ();
my @add_perm = ();
my @del_group = ();
my @del_perm = ();
my $delete_role = 0;
my $json_data = "";
my $role_name = "";
my $role_projects_pattern = "";
my $role_type = "projectRoles";

my $handler_help = sub {
    print ;
    print "\n\n选项和参数：\n";
    printf "%6s", '-g, ';
    printf "%-24s", '--add-group=ADD-GROUP';
    if (length('--add-group=ADD-GROUP') > 24 and length("如需添加多个，允许多次指定此参数") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "如需添加多个，允许多次指定此参数";
    print "\n";
    printf "%6s", '';
    printf "%-24s", '--add-perm=ADD-PERM';
    if (length('--add-perm=ADD-PERM') > 24 and length("权限列表见\n$permissions_list") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "权限列表见\n$permissions_list";
    print "\n";
    printf "%6s", '';
    printf "%-24s", '--del-group=DEL-GROUP';
    if (length('--del-group=DEL-GROUP') > 24 and length("删除指定的用户/组，允许指定多次") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "删除指定的用户/组，允许指定多次";
    print "\n";
    printf "%6s", '';
    printf "%-24s", '--del-perm=DEL-PERM';
    if (length('--del-perm=DEL-PERM') > 24 and length("删除权限列表") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "删除权限列表";
    print "\n";
    printf "%6s", '';
    printf "%-24s", '--[no]delete-role';
    if (length('--[no]delete-role') > 24 and length("删除指定的 role") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "删除指定的 role";
    print "\n";
    printf "%6s", '';
    printf "%-24s", '--json-data=JSON-DATA';
    if (length('--json-data=JSON-DATA') > 24 and length("不使用其它参数，直接使用 json 数据") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "不使用其它参数，直接使用 json 数据";
    print "\n";
    printf "%6s", '-n, ';
    printf "%-24s", '--role-name=ROLE-NAME';
    if (length('--role-name=ROLE-NAME') > 24 and length("比如 SEC_DEV") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "比如 SEC_DEV";
    print "\n";
    printf "%6s", '-p, ';
    printf "%-24s", '--role-projects-pattern=ROLE-PROJECTS-PATTERN';
    if (length('--role-projects-pattern=ROLE-PROJECTS-PATTERN') > 24 and length("比如 jobA|jobB|jobPatternC。也可以用 +|jobPatternD 来表示增加一个正则表达式") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "比如 jobA|jobB|jobPatternC。也可以用 +|jobPatternD 来表示增加一个正则表达式";
    print "\n";
    printf "%6s", '-t, ';
    printf "%-24s", '--role-type=ROLE-TYPE';
    if (length('--role-type=ROLE-TYPE') > 24 and length("配置哪种类型的 role：one of globalRoles, projectRoles(default), slaveRoles") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "配置哪种类型的 role：one of globalRoles, projectRoles(default), slaveRoles";
    print "\n";

    my $exit_value = 0;
    if (@_ && $_[0] ne "help" && $_[1] != 1) {
        $exit_value = shift @_;
        print "@_\n";
    }

    exit($exit_value);
};

GetOptions (
    'add-group|g=s' => \@add_group,
    'add-perm=s' => \@add_perm,
    'del-group=s' => \@del_group,
    'del-perm=s' => \@del_perm,
    'delete-role!' => \$delete_role,
    'json-data=s' => \$json_data,
    'role-name|n=s' => \$role_name,
    'role-projects-pattern|p=s' => \$role_projects_pattern,
    'role-type|t=s' => \$role_type,
    'help|h!' => \&$handler_help,
);


## end generated code

if ("${json_data}") {
    die "Must not specify other args" unless (@saved_args <= 2);
    if ($json_data !~ m,^\s*\{,s) {
        $json_data = "{$json_data}"
    }

    $json_data = $json->decode(
        encode_utf8($json_data)
    );
    my @roles = keys %$json_data;
    die "Must specify exactly 1 role: " . join(", ", @roles) unless (@roles == 1);
    $role_name = $roles[0];

    my $old_json = $json->decode(scalar capturex("jc", "getRole", "-n", "$role_name", ));
    my $new_json = $json_data->{$role_name};
    use Array::Utils qw(:all);

    @add_group = @{$new_json->{sids}};

    $role_projects_pattern = $new_json->{pattern};
    my @new_perms = keys(%{$new_json->{permissionIds}});
    my @old_perms = keys(%{$old_json->{permissionIds}});
    say STDERR "new_perms is @new_perms, old_perms is @old_perms";
    @add_perm = array_minus(@new_perms, @old_perms);
    @del_perm = array_minus(@old_perms, @new_perms);

    say STDERR "add_perm is @add_perm";
}

@add_perm = split(' ', join(" ", @add_perm));

use autodie qw(:all);
use JSON;
my $role_json = decode_json(qx(jc getRole -t ${role_type} -n ${role_name}));

use v5.10;

say STDERR JSON->new->utf8(1)->pretty(1)->encode($role_json);

my $removeRoleData = sprintf "type=%s&roleNames=%s", ${role_type}, ${role_name};


if ($delete_role) {
    runx ("jc", "curl", "role-strategy/strategy/removeRoles", "--data", "$removeRoleData", "-X", "POST");
    exit 0;
}


my $new_pattern;
if ($role_projects_pattern =~ s,^\+,,) {
  $new_pattern = $role_json->{pattern} . $role_projects_pattern;
} else {
    $new_pattern = $role_projects_pattern;
}
if ($new_pattern || @add_perm || @del_perm) {
    for (@del_perm) {
        delete $role_json->{permissionIds}{$_};
    }

    for (@add_perm) {
        $role_json->{permissionIds}{$_} = JSON::true;
    }

    $new_pattern ||= $role_json->{pattern};
    my $updateRoleData = sprintf
        (
            "type=%s&roleName=%s&permissionIds=%s&pattern=%s&overwrite=true",
            $role_type,
            $role_name,
            join(",", keys(%{$role_json->{permissionIds}}), @add_perm) . ",",
            $new_pattern
        );

    system("debug-run", "jc", "curl", "role-strategy/strategy/addRole", "--data", "$updateRoleData", "-X", "POST");
}

if (not $json_data) {
    @add_group = (@add_group, @{$role_json->{sids}});
}

if (@del_group) {
    @add_group = array_minus(@add_group, @del_group);
}

for my $sid (@add_group) {
  my $assign_data = sprintf(
                            "type=%s&roleName=%s&sid=%s",
                            $role_type, $role_name, $sid
                           );
  say STDERR "assign $sid to $role_name";
  system "jc", "curl", "role-strategy/strategy/assignRole", "--data", "$assign_data", "-X", "POST";
}

run("jc getRole -n $role_name|jq .");
capture("c jc getRoles -v &>/dev/null &");
