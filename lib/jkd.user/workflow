#!/usr/bin/env perl
use strict;
use v5.10.1; # for say and switch
use autodie qw(:all);
use IPC::System::Simple qw(run runx capture capturex $EXITVAL EXIT_ANY);
binmode(STDOUT, ":utf8");
binmode(STDERR, ":utf8");
use Encode;
use utf8;
@ARGV = map {decode_utf8 $_} @ARGV;

use JSON;

my $json = JSON->new->utf8->canonical->pretty;

use XML::Quote qw(:all);

(my $comment_doc = <<~'EOFc83131117f09') =~ s,^# .*org-mode.*,,gm;
# {%org-mode%}
* action = id2name / name2id

- 将 workflow.xml 文件中的 ids（custom field、screen 等）改成对应的 names。
- 将 workflow.xml 文件中的 names（custom field、screen 等）改成对应的 ids。

workflow xml 数据可以通过 WORKFLOW_XML 参数从文件中传入，也可以通过
 XML_STR 参数直接作为命令行参数传入

* action = export
export the specified workflow as xml

* action = import
import the specified workflow from xml file
* action = create
create an empty workflow with the specified name and description
* hint

To assign workflow to issuetype: admin -> project -> workflows -> ...
# {%/org-mode%}
EOFc83131117f09

## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl -P '?"$comment_doc"' \
# a:action f:workflow-xml kkeep-running n:workflow-name d:workflow-description x:xml-str
## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("posix_default");



my $action = "";
my $keep_running = 0;
my $workflow_description = "";
my $workflow_name = "";
my $workflow_xml = "";
my $xml_str = "";

my $handler_help = sub {
    print "$comment_doc";
print "\n\n选项和参数：\n";
printf "%6s", '-a, ';
printf "%-24s", '--action=ACTION';
if (length('--action=ACTION') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
}
printf "%s", ;
print "\n";
printf "%6s", '-k, ';
printf "%-24s", '--[no]keep-running';
if (length('--[no]keep-running') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
}
printf "%s", ;
print "\n";
printf "%6s", '-d, ';
printf "%-24s", '--workflow-description=WORKFLOW-DESCRIPTION';
if (length('--workflow-description=WORKFLOW-DESCRIPTION') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
}
printf "%s", ;
print "\n";
printf "%6s", '-n, ';
printf "%-24s", '--workflow-name=WORKFLOW-NAME';
if (length('--workflow-name=WORKFLOW-NAME') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
}
printf "%s", ;
print "\n";
printf "%6s", '-f, ';
printf "%-24s", '--workflow-xml=WORKFLOW-XML';
if (length('--workflow-xml=WORKFLOW-XML') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
}
printf "%s", ;
print "\n";
printf "%6s", '-x, ';
printf "%-24s", '--xml-str=XML-STR';
if (length('--xml-str=XML-STR') > 24 and length() > 0) {
    print "\n";
    printf "%30s", "";
}
printf "%s", ;
print "\n";

    my $exit_value = 0;
    if (@_ && $_[0] ne "help" && $_[1] != 1) {
       $exit_value = shift @_;
       print "@_\n";
    }

    exit($exit_value);
};

GetOptions (
'action|a=s' => \$action,
'keep-running|k!' => \$keep_running,
'workflow-description|d=s' => \$workflow_description,
'workflow-name|n=s' => \$workflow_name,
'workflow-xml|f=s' => \$workflow_xml,
'xml-str|x=s' => \$xml_str,
'help|h!' => \&$handler_help,
    );


## end generated code

use feature 'signatures';
no warnings "experimental::signatures";

sub is_exact_action($target_action) {
    our %exact_actions;
    $exact_actions{$target_action} = 1;
    return $action eq $target_action;
}

if (not $action) {
    $action = shift @ARGV;
}

if (is_exact_action "list") {
    run("jkd rest workflow|jq '.[]|.name' -r ");
    exit(0);
} elsif (is_exact_action "export") {
    runx("jkd", "export-workflow-as-xml", @ARGV);
    exit;
} elsif (is_exact_action "import") {
    runx("jkd", "import-workflow-from-xml", @ARGV);
    exit;
} elsif (is_exact_action "create") {
    my @params_values = (
        "inline=true",
        "decorator=dialog",
        "newWorkflowName=" . $workflow_name,
        "description=" . $workflow_description,
    );
    runx(
        "jkd", "webcurl", "$ENV{scm_jira_url}secure/admin/workflows/AddWorkflow.jspa", "-X", "POST",
        map { ('--data-urlencode', $_) } @params_values);
    capturex(
        "cached-run", "-e", "scm_jira_url", "-r", "jkd", "rest", "workflow"
    );
    exit;
}

use Mojo::DOM;
use File::Slurp;

if ($workflow_xml) {
    if ($xml_str) {
        die "Must not specify both xml_str and workflow_xml";
    }
    $xml_str = decode_utf8(read_file($workflow_xml));
} else {
    $xml_str = ($xml_str);
}

my $dom = Mojo::DOM->new->parse($xml_str);

my $fields_json = $json->decode(scalar capturex("jkd", "rest", "field"));
my $screens_json = $json->decode(scalar capturex("jkd", "rest", "screens"));
my $status_json = $json->decode(scalar capturex("jkd", "status", "-a", "list"));
my $roles_json = $json->decode(scalar capturex("jkd", "rest", "role"));

my %datatype_json_map = (
    field => $fields_json,
    screens => $screens_json,
    status => $status_json,
    role => $roles_json,
);

my %built_in_fields_id_name_map = (
    "00000" => "Summary",
    "00001" => "Description",
    "00003" => "Assignee",
    "00006" => "Reporter",
    "00012" => "Due date",
    "00017" => "Priority",
    "00068" => "Original estimate (minutes)",
    "00024" => "Remaining estimate (minutes)",
    "00025" => "Total time spent (minutes)",
    "00140" => "Add to time spent (minutes)",
    "00094" => "Components",
    "00074" => "Fix versions",
    "00077" => "Affected versions",
    "00070" => "Environment",
    "00016" => "Issue status",
    "00113" => "Issue status (delayed writing)",
    "00154" => "Execute transition",
    "00155" => "Execute transition (delayed execution)",
    "00028" => "Resolution",
    "00112" => "Date and time of resolution",
    "00080" => "Labels",
    "00167" => "New labels",
    "00106" => "Attachments (current attachments will be replaced)",
    "00105" => "Attachments (only new attachments will be added)",
    "00103" => "Security level",
    "00109" => "Last comment",
    "00130" => "Last comment's visibility restrictions",
    "00129" => "New comment",
    "00174" => "New comment (sends email notifications)",
    "00133" => "Watchers",
    "00136" => "New watchers",
    "00058" => "Ephemeral number 1",
    "00059" => "Ephemeral number 2",
    "00060" => "Ephemeral number 3",
    "00064" => "Ephemeral number 4",
    "00065" => "Ephemeral number 5",
    "00061" => "Ephemeral string 1",
    "00062" => "Ephemeral string 2",
    "00063" => "Ephemeral string 3",
    "00066" => "Ephemeral string 4",
    "00067" => "Ephemeral string 5",
);

my %built_in_fields_name_id_map = (
    "Summary" => "00000",
    "Description" => "00001",
    "Assignee" => "00003",
    "Reporter" => "00006",
    "Due date" => "00012",
    "Priority" => "00017",
    "Original estimate (minutes)" => "00068",
    "Remaining estimate (minutes)" => "00024",
    "Total time spent (minutes)" => "00025",
    "Add to time spent (minutes)" => "00140",
    "Components" => "00094",
    "Fix versions" => "00074",
    "Affected versions" => "00077",
    "Environment" => "00070",
    "Issue status" => "00016",
    "Issue status (delayed writing)" => "00113",
    "Execute transition" => "00154",
    "Execute transition (delayed execution)" => "00155",
    "Resolution" => "00028",
    "Date and time of resolution" => "00112",
    "Labels" => "00080",
    "New labels" => "00167",
    "Attachments (current attachments will be replaced)" => "00106",
    "Attachments (only new attachments will be added)" => "00105",
    "Security level" => "00103",
    "Last comment" => "00109",
    "Last comment's visibility restrictions" => "00130",
    "New comment" => "00129",
    "New comment (sends email notifications)" => "00174",
    "Watchers" => "00133",
    "New watchers" => "00136",
    "Ephemeral number 1" => "00058",
    "Ephemeral number 2" => "00059",
    "Ephemeral number 3" => "00060",
    "Ephemeral number 4" => "00064",
    "Ephemeral number 5" => "00065",
    "Ephemeral string 1" => "00061",
    "Ephemeral string 2" => "00062",
    "Ephemeral string 3" => "00063",
    "Ephemeral string 4" => "00066",
    "Ephemeral string 5" => "00067",
);

sub id2name($id, $datatype) {
    my $names_ids_json = $datatype_json_map{$datatype};

    if ($built_in_fields_id_name_map{$id} && $datatype eq "field") {
        return $built_in_fields_id_name_map{$id};
    }

    my @matched_names;
    for (@{$names_ids_json}) {
        if ($_->{id} eq $id or $_->{id} eq "customfield_$id") {
            push @matched_names, $_->{name};
        }
    }
    if (@matched_names != 1) {
        my $extra_msg;
        if (@matched_names == 0) {
            $extra_msg = "Please create it!";
            if ($datatype eq 'status') {
                $extra_msg .= "\n\n (you need assign it to an issuetype in issuetype workflow scheme, for it to work) \n\n";
            }
        } else {
            $extra_msg = "Please remove extra ones!"
        }
        my $err_msg = "Can't find exactly 1 ${datatype} name in $ENV{scm_jira_url} for $id: '@matched_names' ($extra_msg)";
        runx("bhj-notify", "jkd workflow", $err_msg);
        die $err_msg unless $keep_running;
    }

    return $matched_names[0];
}

sub name2id($name, $datatype) {
    if ($built_in_fields_name_id_map{$name} && $datatype eq "field") {
        return $built_in_fields_name_id_map{$name};
    }

    my $names_ids_json = $datatype_json_map{$datatype};

    if (not $name) {
        die "You should not pass empty name!";
    }
    my @matched_ids = map {
        $_->{id}
    } grep {
        $name eq $_->{name}
    } @$names_ids_json;

    if (@matched_ids != 1) {
        my $extra_msg;
        if (@matched_ids == 0) {
            $extra_msg = "Please create it! check workflow file: ${workflow_xml} \@ $ENV{PWD}";
            if ($datatype eq "status") {
                system("jkd", "go", "workflow");
            }
        } else {
            our %matched_ids_map;
            my $matched_ids = join(".", sort {$a cmp $b} @matched_ids);
            if (not $matched_ids_map{$matched_ids}) {
                $matched_ids_map{$matched_ids} = decode_utf8(scalar capturex("select-args", "-p", "请选择你想要的 id，或直接 Ctrl-C 退出线下处理（比如删掉多余的 ids）", @matched_ids));
            }

            return $matched_ids_map{$matched_ids};
            $extra_msg = "Please remove extra ones!"
        }
        my $err_msg = "Can't find exactly 1 id for ${datatype} name $name: '@matched_ids' ($extra_msg)";
        runx("bhj-notify", "jkd workflow", $err_msg);
        die $err_msg unless $keep_running;
    }

    return $matched_ids[0];
}

sub fields_name2id_number_only($name) {
    (my $id = name2id($name, 'field')) =~ s,customfield_,,;
    return $id
}

my %meta_field_name_json_map = (
    'jira.fieldscreen.id' => 'screens',
    'jira.status.id' => 'status',
);


# 4 matches for "14509"
#     145:            <arg name="fieldsList">customfield_14509</arg>
#     529:                  <arg name="selectedTargetGeneralizedField">14509</arg>
#     671:              <arg name="selectedCustomField">14509</arg>
#     676:              <arg name="selectedFields">field::14509;condition::changedInTransition...</arg>

if (is_exact_action "id2name") {
    $dom->find('arg')->each
        (
            sub {
                if ($_->{name} =~ m,^(hidFieldsList|selectedTargetGeneralizedField|fieldsList)$,) {
                    my @field_ids = grep {m/./} split('@@', $_->text);
                    my @field_names;
                    push @field_names, map {
                        id2name($_, 'field');
                    } @field_ids;

                    $_->replace(sprintf('<arg name="%s">%s</arg>', $_->{name}, xml_quote join('@@', @field_names)));
                } elsif ($_->{name} eq "selectedFields") {
                    my $text = $_->text;

                    die "Can't handle this text: $text" unless $text =~ m,^field::(\d+);,;
                    my $name = id2name($1, 'field');
                    die "bad name $name: it matches ;!" if $name =~ m/;/;

                    $text =~ s,^field::(\d+);,field::${name};,;
                    $_->replace(sprintf('<arg name="%s">%s</arg>', $_->{name}, xml_quote $text));
                } elsif ($_->{name} eq "failureMessageField" && $_->text ne "none") {
                    my $text = $_->text;
                    my $name = id2name($text, 'field');
                    die "bad name $name: it matches ;!" if $name =~ m/;/;
                    $_->replace(sprintf('<arg name="%s">%s</arg>', $_->{name}, xml_quote $name));
                } elsif ($_->{name} eq "rightTextExpression" || $_->{name} eq "leftTextExpression" || $_->{name} eq "textToParse") {
                    if ((my $text = $_->text) =~ s,^\%\{|\}$,,g) {
                        my $name = id2name($text, 'field');
                        die "bad name $name: it matches ;!" if $name =~ m/;/;
                        $_->replace(sprintf('<arg name="%s">%%{%s}</arg>', $_->{name}, xml_quote $name));
                    }
                } elsif ($_->{name} =~ m,^(failureMessage)$,) {
                    my $text = $_->text;
                    my %id_name_map;
                    while ($text =~ m,\%\{(\d+)\},g) {
                        my $id = $1;
                        my $name = id2name($id, 'field');
                        $id_name_map{$id} = $name;
                        die "bad name $name: it matches ;!" if $name =~ m/[%{}]/;
                    }
                    $text =~ s:\%\{(\d+)}:sprintf('%{%s}', $id_name_map{$1}):ge;
                    $_->replace(sprintf('<arg name="%s">%s</arg>', $_->{name}, xml_quote $text));
                } elsif ($_->{name} eq "field") {
                    my $text = $_->text;
                    my $name = id2name($text, 'field');
                    die "bad name $name: it matches ;!" if $name =~ m/;/;
                    $_->replace(sprintf('<arg name="%s">%s</arg>', $_->{name}, xml_quote $name));
                } elsif ($_->{name} eq "selectedCustomField") {
                    my $text = $_->text;
                    my $name = id2name($text, 'field');
                    die "bad name $name: it matches ;!" if $name =~ m/;/;
                    $_->replace(sprintf('<arg name="%s">%s</arg>', $_->{name}, xml_quote $name));
                } elsif ($_->{name} eq "emailBody") {
                    my $text = $_->text;
                    sub big_field_id2name($id) {
                        if ($id >= 10000) {
                            return id2name($id, 'field');
                        } else {
                            return $id;
                        }
                    }
                    $text =~ s:\%\{(\d{5})\}:sprintf('%{%s}', big_field_id2name($1)):eg;
                    $_->replace(sprintf('<arg name="%s">%s</arg>', $_->{name}, xml_quote $text));
                }
            }
        );

    $dom->find('meta')->each(
            sub {
                for my $meta_name (keys %meta_field_name_json_map) {
                    if ($_->{name} eq $meta_name and $_->text) {
                        my $name = id2name($_->text, $meta_field_name_json_map{$meta_name});
                        $_->replace(sprintf('<meta name="%s">%s</arg>', $_->{name}, xml_quote $name));
                    }
                }
            }
        );

} elsif (is_exact_action "name2id") {
    $dom->find('arg')->each
        (
            sub {
                if ($_->{name} =~ m,^(hidFieldsList|selectedTargetGeneralizedField|fieldsList)$,) {
                    my @field_names = grep {m/./} split('@@', $_->text);
                    my @field_ids;
                    my $arg_name = $_->{name};

                    @field_ids = map {
                        if ($arg_name !~ m,fieldslist,i) {
                            $_ = fields_name2id_number_only $_;
                        } else {
                            $_ = name2id($_, 'field') if $_;
                        }
                    } @field_names;

                    if (@field_ids != @field_names) {
                        die "#field ids != #field names: @field_ids, @field_names" unless $keep_running;
                    }
                    $_->replace(sprintf('<arg name="%s">%s</arg>', $_->{name}, xml_quote join('@@', @field_ids)));
                } elsif ($_->{name} eq "selectedFields") {
                    my $text = $_->text;

                    die "Can't handle this text: $text" unless $text =~ m,^field::(.*?);,;
                    my $id = fields_name2id_number_only $1;

                    $text =~ s,^field::(.*?);,field::${id};,;
                    $_->replace(sprintf('<arg name="%s">%s</arg>', $_->{name}, xml_quote $text));
                } elsif ($_->{name} eq "failureMessageField" && $_->text ne "none") {
                    my $text = $_->text;
                    my $id = fields_name2id_number_only($text);
                    $_->replace(sprintf('<arg name="%s">%s</arg>', $_->{name}, $id));
                } elsif ($_->{name} eq "rightTextExpression" || $_->{name} eq "leftTextExpression" || $_->{name} eq "textToParse") {
                    if ( (my $text = $_->text) =~ s,^\%\{|\}$,,g) {
                        my $id = fields_name2id_number_only $text;
                        $_->replace(sprintf('<arg name="%s">%{%s}</arg>', $_->{name}, $id));
                    }
                } elsif ($_->{name} =~ m,^(failureMessage)$,) {
                    my $text = $_->text;
                    my %name_id_map;
                    while ($text =~ m,\%\{(.*?)\},g) {
                        my $name = $1;
                        my $id = fields_name2id_number_only $name;
                        $name_id_map{$name} = $id;
                    }
                    $text =~ s:\%\{(\d+)}:sprintf('%{%s}', $name_id_map{$1}):ge;
                    $_->replace(sprintf('<arg name="%s">%s</arg>', $_->{name}, xml_quote $text));
                } elsif ($_->{name} eq "field") {
                    my $text = $_->text;
                    my $id = name2id($text, 'field');
                    $_->replace(sprintf('<arg name="%s">%s</arg>', $_->{name}, $id));
                } elsif ($_->{name} eq "selectedCustomField") {
                    my $text = $_->text;
                    my $id = fields_name2id_number_only($text);
                    $_->replace(sprintf('<arg name="%s">%s</arg>', $_->{name}, $id));
                } elsif ($_->{name} eq "emailBody") {
                    my $text = $_->text;
                    sub big_field_name2id($id) {
                        if ($id =~ m,^\d{5}$,) {
                            if ($id >= 10000) {
                                die "Found a big $id, it should be a name";
                            } else {
                                return $id;
                            }
                        } else {
                            return fields_name2id_number_only($id);
                        }
                    }
                    $text =~ s:\%\{(.*?)\}:sprintf('%{%s}', big_field_name2id($1)):eg;
                    $_->replace(sprintf('<arg name="%s">%s</arg>', $_->{name}, xml_quote $text));
                }
            }
        );

    $dom->find('meta')->each
        (
            sub {
                for my $meta_name (keys %meta_field_name_json_map) {
                    if ($_->{name} eq $meta_name and $_->text) {
                        my $id = name2id($_->text, $meta_field_name_json_map{$meta_name});
                        $_->replace(sprintf('<meta name="%s">%s</arg>', $_->{name}, xml_quote $id));
                    }
                }
            }
        );
} else {
    our %exact_actions;
    die "Can't work with action: $action, don't know how, must be one of:\n  " . join(",\n  ", sort {$a cmp $b} keys %exact_actions) . "\n";
}

print $dom;
