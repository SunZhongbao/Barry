#!/usr/bin/env bash

set -e

me=$(readlink -f $0)
if test ! -e "$me"; then
    me=$(readlink -f "$(which $0)")
    if test ! -e "$me"; then
        die "Can't find out about me"
        exit 1
    fi
fi

abs0=$0
if ! [[ $abs0 =~ ^/ ]]; then
    if [[ $abs0 =~ / ]] && test -e $PWD/$abs0; then
        abs0=$PWD/$abs0
    elif test -e "$(which $0)"; then
        abs0=$(which $0)
    else
        die "Can't find abs path for $0"
    fi
fi

b0=$(basename $0)

xrandr() {
    log xrandr "$@"
    command xrandr "$@"
}


## start code-generator "^\\s *#\\s *"
# generate-getopt r:res v:vga @:hdmi
## end code-generator
## start generated code
TEMP=$(getopt -o r:v:h \
              --long hdmi:,res:,vga:,help \
              -n $(basename -- $0) -- "$@")
hdmi=
res=
vga=
eval set -- "$TEMP"
while true; do
    case "$1" in

        --hdmi)
            hdmi=$2
            shift 2
            ;;
        -r|--res)
            res=$2
            shift 2
            ;;
        -v|--vga)
            vga=$2
            shift 2
            ;;
        -h|--help)
            set +x
            echo
            echo
            echo Options and arguments:
            printf "%6s" " "
            printf %-24s '--hdmi=HDMI'
            echo
            printf %6s '-r, '
            printf %-24s '--res=RES'
            echo
            printf %6s '-v, '
            printf %-24s '--vga=VGA'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code


xrandr_out=$(xrandr | grep -v ' disconnected ')

lvds=$(echo "$xrandr_out" | grep '^LVDS' | pn 1)
if test -z "$lvds"; then
    lvds=$(echo "$xrandr_out" | grep -P '^eDP-?1' | pn 1)
fi

if test -z "$vga"; then
    vga=$(echo "$xrandr_out" | grep '^VGA' | pn 1)
fi
if test -z "$hdmi"; then
    hdmi=$(echo "$xrandr_out" | grep '^HDMI' | pn 1)
fi

if test -z "$hdmi"; then
    hdmi=$(echo "$xrandr_out" | grep '^DP-?1' -P | pn 1)
fi

if echo "$xrandr_out" | grep '^VGA\S* disconnected' -P || test -z "$vga"; then
    vga=$hdmi
fi

declare -A display_size_map
while read -r display connected setting; do
    size=$(echo $setting | perl -ne 'print if s/.*?(\d+mm x \d+mm)$/$1/')
    display_size_map[$display]=$size
done <<<"$(echo "$xrandr_out" | grep connected)"

if test $(basename $0) = switch-to-vga; then
    xrandr --output $lvds --auto --below $vga
    xrandr --output $vga --auto
elif test $(basename $0) = switch-to-vga-alone; then

    if test "$1"; then
        vga=$1
    else
        vga=$(
            for x in ${!display_size_map[@]}; do
                echo $x ${display_size_map[$x]}
            done | sort -n -k 2 -r | head -n 1 |pn 1
           )
        log "vga is $vga, specify it as an extra arg if incorrect."
    fi

    for x in ${!display_size_map[@]}; do
        if test "${x}" = ${vga}; then
            continue
        fi
        log off you go: $x
        xrandr --output $x --off
    done
     xset dpms force off || true
     xrandr --output $vga --auto
elif test $(basename $0) = switch-to-hdmi-and-laptop; then
    touch /tmp/bhj-notify-not-working
    xrandr --output $lvds --auto --below $hdmi
    xrandr --output $hdmi --auto
    xrandr --output $lvds --auto --below $hdmi
    xrandr --output $hdmi --auto
elif test $(basename $0) = switch-to-hdmi; then
    xrandr --output $lvds --off
    if test "${vga}" != "${hdmi}"; then
        xrandr --output $vga --off
    fi
    xrandr --output $hdmi --auto
elif test $(basename $0) = switch-to-laptop; then
    xrandr --output $lvds --auto
    xrandr --output $hdmi --off
    xrandr --output $vga --off
else # both display
    log add new mode of 1360 768, for using it on my TV
    (
        set +x
        newmode=$(cvt 1360 768 | perl -ne 's/"//g; print $'\'' if m/^Modeline /') &&
            xrandr --newmode $newmode

        if ! xrandr --addmode "$vga" ${newmode%% *} >/dev/null 2>&1; then
            log Failed to add newmode ${newmode%% *} for $vga
        fi
    ) || true

    res=$(
        echo "${xrandr_out}" | perl -ne "
$(
cat <<'EOF37006bec88ab' | . .replace-%% --
# {%perl-mode%}
if (m/^(\S+)\s+connected/) {
    $dev = $1;
}

if (m/^\s+(\d+x\d+)/) {
    $dev_res_map{$dev}{$1} = 1;
}

END {
    for $vga_res (sort {$b <=> $a} keys %{$dev_res_map{"<%vga%>"}}) {
        if ($dev_res_map{"<%lvds%>"}{$vga_res}) {
            print "$vga_res";
            exit
        }
    }
}
# {%/perl-mode%}
EOF37006bec88ab

)"
       )

    xrandr --output $lvds --mode $(xrandr |perl -ne "print if m/\Q$lvds\E.*connected/ .. (m/connected/ and not m/\Q$lvds\E/)" |pn 1 | grep $res|head -n 1) --same-as $vga
    xrandr --output $vga --mode $(xrandr |perl -ne "print if m/\Q$vga\E.*connected/ .. (m/connected/ and not m/\Q$vga\E/)" |pn 1 | grep $res|head -n 1)
fi

if test $(basename $0) = switch-to-both-display; then
    sawfish-client -e '(bind-keys window-keymap "Super-F1" '\''(system "sawfish-force-maximize&"))'
else
    sawfish-client -e '(bind-keys window-keymap "Super-F1" '\''maximize-window-toggle)'
fi >/dev/null 2>&1

sawfish-re-maximize >/dev/null 2>&1
do-natural-scrolling&
