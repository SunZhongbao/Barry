#!/usr/bin/env bash
set -e

declare comment_doc=$(
    cat <<'EOFe9576f8668e0' | grep -v '#.*org-mode%'
# {%org-mode%}

# {%/org-mode%}
EOFe9576f8668e0
        )

## start code-generator "^\\s *#\\s *"
# generate-getopt -P '?"${comment_doc}"' \
    # llist-changed-only

## end code-generator
## start generated code
TEMP=$(POSIXLY_CORRECT=true getopt -o lh \
                      --long list-changed-only,help,no-list-changed-only \
                      -n "$(basename -- "$0")" -- "$@")
declare list_changed_only=false
eval set -- "$TEMP"
while true; do
    case "$1" in

        -l|--list-changed-only|--no-list-changed-only)
            if test "$1" = --no-list-changed-only; then
                list_changed_only=false
            else
                list_changed_only=true
            fi
            shift

            ;;
        -h|--help)
            set +x
            echo -e "${comment_doc}"
            echo
            echo Options and arguments:
            printf %6s '-l, '
            printf %-24s '--[no-]list-changed-only'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code


if test $# != 0; then
    files="$*"
else
    files=$(
        git diff HEAD --name-only
         )
fi

skip_done=false
for f in $files; do
    target_commit=$(select-output-line -p "Which commit do you want to amend for $f? (skip\! to skip)" git log --pretty='%h %s' $(git-remote-branch)..HEAD -- $f | pn 1)
    if test "${target_commit}" = skip; then
        continue
    fi
    if test "${target_commit}" && yes-or-no-p -y "$(git log -1 --name-status $target_commit)"$'\n\n'"use $target_commit which changed $f?"; then
        true
    elif yes-or-no-p "$(git diff HEAD $f;
                          echo "****************************************************************";
                          git-get-log --name-status HEAD;
                          echo;
                          echo piggy back $f with current commit?
                         )"; then
        git add $f
        git commit --amend --no-edit
        continue
    else
        piggy_file=$(select-output-line -p "Which file or commit to piggy (skip\! to skip)" bash -c "git diff --name-only $(git-remote-branch) HEAD; git log --pretty='%H: %s' $(git-remote-branch)..HEAD")
        if test "${piggy_file}" = skip; then
            skip_done=true
            continue
        fi

        if test -e "${piggy_file}"; then
            target_commit=$(f=$piggy_file; select-output-line -p "Which commit do you want to amend for $f?" git log --pretty='%h %s' $(git-remote-branch)..HEAD -- $f | pn 1)
        elif [[ $piggy_file =~ ^[0-9a-f]{40}: ]]; then
            target_commit=${piggy_file%%:*}
        fi

        if test -z "${target_commit}"; then
            die "Can't amend $file, not committed after sync from upstream"
        fi
    fi

    if yes-or-no-p -y "$(git-get-log --name-status $target_commit; echo; echo amend this for 『$f』)"; then
        git add $f
        git commit --fixup=$target_commit
    fi
done

if test $# != 0 -o "${skip_done}" = true; then
    if git-any-changes; then
        need_revert=true
        git add .
        git commit -m "temp"
    fi
fi

git rebase --no-ff -i --autosquash $(git-remote-branch)

if test "${need_revert}"; then
    git reset --soft HEAD^
    git reset HEAD .
fi
