#!/usr/bin/env perl
use strict;
use v5.10.1; # for say and switch
use autodie qw(:all);
use IPC::System::Simple qw(run runx capture capturex $EXITVAL EXIT_ANY);
binmode(STDOUT, ":utf8");
binmode(STDERR, ":utf8");
use Encode;
use utf8;
@ARGV = map {decode_utf8 $_} @ARGV;

use JSON;

my $json = JSON->new->utf8->canonical->pretty;
my $types_json =
    $json->decode(scalar capture("cached-run -e scm_jira_url jkd webcurl $ENV{scm_jira_url}rest/globalconfig/1/customfieldtypes"));


sub get_types() {
    return join("\n    ", map {$_->{name}} @{$types_json->{types}});
}

(my $comment_doc = <<~'EOFc83131117f09') =~ s,^# .*org-mode.*,,gm;
# {%org-mode%}
See also import-field-from-json.
# {%/org-mode%}
EOFc83131117f09

## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl -P '?"$comment_doc"' \
# n:name d:description @:type '?"one of the types specified in rest/globalconfig/1/customfieldtypes (need admin permission)"' \
# S:add-to-screen-name='()' '?"将新字段添加到此面板，可指定多个"' \
# T:add-to-screen-tab-name='()' '?"将新字段添加到对应面板的 Tab 页，可指定多个"' \
#
## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("posix_default");



my @add_to_screen_name = ();
my @add_to_screen_tab_name = ();
my $description = "";
my $name = "";
my $type = "";

my $handler_help = sub {
    print "$comment_doc";
    print "\n\n选项和参数：\n";
    printf "%6s", '-S, ';
    printf "%-24s", '--add-to-screen-name=ADD-TO-SCREEN-NAME';
    if (length('--add-to-screen-name=ADD-TO-SCREEN-NAME') > 24 and length("将新字段添加到此面板，可指定多个") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "将新字段添加到此面板，可指定多个";
    print "\n";
    printf "%6s", '-T, ';
    printf "%-24s", '--add-to-screen-tab-name=ADD-TO-SCREEN-TAB-NAME';
    if (length('--add-to-screen-tab-name=ADD-TO-SCREEN-TAB-NAME') > 24 and length("将新字段添加到对应面板的 Tab 页，可指定多个") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "将新字段添加到对应面板的 Tab 页，可指定多个";
    print "\n";
    printf "%6s", '-d, ';
    printf "%-24s", '--description=DESCRIPTION';
    if (length('--description=DESCRIPTION') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-n, ';
    printf "%-24s", '--name=NAME';
    if (length('--name=NAME') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '';
    printf "%-24s", '--type=TYPE';
    if (length('--type=TYPE') > 24 and length("one of the types specified in rest/globalconfig/1/customfieldtypes (need admin permission)") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "one of the types specified in rest/globalconfig/1/customfieldtypes (need admin permission)";
    print "\n";

    my $exit_value = 0;
    if (@_ && $_[0] ne "help" && $_[1] != 1) {
        $exit_value = shift @_;
        print "@_\n";
    }

    exit($exit_value);
};

GetOptions (
    'add-to-screen-name|S=s' => \@add_to_screen_name,
    'add-to-screen-tab-name|T=s' => \@add_to_screen_tab_name,
    'description|d=s' => \$description,
    'name|n=s' => \$name,
    'type=s' => \$type,
    'help|h!' => \&$handler_help,
);


## end generated code

if (@add_to_screen_name != @add_to_screen_tab_name) {
    die sprintf("Must specify the same number of screens and tabs, you specified %d screens and %d tabs",
                 scalar @add_to_screen_name,
                 scalar @add_to_screen_tab_name
             );
}

if (not $name) {
    $name =
        decode_utf8(scalar capturex("get-stdin", "-p", "What is your field name?"));
}

use String::ShellQuote;

$name =
    decode_utf8(scalar capture(sprintf("echo -n %s | space-cjk-en", shell_quote($name))));

if (not $description) {
    $description =
        decode_utf8(scalar capture("ewe --html --io-only"));
}

my $searcherKey;
if (not $type) {
    my $type_name;

    while (1) {
        $type_name = decode_utf8(scalar capturex("select-args", "Which type do you want?", map {$_->{name}} @{$types_json->{types}}));
        if (runx(EXIT_ANY, "yes-or-no-p", "use $type_name?", ) == 0) {
            last;
        }
    }

    map {
        if ($_->{name} eq $type_name) {
            $type = $_->{key};
            $searcherKey = $_->{searchers}[0];
        }
    } @{$types_json->{types}};
}

my $fields_json = $json->decode(scalar capturex("jkd", "rest", "field", ));

sub nospace_strcmp($$) {
    my @args = @_;
    map {
        s, | ,,g;
    } @args;
    return $args[0] eq $args[1];
}

for (@$fields_json) {
    if (nospace_strcmp $_->{name}, $name) {
        say STDERR "$name already exists: ", ($_->{name});
        exit;
    }
}

my $json_obj = {
    name => ($name),
    description => ($description),
    type => $type,
    searcherKey => $searcherKey,
};


runx("debug-run", "jkd", "post", "-a", "rest/api/2/field", "--json", encode_json($json_obj));
capturex("cached-run", "-e", "scm_jira_url", "-r", "jkd", "rest", "field");

for (1..@add_to_screen_name) {
    my $add_to_screen_name = $add_to_screen_name[$_ - 1];
    my $add_to_screen_tab_name = $add_to_screen_tab_name[$_ - 1];
    if (not $add_to_screen_tab_name) {
        $add_to_screen_tab_name = decode_utf8(scalar capturex(
            "select-output-line", "--ask-for-input", "-1", "-o", "-p", "请选项要使用 ${add_to_screen_name} 的哪个 tab",
            "--", "cached-run", "-e", "scm_jira_url", "jkd", "screen-tab", "-s", "${add_to_screen_name}", "list-tabs",
        ));
    }
    runx("jkd", "screen-tab", "-s", "$add_to_screen_name", "-t", "$add_to_screen_tab_name", "add-fields", "$name" );
}

runx("jkd", "go", "field", "-e", "-m", "$name");
