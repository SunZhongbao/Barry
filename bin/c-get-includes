#!/usr/bin/env bash

set -e
if test "$(readlink -f /proc/$$/fd/2)" != ~/.cache/system-config/logs/$(basename $0).log; then
    exec 2>~/.cache/system-config/logs/$(basename $0).log
fi
set -x

echo args are "$@" 1>&2
export LANG=C
export LC_ALL=C

function get-includes-for-compilation()
{
    tee ~/.cache/system-config/logs/$(basename $0).input | perl -ne '
    if (m/error: .(.*?). (undeclared|was not declared in this scope)/) {
        print "$1\n";
    } elsif (m/error: unknown type name .(\w+)./) {
        print "$1\n";
    } elsif (m/incompatible implicit declaration of built-in function .(\w+)./) {
        print "$1\n";
    }
' | sort -u | tee ~/.cache/system-config/logs/c-get-includes.tee | xargs c-get-includes man
}

function get-includes-for-file()
{
    gcc -pedantic -c "$1" -o /dev/null 2>&1 | get-includes-for-compilation
}

if test $# = 1 -a "$1" != man; then
    get-includes-for-file "$1" | sort -u
    exit
fi

if test $# = 0; then
    get-includes-for-compilation | sort -u
    exit
fi

shift # the 'man'

for func in "$@"; do
    bhj-notify c-get-includes $func
    (
        man 2 "$func" ||
        man 3 "$func"
    ) 2>/dev/null |
    perl -ne '
        if (m/^SYN/..m/^DES/) {
            print "$&\n" if m/#include.*>/;
        }' | grep . || (
        head_file=$(
            EMACS=t select-output-line -p "which include?" grep-beatags -e "${func}" -d /usr/include || true
                 )
        if test "${head_file}"; then
            echo "#include <${head_file%%:*}>"
        fi
    )

done
