#!/usr/bin/env bash

set -e
ulimit -u 2000 || true
. ~/system-config/bin/.gitx

## start code-generator "^\\s *#\\s *"
# generate-getopt @fetch-only @fetch-first
## end code-generator
## start generated code
TEMP=$(getopt -o h \
              --long fetch-only,fetch-first,help,no-fetch-only,no-fetch-first \
              -n $(basename -- $0) -- "$@")
fetch_only=false
fetch_first=false
eval set -- "$TEMP"
while true; do
    case "$1" in

        --fetch-only|--no-fetch-only)
            if test "$1" = --no-fetch-only; then
                fetch_only=false
            else
                fetch_only=true
            fi
            shift
            ;;
        --fetch-first|--no-fetch-first)
            if test "$1" = --no-fetch-first; then
                fetch_first=false
            else
                fetch_first=true
            fi
            shift
            ;;
        -h|--help)
            set +x
            echo
            echo
            echo Options and arguments:
            printf "%6s" " "
            printf %-24s '--[no-]fetch-first'
            echo
            printf "%6s" " "
            printf %-24s '--[no-]fetch-only'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code
if test "$fetch_only" = true -o "$fetch_first" = true; then
    do_fetch=true
else
    do_fetch=false
fi

test $PWD = ~ && cd ~/system-config/

cd "$(dirname "$(lookup-file .git)")"
origin=$(repo-remote)
origin_name_or_url=$origin

if false && is-cron; then # sadly, it won't work, because I have private repos.
    origin_name_or_url=$(git config remote.$origin.url)
    if [[ $origin_name_or_url =~ github.com: ]]; then
        origin_name_or_url=${origin_name_or_url/*github.com:/https:\/\/github.com\/}
    fi
    cron_fetch_refspec="refs/heads/*:refs/remotes/$origin/*"
else
    cron_fetch_refspec=
fi

if git config remote.$origin.url | grep -q .; then
    if git config remote.$origin.url | grep 'git://github.com'; then
        git config remote.$origin.url $(git config remote.$origin.url | perl -npe 's,^git://github.com,https://github.com,')
    fi
else
    # for git svn
    git pull
    exit
fi

if test "$do_fetch" = true; then
    echo fetching $PWD 1>&2
    (
        function mark-merged() {
            if ! git-is-ancestor $(git-remote-branch) HEAD; then
                git-mark-need-merge
            fi
        }
        . atexit mark-merged

        extra_fetch_args=
        if [[ $PWD =~ $HOME/src/github/ ]] && test "$PWD" != ~/.local-config; then
            extra_fetch_args=$(repo-remote-branch|perl -npe 's,.*?/,,')
        fi

        declare -a fetch_cmd=(
            git fetch $origin_name_or_url $cron_fetch_refspec $extra_fetch_args
        )

        for x in $(seq 1 3); do
            if timeout $((x * 10)) "${fetch_cmd[@]}"; then
                exit
            fi
            echo failed $PWD at $x: "${fetch_cmd[@]}"
            sleep $(random 10)
            tsocks1 git fetch $origin_name_or_url $cron_fetch_refspec $extra_fetch_args || {
                log failed $PWD with tsocks1 at $x: "${fetch_cmd[@]}", exit
                kill $$
            }
        done
    )&
    if test "$fetch_only" != true; then
        wait
    else
        sleep 1
    fi
fi

for x in remotes/$(git-remote-branch); do
    remote=$(echo $x|awk -F/ '{print $2}')
    branch=$(echo $x|perl -npe 's/.*?from-mac/from-mac/')
    if git-is-ancestor $x HEAD; then
        echo no need to merge $branch, it is already '*contained*' in HEAD
        touch .git/sc-merged
        continue;
    elif test "$fetch_only" != true; then
        git merge $x >/dev/null 2>&1 || {
            echo $remote/$branch merge failed
            exit -1
        }
    else
        git-mark-need-merge
    fi
done


if test "$fetch_only" = true; then
    if test "$gpm_recurse" = true; then
        wait
    fi
    git submodule -q foreach "pwd" | xargs -P 3 -n 1 bash -c '
    export gpm_recurse=true
    if test ! -d "$1"; then
        exit
    fi
    cd "$1"
    echo recurse: $1
    git-pull-mac --fetch-only || true
' true
    wait
    exit 0
fi

submodule_bash_command=$(printf %q "$(
cat <<'EOFf150e327ac04' | . .replace-%% --
# {%sh-mode%}
    function do-git-pull-mac-twice() {
        set -o pipefail
        logdir=~/.cache/system-config/logs/git-pull-mac/$PWD/
        mkdir -p "$logdir"

        git-pull-mac $(if test "[%fetch_first%]" = true; then echo -n --fetch-first; fi) 2>"$logdir/git-pull-mac.err" | (
            tee "$logdir"/git-pull-mac.out
        )
        cat "$logdir/git-pull-mac.err" 1>&2
    }

    if ! do-git-pull-mac-twice; then
        echo git-pull-mac FAILED in $PWD;
    fi&
# {%/sh-mode%}
EOFf150e327ac04

)")

git submodule -q foreach "bash -c $submodule_bash_command" | grep -v '^Entering '|grep 'FAILED in' || true # wait...
if git config --global user.email| grep -q baohaojun; then
    git submodule -q foreach 'git config user.email baohaojun@gmail.com'
    git config user.email baohaojun@gmail.com
fi >/dev/null 2>&1&
if test "$PWD" = ~/system-config; then
    echo run after-co-ln-s.sh again...
    ~/system-config/bin/after-co-ln-s.sh >/dev/null 2>&1 </dev/null &
fi
mkdir -p ~/.cache/system-config/for-code-reading/$HOME/system-config
touch ~/.cache/system-config/for-code-reading/$HOME/system-config/.for-code-reading
rm -f ~/system-config/.for-code-reading
