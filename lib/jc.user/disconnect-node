#!/usr/bin/env perl
use strict;
use v5.10.1; # for say and switch
use autodie qw(:all);
use IPC::System::Simple qw(run runx capture capturex $EXITVAL EXIT_ANY);
binmode(STDOUT, ":utf8");
binmode(STDERR, ":utf8");
use Encode;
use utf8;
@ARGV = map {decode_utf8 $_} @ARGV;

use feature 'signatures';
no warnings "experimental::signatures";
use Data::Dumper;
use JSON;

my $json = JSON->new->utf8->canonical->pretty;

(my $comment_doc = <<~'EOFc83131117f09') =~ s,^# .*org-mode.*,,gm;
# {%org-mode%}

# {%/org-mode%}
EOFc83131117f09

## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl -P '?"$comment_doc"' \
# n:node-name
## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("posix_default");



my $node_name = "";

my $handler_help = sub {
    print "$comment_doc";
    print "\n\n选项和参数：\n";
    printf "%6s", '-n, ';
    printf "%-24s", '--node-name=NODE-NAME';
    if (length('--node-name=NODE-NAME') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";

    my $exit_value = 0;
    if (@_ && $_[0] ne "help" && $_[1] != 1) {
        $exit_value = shift @_;
        print "@_\n";
    }

    exit($exit_value);
};

GetOptions (
    'node-name|n=s' => \$node_name,
    'help|h!' => \&$handler_help,
);


## end generated code

my $node_json =
    $json->decode(scalar capturex("jc", "curl", "$ENV{scm_jenkins_url}computer/${node_name}/api/json?depth=1", ));

if (grep {
    $_->{currentExecutable}
} @{$node_json->{executors}}) {
    # say STDERR "$node_name is busy: " . decode_utf8($json->encode($node_json->{executors}));
} else {
    exit if $node_json->{offline};
    my $xml = decode_utf8(scalar capturex("jc", "curl", "$ENV{scm_jenkins_url}computer/${node_name}/config.xml", ));
    use Mojo::DOM;
    my $dom = Mojo::DOM->new->parse($xml);
    my $host = $dom->at('host')->text;
    say sprintf("%s", "jssh js-ansible --execute \"set -x; ansible *-$host -m command -a 'sudo poweroff'\"");
}
