#!/usr/bin/env bash

echo "$(debug-args "$@")" > ~/.cache/system-config/logs/s-dicts.log

if test "$#" != 0; then
    text=$(echo $*)
else

    top_window=$(sawfish-top-window)
    if test "$top_window" = Wrench; then
        text=$(getclip-android)
    else
        text=$(xclip -o -selection primary)
    fi
fi
text=$(echo -n "$text"|perl -npe 's/(^(「)|(「|,|　|（|\.|……」|』、『|、|……。|。|！|……|」|』|）)$)//g')
(
    text=$(echo -n "$text" | perl -npe 's/^\s*//; s/\s*$//')
    if [[ $text =~ ^https?:// ]]; then
      u of "$text"
    elif echo "$text" | perl -ne "$(
cat <<'EOF857b9558c0d3' | . .replace-%% --
# {%perl-mode%}
#!/usr/bin/env perl
BEGIN {
    use strict;
    use v5.10.1;                # for say and switch
    use autodie qw(:all);
    use IPC::System::Simple qw(run runx capture capturex $EXITVAL EXIT_ANY);
    binmode(STDOUT, ":utf8");
    binmode(STDERR, ":utf8");
    binmode(STDIN, ":utf8");
    use Encode;
    use utf8;
    @ARGV = map {decode_utf8 $_} @ARGV;

    use feature 'signatures';
    no warnings "experimental::signatures";
}

exit 1 unless m/^(\p{Latin}|\p{Space})*$/
# {%/perl-mode%}
EOF857b9558c0d3

)"; then
        if [[ $text =~ ^[A-Z]+-[0-9]+ ]]; then
            of -w jira "${text%:}"
        else
            search-dict "$text"
        fi
    else
        if ! grep -q "$text" /usr/share/gjiten/dics/*; then
            if [[ $text =~ れて ]]; then
                text=${text%れて}
            elif [[ $text =~ かっ(| )た ]] && grep -q "${text%かっ*}い" /usr/share/gjiten/dics/*; then
                text=${text%かっ*}い
            elif [[ $text =~ って|った ]]; then
                saved_text=$text
                for x in る う; do
                    text=${saved_text%っ*}$x
                    if grep -q "$text" /usr/share/gjiten/dics/*; then
                        break
                    fi
                done
            elif [[ $text =~ な$ ]] && grep -q "${text%な}" /usr/share/gjiten/dics/*; then
                text=${text%な}
            fi
        fi

        if ! grep -q "$text" /usr/share/gjiten/dics/*; then
            case "$text" in
                *、)
                    text=${text%、}
                    ;;
                *ん|*んだ|*んで)
                    saved_text=$text
                    for x in ぶ む; do
                        text=${saved_text%ん*}$x
                        if grep -q "$text" /usr/share/gjiten/dics/*; then
                            break
                        fi
                    done
                    ;;
                *いで|*いて)
                    saved_text=$text
                    for x in く ぐ; do
                        text=${saved_text%い?}$x
                        if grep -q "$text" /usr/share/gjiten/dics/*; then
                            break
                        fi
                    done
                    ;;
                *し)
                    if grep -q "${text%し}"す /usr/share/gjiten/dics/*; then
                        text=${text%し}す
                    else
                        text=${text}た
                    fi
                    ;;
                *っ|*い)
                    text=${text}た
                    ;;
                ## start code-generator "^\\s *#"
                # # {%sh-mode%}
                # : map [あ]=う [か]=く [が]=ぐ [き]=く [く]=い [なかった]=ない [なかっ?た]=ない [さ]=す [た]=つ [な]=ぬ
                # : map [は]=ふ [ば]=ぶ [ま]=む [み]=む [や]=ゆ [ら]=る [り]=る [わ]=う
                # cat ~/system-config/bin/s-dicts | grep ': map' |
                #     perl -ne 'while (m/\[(.*?)\]=(.*?)( |$)/g) {print "$1 $2\n"}' |
                #     while read from to; do
                # cat <<EOF
                # *$from)
                # text=\${text%$from}${to}
                # ;;
                # *${from}れ)
                # text=\${text%${from}れ}${to}
                # ;;
                #EOF
                # done
                #
                # # {%/sh-mode%}
                ## end code-generator
                ## start generated code
                *あ)
                    text=${text%あ}う
                    ;;
                *あれ)
                    text=${text%あれ}う
                    ;;
                *か)
                    text=${text%か}く
                    ;;
                *かれ)
                    text=${text%かれ}く
                    ;;
                *が)
                    text=${text%が}ぐ
                    ;;
                *がれ)
                    text=${text%がれ}ぐ
                    ;;
                *き)
                    text=${text%き}く
                    ;;
                *きれ)
                    text=${text%きれ}く
                    ;;
                *く)
                    text=${text%く}い
                    ;;
                *くれ)
                    text=${text%くれ}い
                    ;;
                *なかった)
                    text=${text%なかった}ない
                    ;;
                *なかったれ)
                    text=${text%なかったれ}ない
                    ;;
                *なかっ?た)
                    text=${text%なかっ?た}ない
                    ;;
                *なかっ?たれ)
                    text=${text%なかっ?たれ}ない
                    ;;
                *さ)
                    text=${text%さ}す
                    ;;
                *され)
                    text=${text%され}す
                    ;;
                *た)
                    text=${text%た}つ
                    ;;
                *たれ)
                    text=${text%たれ}つ
                    ;;
                *な)
                    text=${text%な}ぬ
                    ;;
                *なれ)
                    text=${text%なれ}ぬ
                    ;;
                *は)
                    text=${text%は}ふ
                    ;;
                *はれ)
                    text=${text%はれ}ふ
                    ;;
                *ば)
                    text=${text%ば}ぶ
                    ;;
                *ばれ)
                    text=${text%ばれ}ぶ
                    ;;
                *ま)
                    text=${text%ま}む
                    ;;
                *まれ)
                    text=${text%まれ}む
                    ;;
                *み)
                    text=${text%み}む
                    ;;
                *みれ)
                    text=${text%みれ}む
                    ;;
                *や)
                    text=${text%や}ゆ
                    ;;
                *やれ)
                    text=${text%やれ}ゆ
                    ;;
                *ら)
                    text=${text%ら}る
                    ;;
                *られ)
                    text=${text%られ}る
                    ;;
                *り)
                    text=${text%り}る
                    ;;
                *りれ)
                    text=${text%りれ}る
                    ;;
                *わ)
                    text=${text%わ}う
                    ;;
                *われ)
                    text=${text%われ}う
                    ;;

                ## end generated code
            esac
        fi
        search-gjiten "$text"

    fi&
) 9> /dev/null
exit
