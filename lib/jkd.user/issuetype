#!/usr/bin/env perl
BEGIN {
    push @INC, "$ENV{scm_common_libdir}/jkd.pm";
}
use jkd;
use strict;
use v5.10.1; # for say and switch
use autodie qw(:all);
use IPC::System::Simple qw(run runx capture capturex $EXITVAL EXIT_ANY);
binmode(STDOUT, ":utf8");
binmode(STDERR, ":utf8");
use Encode;
use utf8;
@ARGV = map {decode_utf8 $_} @ARGV;

use JSON;

my $json = JSON->new->utf8->canonical->pretty;

(my $comment_doc = <<~'EOFc83131117f09') =~ s,^# .*org-mode.*,,gm;
# {%org-mode%}
* action = create
- create an issuetype only,
* action = new
- create an issuetype, and init it (fields/screens/workflows, etc.)
* action = update
- update an issuetype
* action = print
- print an issuetype (i.e., the json)

* action = create-scheme
- create an issuetype scheme
* action = update-scheme
* action = list-schemes
* action = get-scheme
- print the scheme that the issuetype belongs to
* action = add-to-scheme
- add the issue to the scheme
* action = edit-fieldconfig
* action = get-workflow
* action = edit-screen
* action = edit-screenscheme
edit a screen that is bound to this issuetype
# {%/org-mode%}
EOFc83131117f09

## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl -P '?"$comment_doc"' \
# a:action \
 # n:issuetype-name \
# d:issuetype-description='""' \
# t:issuetype-type='"standard"' '?"one of standard, subtask"' \
 # s:issuetypescheme-name \
# p:associated-project \
# @:field-name  \
# @:field-json \
# @:j1='$ENV{scm_jira_url}' \
# @:j2 '?"另一个作为对比的 jira 环境的 url"'
## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("posix_default");



my $action = "";
my $associated_project = "";
my $field_json = "";
my $field_name = "";
my $issuetype_description = "";
my $issuetype_name = "";
my $issuetype_type = "standard";
my $issuetypescheme_name = "";
my $j1 = $ENV{scm_jira_url};
my $j2 = "";

my $handler_help = sub {
    print "$comment_doc";
    print "\n\n选项和参数：\n";
    printf "%6s", '-a, ';
    printf "%-24s", '--action=ACTION';
    if (length('--action=ACTION') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-p, ';
    printf "%-24s", '--associated-project=ASSOCIATED-PROJECT';
    if (length('--associated-project=ASSOCIATED-PROJECT') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '';
    printf "%-24s", '--field-json=FIELD-JSON';
    if (length('--field-json=FIELD-JSON') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '';
    printf "%-24s", '--field-name=FIELD-NAME';
    if (length('--field-name=FIELD-NAME') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-d, ';
    printf "%-24s", '--issuetype-description=ISSUETYPE-DESCRIPTION';
    if (length('--issuetype-description=ISSUETYPE-DESCRIPTION') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-n, ';
    printf "%-24s", '--issuetype-name=ISSUETYPE-NAME';
    if (length('--issuetype-name=ISSUETYPE-NAME') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-t, ';
    printf "%-24s", '--issuetype-type=ISSUETYPE-TYPE';
    if (length('--issuetype-type=ISSUETYPE-TYPE') > 24 and length("one of standard, subtask") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "one of standard, subtask";
    print "\n";
    printf "%6s", '-s, ';
    printf "%-24s", '--issuetypescheme-name=ISSUETYPESCHEME-NAME';
    if (length('--issuetypescheme-name=ISSUETYPESCHEME-NAME') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '';
    printf "%-24s", '--j1=J1';
    if (length('--j1=J1') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '';
    printf "%-24s", '--j2=J2';
    if (length('--j2=J2') > 24 and length("另一个作为对比的 jira 环境的 url") > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", "另一个作为对比的 jira 环境的 url";
    print "\n";

    my $exit_value = 0;
    if (@_ && $_[0] ne "help" && $_[1] != 1) {
        $exit_value = shift @_;
        print "@_\n";
    }

    exit($exit_value);
};

GetOptions (
    'action|a=s' => \$action,
    'associated-project|p=s' => \$associated_project,
    'field-json=s' => \$field_json,
    'field-name=s' => \$field_name,
    'issuetype-description|d=s' => \$issuetype_description,
    'issuetype-name|n=s' => \$issuetype_name,
    'issuetype-type|t=s' => \$issuetype_type,
    'issuetypescheme-name|s=s' => \$issuetypescheme_name,
    'j1=s' => \$j1,
    'j2=s' => \$j2,
    'help|h!' => \&$handler_help,
);


## end generated code

use feature 'signatures';
no warnings "experimental::signatures";

sub is_exact_action($target_action) {
    our %exact_actions;
    $exact_actions{$target_action} = 1;
    return $action eq $target_action;
}

if (not $action) {
    $action = shift @ARGV;
}

my $issuetypes_json =
    $json->decode(scalar capture("cached-run -e scm_jira_url jkd rest issuetype"));
my $issuetype_id;
grep {
    $issuetype_id = $_->{id} if $issuetype_name eq $_->{name}
} @$issuetypes_json;

sub get_project($print_result = 1) {
    my $isss_json =
        $json->decode(scalar capture("cached-run -e scm_jira_url jkd export-issuetypeschemes"));
    my @projects;

    map {
        my $iss = $isss_json->{$_};
        if (grep {$issuetype_name eq $_} @{$iss->{issuetypes}}) {
            push @projects, map {$_->{key}} @{$iss->{projects}};
        }
    } keys %$isss_json;

    unless (@projects == 1) {
        @projects = (
            decode_utf8(scalar capturex("jkd", "sel-key", "-a", "project"))
        );
    }
    print $projects[0] if $print_result;
    return $projects[0];
}

sub new_screen($screen_name) {
    my $screen_id = name2id (['rest', 'screens'], $screen_name);
    if (not $screen_id) {
        my $description =
            decode_utf8(scalar capture("ask-for-input-with-sawfish -p 'screen description for $screen_name?'"));
        runx ("jkd", "create-screen", "-n", "$screen_name", "-d", "$description");
        $screen_id = name2id (['rest', 'screens'], $screen_name);
    }

}

sub get_fieldconfig() {
    my $project =
        decode_utf8(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "issuetype", "-a", "get-project", "-n", "$issuetype_name"));

    my $fcss_json =
        $json->decode(scalar capture("cached-run -e scm_jira_url jkd export-fieldconfigschemes"));
    my $fcs_id;
    map {
        my $fcs = $fcss_json->{$_};
        if (grep {$_->{key} eq $project} @{$fcs->{projects}}) {
            $fcs_id = $fcs->{id};
        }
    } keys %$fcss_json;

    die "Can't find fieldconfig scheme for $project" unless $fcs_id;

    my $fcs_json =
        $json->decode(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "export-fieldconfigscheme", "-i", "${fcs_id}"));

    my $fc = $fcs_json->{$issuetype_name}{name};
    my $fc_id = $fcs_json->{$issuetype_name}{id};
    die "can't find fieldconfig for $issuetype_name" unless $fc;
    if (is_exact_action "get-fieldconfig") {
        print $fc;
    } else {
        print $fc_id;
    }
}

if (is_exact_action "print") {
    map {
        if ($_->{name} eq $issuetype_name) {
            print decode_utf8($json->encode($_));
            exit
        }
    } @$issuetypes_json;
} elsif (is_exact_action "create") {

    my %issuetype = (
        name => $issuetype_name,
        description => $issuetype_description,
        type => $issuetype_type,
    );

    runx("jkd", "rest", "issuetype", "--", "-X", "POST", "-H", 'Content-Type: application/json', "--data", decode_utf8($json->encode(\%issuetype)));
} elsif (is_exact_action "get-scheme") {

} elsif (is_exact_action "add-to-scheme") {
    if (not $issuetypescheme_name) {
        if ($associated_project) {
            my $issuetypeschemes_json =
                $json->decode(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "export-issuetypeschemes"));
            map {
                my $scheme = $_;
                if (grep { $associated_project eq $_->{key} or $associated_project eq $_->{name} } @{$issuetypeschemes_json->{$scheme}{projects}}) {
                    die "more than 1 scheme? $scheme : $issuetypescheme_name" if $issuetypescheme_name;
                    $issuetypescheme_name = $scheme;
                }
            } keys %{$issuetypeschemes_json};
        }
        else {
            die "Must specify either issuetypescheme_name or associated_project";
        }
    }
    my $issuetypescheme_json =
        $json->decode(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "export-issuetypescheme", "-n", "$issuetypescheme_name"));

    my @selectedOptions = map {
        $_->{id}
    } @{$issuetypescheme_json->{issuetypes}};

    unless (grep {$issuetype_id eq $_} @selectedOptions) {
        say STDERR "Add issuetype_id: $issuetype_id";
        push @selectedOptions, $issuetype_id;
    }

    my $selectedOptions = join('&', map {"selectedOptions=$_"} @selectedOptions);
    my $issuetypescheme_id = $issuetypescheme_json->{id};
    my $issuetypescheme_description = $issuetypescheme_json->{description};
    my $issuetypescheme_default = $issuetypescheme_json->{default};

    my @params_values = (
        "schemeId=${issuetypescheme_id}",
        "fieldId=issuetype",
            "projectId=",
            "name=${issuetypescheme_name}",
            "description=${issuetype_description}",
            "defaultOption=${issuetypescheme_default}",
            "save=Save",
    );


    runx("debug-run",
        "jkd", "webcurl", "$ENV{scm_jira_url}secure/admin/ConfigureOptionSchemes.jspa?$selectedOptions", "-X", "POST",
        map { ('--data-urlencode', $_) } @params_values);
} elsif (is_exact_action "get-workflow") {
    my $workflow_schemes_json =
        $json->decode(scalar capture("cached-run -e scm_jira_url jkd export-workflowschemes"));

    my $project = get_project(0);
    my $project_json =
        $json->decode(scalar capture("cached-run -e scm_jira_url jkd rest project/${project}"));
    my $project_name = $project_json->{name};

    my @workflows;

    map {
        my $workflow = $_->{issuetypes_workflow}{$issuetype_name};
        my @projects = @{$_->{projects}};
        push @workflows, "$workflow" if $workflow and grep {$_ eq $project_name} @projects;
    } @$workflow_schemes_json;

    die ("Not exactly 1 workflow for issuetype: $issuetype_name " . join(" ", @workflows)) unless @workflows == 1;

    print $workflows[0];
} elsif (is_exact_action "get-project") {
    get_project();
} elsif (is_exact_action ("get-fieldconfig") || is_exact_action ("get-fieldconfig-id")) {
    get_fieldconfig();
} elsif (is_exact_action "update-field") {
    my $fc =
        decode_utf8(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "issuetype", "-a", "get-fieldconfig", "-n", "$issuetype_name"));
    my $fc_json =
        $json->decode(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "export-fieldconfig", "-n", "$fc"));

    $field_json = $json->decode(encode_utf8 $field_json);
    my $field_dump =
        $json->decode(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "dump-field", "-f", $field_name));

    (my $field_json_description = $field_json->{description}) =~ s,\r\n,,g;
    (my $field_dump_description = $field_dump->{description}) =~ s,\r\n,,g;
    (my $fc_field_description = $fc_json->{$field_name}{description}) =~ s,\r\n,,g;

    if ($field_dump_description ne $field_json_description) {
        say STDERR "Need update field itself: " .  decode_utf8($json->encode($field_dump_description));
        runx("jkd", "field", "-a", "update", "-j", decode_utf8($json->encode($field_json)));
    }

    my $fc_id =
        decode_utf8(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "issuetype", "-a", "get-fieldconfig-id", "-n", "$issuetype_name"));

    if ($fc_field_description ne $field_json_description and defined $fc_field_description) {
        say STDERR "Need update field in fieldconfig: " . decode_utf8($json->encode($fc_field_description));
        my @params_values = (
            "description=",
            "position=" . $fc_json->{$field_name}{position},
            "id=${fc_id}",
            "Update=Update",
        );

        runx(
            "jkd", "webcurl", "$ENV{scm_jira_url}secure/admin/EditFieldLayoutItem.jspa", "-X", "POST",
            map { ('--data-urlencode', $_) } @params_values
        );
    }
} elsif (is_exact_action "edit-workflow") {
    my $workflow =
        decode_utf8(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "issuetype", "-a", "get-workflow", "-n", "$issuetype_name"));
    runx("jkd", "go", "workflows", "-e", "$workflow");
} elsif (is_exact_action "diff-fieldconfig") {
    my $fieldconfig =
        decode_utf8(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "issuetype", "-a", "get-fieldconfig", "-n", "$issuetype_name"));
    my $fc_json1 =
        $json->decode(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "export-fieldconfig", "-n", "$fieldconfig"));
    my $fc_json2 =
        $json->decode(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "-j", "$j2", "export-fieldconfig", "-n", "$fieldconfig"));
    my %fieldconfig1 = %$fc_json1;
    my %fieldconfig2 = %$fc_json2;

    my $fields_json =
        $json->decode(scalar capture("cached-run -e scm_jira_url jkd rest field"));
    my %builtin_fields;

    map {
        $builtin_fields{$_->{name}} = 1 if $_->{id} !~ m/customfield_/;
    } @$fields_json;

    for my $field1 (sort keys %fieldconfig1) {
        my $desc1 = $fieldconfig1{$field1}{description};
        next unless (defined $fieldconfig2{$field1} and not $builtin_fields{$field1});

        my $desc2 = $fieldconfig2{$field1}{description};

        if ($desc1 ne $desc2) {
            say STDERR "Working with $field1 ($desc1 <> $desc2)";
            my $field1_dump =
                $json->decode(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "-j", "$j1", "dump-field", "-f", $field1));
            my $field2_dump =
                $json->decode(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "-j", "$j2", "dump-field", "-f", $field1));

            my $desc1_dump = $field1_dump->{description};
            my $desc2_dump = $field2_dump->{description};

            my %desc_map = (
                fc1 => $desc1,
                fc2 => $desc2,
                field1 => $desc1_dump,
                field2 => $desc2_dump,
            );

            say STDERR decode_utf8($json->encode(\%desc_map));

            my $ans =
                decode_utf8(scalar capturex("select-args", "-p", "$field1，你想使用谁的 description？", sort keys %desc_map));

            my $field_json = $field1_dump;
            if (defined $desc_map{$ans}) {
                $field_json->{description} = $desc_map{$ans};
            } else {
                $field_json->{description} = $ans;
            }

            runx("jkd", "-j", "$j1", "issuetype", "-n", "$issuetype_name", "-a", "update-field", "--field-name", "$field1", "--field-json", decode_utf8($json->encode($field_json)));
            runx("jkd", "-j", "$j2", "issuetype", "-n", "$issuetype_name", "-a", "update-field", "--field-name", "$field1", "--field-json", decode_utf8($json->encode($field_json)));
        }
    }
} elsif (is_exact_action "edit-fieldconfig") {
    my $field_config_id =
        decode_utf8(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "issuetype", "-a", "get-fieldconfig-id", "-n", "$issuetype_name"));

    runx(
        "of", "$ENV{scm_jira_url}secure/admin/ConfigureFieldLayout!default.jspa?id=${field_config_id}"
    );

} elsif (is_exact_action "edit-screen") {
    my $issuetype_json =
        $json->decode(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "dump-issuetype", "-i", $issuetype_name));

    my $screen_name =
        decode_utf8(scalar capturex("debug-run", "select-args", "-p", "Which screen do you want?", keys %{$issuetype_json->{screens}}));

    runx("jkd", "go", "screen", "$screen_name");
} elsif (is_exact_action "edit-screenscheme") {
    my $issuetype_json =
        $json->decode(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "dump-issuetype", "-i", $issuetype_name));

    my $screenscheme_name = $issuetype_json->{screenscheme};
    my $screenscheme_id = name2id(["export-screenschemes"], $screenscheme_name);

    runx "of", "$ENV{scm_jira_url}secure/admin/ConfigureFieldScreenScheme.jspa?id=${screenscheme_id}";
} elsif (is_exact_action "edit-field") {

    my $issuetype_json =
        $json->decode(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "dump-issuetype", "-i", $issuetype_name));

    my $field =
        decode_utf8(scalar capturex("select-args", "-p", "which field to edit?", sort keys %{$issuetype_json->{fieldconfig_json}} ));

    runx "jkd", "edit-field", "-a", "edit", "-n", "$field";
} elsif (is_exact_action "new-screen") {
    my $issuetype_json =
        $json->decode(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "dump-issuetype", "-i", $issuetype_name));
    my $associated_project = $issuetype_json->{project};

    my $project_key = name2key(["rest", "project"], $associated_project);
    my $screen_name_postfix =
        decode_utf8(scalar capture("ask-for-input-with-sawfish -p 'screen name postfix?'"));
    my $screen_name = "${project_key}.${issuetype_name}.${screen_name_postfix}";

    new_screen($screen_name);
    run("hint -t 1 '请使用 jkd create-custom-field 来创建字段'");
} elsif (is_exact_action "use-workflow") {
    my $project =
        decode_utf8(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "issuetype", "-a", "get-project", "-n", "$issuetype_name"));

    my $project_name = key2name (['rest', 'project'], $project);
    my $workflowscheme_json =
        $json->decode(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "export-workflowschemes"));

    my $workflow_scheme_id;
    map {
        $workflow_scheme_id = $_->{id} if grep {$project_name eq $_} @{$_->{projects}};
    } @$workflowscheme_json;

    my $workflow_name = $ARGV[0];
    if (not $workflow_name) {
        $workflow_name =
            decode_utf8(scalar capture("ask-for-input-with-sawfish -p 'which workflow?'"));
    }

    runx("jkd", "wfs-switch-wf", '--issuetype-name', $issuetype_name, "--new-wf-name", $workflow_name, "--scheme-id", $workflow_scheme_id, "--scheme-active");
} elsif (is_exact_action "new") { # *** new issuetype ***
    if (not $issuetype_id) {
        my $issuetype_style =
            decode_utf8(scalar capturex("select-args", "-p", "Which kind of issuetype do you want?", "standard", "sub-task"));

        $issuetype_style = ($issuetype_style eq "standard") ? "" : "jira_subtask";
        my $description = $issuetype_description ||
            decode_utf8(scalar capture("ask-for-input-with-sawfish -p 'issuetype description?'"));

        my @params_values = (
            "inline=true",
            "decorator=dialog",
            "name=${issuetype_name}",
            "description=${description}",
            "style=${issuetype_style}",
        );

        runx ("debug-run", "jkd", "webcurl", "$ENV{scm_jira_url}secure/admin/AddIssueType.jspa", "-X", "POST",
              map { ('--data-urlencode', $_) } @params_values);
        my $issuetypes_json =
            $json->decode(scalar capturex("cached-run", "-r", "-e", "scm_jira_url", "jkd", "rest", "issuetype"));
        map {
            if ($issuetype_name eq $_->{name}) {
                $issuetype_id = $_->{id};
            }
        } @$issuetypes_json;
    }

    my $issuetype_json =
        $json->decode(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd",
                                      "dump-issuetype", "-i", "$issuetype_name"));
    if (not $issuetype_json->{project}) {
        if (not $associated_project) {
            $associated_project =
                decode_utf8(scalar capturex("jkd", "sel-name", "-a", "project"));
        }
        runx ("debug-run", "jkd", "issuetype", "-a", "add-to-scheme", "-p", $associated_project, "-n", $issuetype_name);
    } else {
        $associated_project = $issuetype_json->{project};
    }

    my $project_key = name2key (['rest', 'project'], $associated_project);

    if (not $issuetype_json->{fieldconfig}) {
        my $fieldconfig_name = "${project_key}.${issuetype_name}.fieldconfig";
        my $fieldconfigs_json =
            $json->decode(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "export-fieldconfigs"));
        if (not grep {$fieldconfig_name eq $_->{name}} @$fieldconfigs_json) {
            my $description =
                decode_utf8(scalar capture("ask-for-input-with-sawfish -p 'fieldconfig description?'"));

            my @params_values = (
                "inline=true",
                "decorator=dialog",
                "fieldLayoutName=${fieldconfig_name}",
                "fieldLayoutDescription=${description}",
            );

            runx ("jkd", "webcurl", "$ENV{scm_jira_url}secure/admin/AddFieldConfiguration.jspa", "-X", "POST",
                  map { ('--data-urlencode', $_) } @params_values);

            $fieldconfigs_json =
                $json->decode(scalar capturex("cached-run", "-r", "-e", "scm_jira_url", "jkd", "export-fieldconfigs"));
        }

        my $fieldconfig_id;
        map {
            if ($fieldconfig_name eq $_->{name}) {
                $fieldconfig_id = $_->{id};
            }
        } @$fieldconfigs_json;

        my $fieldconfigschemes_json =
            $json->decode(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "export-fieldconfigschemes"));
        my $fieldconfigscheme_id;
        map {
            my $scheme = $fieldconfigschemes_json->{$_};
            my $projects = $scheme->{projects};
            if (grep {$project_key eq $_->{key}} @$projects) {
                $fieldconfigscheme_id = $scheme->{id};
            }
        } keys %$fieldconfigschemes_json;

        my @params_values = (
            "inline=true",
            "decorator=dialog",
            "id=${fieldconfigscheme_id}",
            "issueTypeId=${issuetype_id}",
            "fieldConfigurationId=${fieldconfig_id}",
        );

        runx (
            "jkd", "webcurl", "$ENV{scm_jira_url}secure/admin/AddIssueTypeToFieldConfigurationAssociation.jspa", "-X", "POST",
            map { ('--data-urlencode', $_) } @params_values
        );
        runx("hint", "现在你需要添加字段、修改面板，然后测试一下", );
    }

    my $screenscheme_id;

    if (not %{$issuetype_json->{screens}}) {
        my $screen_name = "${project_key}.${issuetype_name}.默认面板";
        new_screen($screen_name);
        $issuetype_json->{screens} = {
            $screen_name =>
                $json->decode(scalar capturex("cached-run", "-e", "scm_jira_url", "jkd", "dump-screen", "-s", "${screen_name}")),
        }
    }

    if (not $issuetype_json->{screenscheme}) {
        my $screenscheme_name = "${project_key}.${issuetype_name}.面板方案";
        $screenscheme_id = name2id (['export-screenschemes'], $screenscheme_name);
        if (not $screenscheme_id) {
            my $screen_name =
                decode_utf8(scalar capturex("select-args", "-p", "which screen to use as default?", sort {$a cmp $b} keys %{$issuetype_json->{screens}}));

            runx (
                "jkd", "create-screenscheme", "--screen-name", "$screen_name", "--screenscheme-name", "$screenscheme_name"
            );

            $screenscheme_id = name2id (['export-screenschemes'], $screenscheme_name);
        }
        runx (
            "jkd", "attach-issuetypescreenscheme", "--issuetype", "$issuetype_name", "--project", "$project_key", "--screenscheme", "$screenscheme_name"
        );
    }

    if (not $issuetype_json->{workflow}) {
        my $workflow_name = "${project_key}.${issuetype_name}.workflow";
        if ($workflow_name !~ m,^\p{ascii}*$,) {
            $workflow_name =
                decode_utf8(scalar capturex('pinyin?', "-1", $workflow_name));
        }
        if ($workflow_name !~ m,^\p{ascii}*$,) {
            $workflow_name =
                decode_utf8(scalar capturex("get-stdin", "-p", "请修改 workflow_name，确保其每个字符都是 ascii 字符", '--init-text', $workflow_name));
        }
        if (not name_exists (['rest', 'workflow'], $workflow_name)) {
            runx ("jkd", "workflow", "-a", "create", "-n", "$workflow_name");
        }
        runx ("jkd", "issuetype", "-a", "use-workflow", "-n", $issuetype_name, "$workflow_name");
    }
} else {
    our %exact_actions;
    die "Can't work with action: $action, don't know how, must be one of:\n  " . join(",\n  ", sort {$a cmp $b} keys %exact_actions) . "\n";
}
