#!/usr/bin/env bash

set -e

declare comment_doc=$(
    cat <<'EOFe9576f8668e0' | grep -v '#.*org-mode%'
# {%org-mode%}
jkd rest [-a] ACCESS-POINT [--] [EXTRA_ARGS_TO_CURL...]
# {%/org-mode%}
EOFe9576f8668e0
        )

## start code-generator "^\\s *#\\s *"
# generate-getopt -P '?"${comment_doc}"' \
    # a:access-point '?"Specify which rest api to call"' \
    # f:output-format '?"set to json if require json output, will retry if not json (for e.g., empty)"' \
    # xxtrace
## end code-generator
## start generated code
TEMP=$(POSIXLY_CORRECT=true getopt -o a:f:xh \
                      --long access-point:,output-format:,xtrace,help,no-xtrace \
                      -n $(basename -- $0) -- "$@")
declare access_point=
declare output_format=
declare xtrace=false
eval set -- "$TEMP"
while true; do
    case "$1" in

        -a|--access-point)
            access_point=$2
            shift 2

            ;;
        -f|--output-format)
            output_format=$2
            shift 2

            ;;
        -x|--xtrace|--no-xtrace)
            if test "$1" = --no-xtrace; then
                xtrace=false
            else
                xtrace=true
            fi
            shift

            ;;
        -h|--help)
            set +x
            echo -e "${comment_doc}"
            echo
            echo Options and arguments:
            printf %6s '-a, '
            printf %-24s '--access-point=ACCESS_POINT'
            echo
            printf "%30s" ""
            echo "Specify which rest api to call"
            printf %6s '-f, '
            printf %-24s '--output-format=OUTPUT_FORMAT'
            echo
            printf "%30s" ""
            echo "set to json if require json output, will retry if not json (for e.g., empty)"
            printf %6s '-x, '
            printf %-24s '--[no-]xtrace'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code

if test "${xtrace}" = true; then
    set -x
fi

if test -z "${access_point}"; then
    access_point=$1
    shift
    if test "$1" = --; then
        shift
    fi
fi

if test -z "${access_point}"; then
    die "Must specify the access ponit!"
fi

if ! [[ $access_point =~ ^/?rest/ ]]; then
    access_point=rest/api/2/${access_point#/}
fi

if [[ $access_point =~ :// ]]; then
    j_url=$access_point
else
    j_url="${scm_jira_url}${access_point#/}"
fi

set -o pipefail

max_try=1
if test -z "${output_format}" -a "$#" = 0; then
    # let's be bold, if we found any special cases later, fix it then.
    output_format=json
fi

if test "${output_format}" = json; then
    max_try=3
fi

for try in $(seq 1 $max_try); do
    if ! output=$(curl-f -s -u "${scm_jira_user}:${scm_jira_password}" "$j_url" "$@"); then
        echo "${output}"
        die "jkd curl $j_url $* failed with output: '$output'"
    fi

    if test "${output_format}" = json && {
            test -z "$output" ||
            ! output=$(echo "${output}" | jq .)
        }; then
        log "Failed to get json output"
        sleep $((try * 3))
        if test "${try}" = "$max_try"; then
            die "Can't get json data for $j_url: output is '$output'"
        fi
        continue
    fi
    echo "${output}"
    exit
done

die "Can't get output?"
