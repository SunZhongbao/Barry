#!/usr/bin/python2
#
# (C) 2007 Sven Rech.
# Licensed under the GNU GPL.

import gobject
gobject.threads_init()

import gtk
import getopt, sys
from os.path import abspath, join, basename
import os

sys.path.insert(0, os.environ['scm_common_libdir'])

import glipper, glipper.defs
from glipper.Clipboards import *

try:
        # attempt to set a name for killall
        import prctl
        process_name = basename(__file__)
        prctl.set_name(process_name)
        print "Changed process name to:", process_name
except:
        print "Unable to set process name"

import gettext, locale
GETTEXT_DOMAIN = 'glipper'
gettext.bindtextdomain(GETTEXT_DOMAIN, abspath(join(glipper.defs.DATA_DIR, "locale")))
if hasattr(gettext, 'bind_textdomain_codeset'):
        gettext.bind_textdomain_codeset(GETTEXT_DOMAIN,'UTF-8')
gettext.textdomain(GETTEXT_DOMAIN)

locale.bindtextdomain(GETTEXT_DOMAIN, abspath(join(glipper.defs.DATA_DIR, "locale")))
if hasattr(locale, 'bind_textdomain_codeset'):
        locale.bind_textdomain_codeset(GETTEXT_DOMAIN,'UTF-8')
locale.textdomain(GETTEXT_DOMAIN)

import gobject, gtk
import glipper
from glipper.Clipboards import *
from gettext import gettext as _
import pipes

class History(gobject.GObject):
        __gsignals__ = {
                "changed" : (gobject.SIGNAL_RUN_LAST, gobject.TYPE_NONE, [gobject.TYPE_PYOBJECT]),
        }

        def __init__(self):
                gobject.GObject.__init__(self)
                self.history = []
                get_glipper_clipboards().connect('new-item', self.on_new_item)

                self.max_elements = 20

        def get_history(self):
                return self.history

        def on_new_item(self, clipboards, item, is_from_selection):
                self.add(item, is_from_selection)
                os.system("emacs-clipmon {text}".format(text = pipes.quote(item)))

        def clear(self):
                self.history = []
                self.emit('changed', self.history)

        def get(self, index):
                if index >= len(self.history):
                        return

                return self.history[index]

        def set(self, index, item):
                assert item is not None
                item = unicode(item)
                if item in self.history:
                        self.history.remove(item)

                if index == len(self.history):
                        self.history.append(item)
                else:
                        self.history[index] = item
                self.emit('changed', self.history)

        def add(self, item, is_from_selection=False):
                if item is not None:
                        item = unicode(item)
                        if item in self.history:
                                self.history.remove(item)

                        last_item = self.history[0] if self.history else None
                        if is_from_selection and last_item is not None and \
                                        (item.startswith(last_item) or item.endswith(last_item)):
                                self.history[0] = item
                        else:
                                self.history.insert(0, item)

                        if len(self.history) > self.max_elements:
                                self.history = self.history[0:self.max_elements]

                        ctrl_c_item = get_glipper_clipboards().get_default_clipboard_text()
                        if ctrl_c_item is not None and ctrl_c_item not in self.history:
                                self.history[-1] = ctrl_c_item

                # if item is None, emit changed anyway because
                # the current (bold) clipboard item has changed.
                self.emit('changed', self.history)

        def remove(self, index):
                del self.history[index]

        def load(self):
                try:
                        file = open(glipper.HISTORY_FILE, "r")

                        length = file.readline()
                        while length:
                                try:
                                        bytes_to_read = int(length)
                                except ValueError:
                                        break

                                self.history.append(unicode(file.read(bytes_to_read), 'UTF-8'))
                                file.read(1) # This is for \n
                                length = file.readline()

                        file.close()
                except IOError:
                        pass

                self.emit('changed', self.history)

        def save(self):
                try:
                        file = open(glipper.HISTORY_FILE, "w")
                except IOError:
                        return # Cannot write to history file

                for item in self.history:
                        assert isinstance(item, unicode)
                        string = item.encode('UTF-8')
                        file.write(str(len(string)) + '\n')
                        file.write(string + '\n')

                file.close()

        def on_max_elements_changed (self, value):
                return

history = History()

def get_glipper_history():
        return history


if __name__ == "__main__":
        gobject.set_application_name('Glipper')
        gobject.set_prgname('glipper')


        gtk.main()
