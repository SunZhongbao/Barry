#!/usr/bin/env bash
set -e

if is-jenkins; then
    set -x
fi

repo_dir=$(lookup-file -e .repo)
cd $(dirname $repo_dir)

function repo_init_extra_info() {
    (
        cd .repo/manifests || exit
        if test "$(git config repo.depth)"; then
            echo --depth $(git config repo.depth);
        elif test "$(git config repo.force-depth1)" = true; then
            echo --depth 1
        fi
        if test "$(git config manifest.groups)"; then
            echo -g $(git config manifest.groups | tr , '\n'|sort -u|xargs string-join ,)
        fi
    )
}


## start code-generator "^\\s *#\\s *"
# generate-getopt -p repo_init u:url='$(cd "$repo_dir"/manifests >/dev/null 2>&1 && git-remote-url)' \
    # b:branch='$(cd "$repo_dir"/manifests >/dev/null 2>&1 && git config branch.default.merge)' \
    # m:manifest \
    # @:repo-url \
    # @:reference \
    # pprint-info \
    # eedit-xml
## end code-generator
## start generated code
TEMP=$( getopt -o b:em:pu:h \
               --long branch:,edit-xml,manifest:,print-info,reference:,repo-url:,url:,help,no-edit-xml,no-print-info \
               -n $(basename -- $0) -- "$@")
declare repo_init_branch=$(cd "$repo_dir"/manifests >/dev/null 2>&1 && git config branch.default.merge)
declare repo_init_edit_xml=false
declare repo_init_manifest=
declare repo_init_print_info=false
declare repo_init_reference=
declare repo_init_repo_url=
declare repo_init_url=$(cd "$repo_dir"/manifests >/dev/null 2>&1 && git-remote-url)
eval set -- "$TEMP"
while true; do
    case "$1" in

        -b|--branch)
            repo_init_branch=$2
            shift 2

            ;;
        -e|--edit-xml|--no-edit-xml)
            if test "$1" = --no-edit-xml; then
                repo_init_edit_xml=false
            else
                repo_init_edit_xml=true
            fi
            shift

            ;;
        -m|--manifest)
            repo_init_manifest=$2
            shift 2

            ;;
        -p|--print-info|--no-print-info)
            if test "$1" = --no-print-info; then
                repo_init_print_info=false
            else
                repo_init_print_info=true
            fi
            shift

            ;;
        --reference)
            repo_init_reference=$2
            shift 2

            ;;
        --repo-url)
            repo_init_repo_url=$2
            shift 2

            ;;
        -u|--url)
            repo_init_url=$2
            shift 2

            ;;
        -h|--help)
            set +x
            echo -e
            echo
            echo Options and arguments:
            printf %6s '-b, '
            printf %-24s '--branch=BRANCH...'
            echo
            printf %6s '-e, '
            printf %-24s '--[no-]edit-xml'
            echo
            printf %6s '-m, '
            printf %-24s '--manifest=MANIFEST'
            echo
            printf %6s '-p, '
            printf %-24s '--[no-]print-info'
            echo
            printf "%6s" " "
            printf %-24s '--reference=REFERENCE'
            echo
            printf "%6s" " "
            printf %-24s '--repo-url=REPO_URL'
            echo
            printf %6s '-u, '
            printf %-24s '--url=URL...'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code


if test "${repo_init_print_info}" = true; then
    print=$(
        echo repo init $(repo_init_extra_info) -u $(cd .repo/manifests && git-remote-url) -b $(cd "$repo_dir"/manifests >/dev/null 2>&1 && git config branch.default.merge) \
             -m $(
            if test -L .repo/manifest.xml; then
                readlink .repo/manifest.xml|perl -npe 's,^manifests/,,'
            else
                echo "default.xml?"
            fi
             ) --repo-url $(cd .repo/repo && git-remote-url) $(
            ref=$(cd .repo/manifests.git; git config repo.reference || true)
            if test "$ref"; then
                if test "$(readlink -f ~/src/android-mirror)" = "$(readlink -f "$ref")"; then
                    ref=~/src/android-mirror
                fi
                echo --reference $(up $ref)
            fi
             ) | perl -npe "$(
cat <<'EOFe7f172780f03' | . .replace-%% --
# {%perl-mode%}
s,\bs:,$ENV{scm_gerrit_admin_ssh_url},g;
s,-b refs/heads/,-b ,;

END {
    print "    # 注意上面的 -u 和 --repo-url 参数的 ssh://...@ 是给 CI/CD 自动化脚本使用的\n";
    print "    # 你需要将 ... 改成自己的 gerrit 用户名";
}
# {%/perl-mode%}
EOFe7f172780f03

)" | perl -pe 's, -, \\\n    -,g'
         )
    echo "$print"
    if is-tty-io </dev/stdout && ! is-jenkins; then
        echo "$print" | putclip >/dev/null 2>&1 || true
    fi
    exit 0
fi

if test "${repo_init_edit_xml}" = true; then
    e .repo/manifest.xml
    exit 0
fi

if test $# != 0; then
    die "extra args not recognized: $@"
fi

if test "$repo_init_branch" = :; then
    (
        cd .repo/manifests
        git pull
    )
    repo_init_branch=$(cd .repo/manifests; select-output-line "git branch -a |perl -npe  'print if s,^\s*remotes/origin/,,'")
fi

if test -z "$repo_init_repo_reference"; then
    repo_init_repo_reference=$(
        if test -d .repo/manifests.git; then
            cd .repo/manifests.git && git config repo.reference || true
        fi
                  )
    if test "$repo_init_repo_reference"; then
        repo_init_repo_reference="--reference $repo_init_repo_reference"
    fi
fi

if test -z "$repodir"; then
    die "repo-switch can only be used in a repo inited directory (with a .repo in it)"
fi

repodir=$(lookup-file -e .repo)
if test -e "$repodir"/repo-switch && grep '^export' -q "$repodir"/repo-switch; then
    . "$repodir"/repo-switch

    old_repo_init_url=$(cd "$repodir"/manifests; git-remote-url)
    old_repo_init_branch=
    old_repo_init_manifest=
    old_repo_init_repo_url=

    TEMP=$(getopt -o u:b:m:r: -n $(basename $0) -- "${repo_init_args[@]}")
    eval set -- "$TEMP"
    while true; do
        case "$1" in
            -u)
                old_repo_init_url=$2
                shift 2
                ;;
            -b)
                old_repo_init_branch=$2
                shift 2
                ;;
            -m)
                old_repo_init_manifest=$2
                shift 2
                ;;
            -r)
                old_repo_init_repo_url=$2
                if test "$old_repo_init_repo_url" = --; then
                    old_repo_init_repo_url=
                fi
                shift 2
                ;;
            --)
                shift
                break
                ;;
            *)
                die "internal error: $(. bt; echo; bt | indent-stdin)"
                ;;
        esac
    done
fi

if test -z "$repo_init_url"; then
    if test $interactive = 1; then
        echo The repo init url to use:
        repo_init_url=$(select-output-line -- bash -c "echo $old_repo_init_url; cat ~/.repoconfig/repo_init_urls 2>/dev/null")
    else
        repo_init_url=${old_repo_init_url:-$(cat ~/.repoconfig/.repo_manifest_url)}
    fi
fi

if test -z "$repo_init_branch"; then
    if test $interactive = 1; then
        echo The repo init branch to use:
        repo_init_branch=$(select-output-line -- bash -c "echo $old_repo_init_branch; (cd $(lookup-file .repo/manifests) && git branch -a | pn 1 | perl -npe 's!remotes/.*?/!!' | sort -u)")
    else
        repo_init_branch=${old_repo_init_branch:-master}
    fi
fi

if ! tty >/dev/null 2>&1 && test -z "$repo_init_manifest"; then
    repo_init_manifest=${old_repo_init_manifest:-default.xml}
fi

if test -z "$repo_init_manifest" || ! [[ "$repo_init_manifest" =~ \.xml$ ]]; then
    if test $interactive = 1 || ! [[ "$repo_init_manifest" =~ \.xml$ ]]; then
        echo The repo manifest to use:
        if test -n "$repo_init_manifest"; then
            manifest_pattern="(m!$repo_init_manifest! and not m!manifest_backup/!)"
        else
            manifest_pattern="m/./";
        fi
        repo_init_manifest=$(select-output-line -s '' -o -- bash -c "echo $old_repo_init_manifest;
                                                         (cd $(lookup-file .repo/manifests) &&
                                                          find . -name '*.xml' |
                                                          perl -npe 's!^\./!!' |
                                                          perl -ne 'print if $manifest_pattern')")
    else
        repo_init_manifest=${old_repo_init_manifest:-default.xml}
    fi
fi

if test -z "$repo_init_repo_url"; then
    if test $interactive = 1; then
        echo The repo url to use:
        repo_init_repo_url=$(select-output-line -- bash -c "(echo $old_repo_init_repo_url; cat ~/.repo_init_repo_urls 2>/dev/null)|uniq-even-non-ajacent")
    else
        repo_init_repo_url=${old_repo_init_repo_url}
    fi
fi

(echo $repo_init_url; cat ~/.repoconfig/repo_init_urls 2>/dev/null) | uniq-even-non-ajacent > ~/.repoconfig/repo_init_urls.bak
mv ~/.repoconfig/repo_init_urls.bak ~/.repoconfig/repo_init_urls


(
    echo $repo_init_repo_url;
    cat ~/.repo_init_repo_urls 2>/dev/null
) |uniq-even-non-ajacent > ~/.repo_init_repo_urls.$$
mv ~/.repo_init_repo_urls.$$ ~/.repo_init_repo_urls

cd "$repodir"
test -d manifests

cp -av $(readlink -f manifest.xml) manifest.xml.old || true
rm manifest.xml || true

if test -e $repo_init_manifest && [[ $repo_init_manifest =~ ^/ ]]; then
    ln -s $repo_init_manifest manifest.xml
    touch $repo_init_manifest
    exit
fi

mkdir -p local_manifests/
if test -e local_manifests/local_manifist.xml; then
    mv local_manifests/local_manifist.xml local_manifests/local_manifist.xml.2
fi

cd manifests
git checkout HEAD^
for x in `git branch|grep -v '^\*'`; do git branch -D $x; done

(
    set -x;
    (
        cd $(lookup-file .repo/repo)
        git config remote.origin.url $repo_init_repo_url
    )
    (
        cd $(lookup-file-dir -e .repo)
        repo init -u $repo_init_url -b $repo_init_branch -m $repo_init_manifest --repo-url=$repo_init_repo_url -p auto "$@" $config_name \
             $(if test "$repo_init_repo_reference"; then echo "$repo_init_repo_reference"; fi) $(repo_init_extra_info)
    )

    (
        cd $(lookup-file .repo/)
        touch manifest.xml
    )
)

cd ..

if test -x repo-init-hook; then
    ./repo-init-hook
fi

if test -e local_manifests/local_manifist.xml.2; then
    mv -v local_manifests/local_manifist.xml.2 local_manifests/local_manifist.xml
fi

(
    printf 'export repo_init_args=('
    for x in -u $repo_init_url -b $repo_init_branch -m $repo_init_manifest -r $repo_init_repo_url -- "$@"; do
        printf ' %q' "$x";
    done
    printf ')'
) > $(
    if test -e repo-switch; then
        for seq in $(seq 9 -1 1); do
            last=$((seq - 1))
            mv repo-switch.$last repo-switch.$seq >/dev/null 2>&1 || true
        done

        mv repo-switch repo-switch.0 >/dev/null 2>&1 || true
    fi
    echo repo-switch
)
