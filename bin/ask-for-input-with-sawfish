#!/usr/bin/env bash

set -e

## start code-generator "^\\s *#\\s *"
# generate-getopt -P p:prompt='"> "' ssecret kdo-kill
## end code-generator
## start generated code
TEMP=$(POSIXLY_CORRECT=true getopt -o kp:sh \
                      --long do-kill,prompt:,secret,help,no-do-kill,no-secret \
                      -n $(basename -- $0) -- "$@")
declare do_kill=false
declare prompt="> "
declare secret=false
eval set -- "$TEMP"
while true; do
    case "$1" in

        -k|--do-kill|--no-do-kill)
            if test "$1" = --no-do-kill; then
                do_kill=false
            else
                do_kill=true
            fi
            shift

            ;;
        -p|--prompt)
            prompt=$2
            shift 2

            ;;
        -s|--secret|--no-secret)
            if test "$1" = --no-secret; then
                secret=false
            else
                secret=true
            fi
            shift

            ;;
        -h|--help)
            set +x
            echo -e
            echo
            echo Options and arguments:
            printf %6s '-k, '
            printf %-24s '--[no-]do-kill'
            echo
            printf %6s '-p, '
            printf %-24s '--prompt=PROMPT'
            echo
            printf %6s '-s, '
            printf %-24s '--[no-]secret'
            echo
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code

if test "$do_kill" = true; then
    fuser ~/.cache/system-config/logs/$(basename $0).lock2|xargs ps 1
    fuser -k ~/.cache/system-config/logs/$(basename $0).lock2
    exit 0
fi

if test -z "${INPUT_LOCK_FILE}"; then
    if is-cron; then
        lock_suffix=cron
        INPUT_LOCK_FILE=~/.cache/system-config/logs/$(basename $0).lock.$lock_suffix
    else
        INPUT_LOCK_FILE=~/.cache/system-config/logs/NONE
    fi
fi

exec 9> "${INPUT_LOCK_FILE}"
if test "${INPUT_LOCK_FILE##*/}" = NONE; then
    true
elif ! flock -n 9; then
    bhj-notify ask-for-input-with-sawfish "$(readlink -f "${INPUT_LOCK_FILE}") locked by $(
echo;

set -o pipefail
fuser "${INPUT_LOCK_FILE}"|
    xargs ps|
    cut -b 1-100|
    head -n 10 || echo ...

)"
    find-or-exec -e yad || true
    flock 9
fi

title=$(echo "$prompt" | tail -n 1)
text=$(echo "${prompt}" | perl -ne "$(
cat <<'EOF0f633b1d530b' | . .replace-%% --
# {%perl-mode%}
push @lines, $_;
END {
    use Encode;
    my $max = 30;
    if ($. > $max) {
        @lines = @lines[0 .. ${max}/2, ($. - ${max}/2) .. $.];
        $lines[$max/2] = sprintf("... (too many of lines, %d omitted) ...\n", $. - $max);
    }

    map {
        $_ = decode_utf8 $_;
        if (length($_) > 80) {
            $_ = substr($_, 0, 40) . "..." . substr($_, length($_) - 40)
        }
        $_ = encode_utf8 $_;
    } @lines;
    print @lines;
}
# {%/perl-mode%}
EOF0f633b1d530b

)")

if test "$secret" = true; then
    ztype='--entry --hide-text'
else
    ztype=--entry
fi

unset WINDOWID # or else the yad will be attached to the XTERM window if started from XTERM, i.e., make it modal
(
    sawfish-window \
        mark \
        --with-mark \
        yad $ztype --geometry=640x480+50+50 --no-markup --text="$text" --title="$title" | space-cjk-en
) 9>/dev/null | rm-last-nl
