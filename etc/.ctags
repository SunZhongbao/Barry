--langdef=kconfig
--langmap=kconfig:(Kconfig)
--regex-kconfig=/^(menu)?config[ \t]*([a-zA-Z0-9_]+)/CONFIG_\2/d,definition/

--langdef=javaprop
--langmap=javaprop:(ExternalMessages.properties)
--regex-javaprop=/^([^=]*)=/\1/d,definition/

--langdef=androidxml
--langmap=androidxml:.xml
--regex-androidxml=/android:id="@\+id\/([^"]*)"/\1/d,id/
--regex-androidxml=/name[ \t]*=[ \t]*"([^"]*)"/\1/d,resource/

--langdef=androidpng
--langmap=androidpng:.png.jpg
--regex-androidpng=/android:id="@\+id\/([^"]*)"/\1/d,id/
--regex-androidpng=/name[ \t]*=[ \t]*"([^"]*)"/\1/d,resource/

--langdef=jar
--langmap=jar:.jar
--regex-jar=/^([a-z][a-zA-Z0-9_]*)/\1/d,rule/
--regex-jar=/^([A-Z][a-zA-Z0-9_]*)/\1/d,token/


--langdef=antlr
--langmap=antlr:.g
--regex-antlr=/^([a-z][a-zA-Z0-9_]*)/\1/d,rule/
--regex-antlr=/^([A-Z][a-zA-Z0-9_]*)/\1/d,token/

--langdef=OrgMode
--langdef=OrgMode:.org.org_archive
--regex-orgmode=/^([ \t]*function[ \t]+)([^ \t]+)/\2/f,function/
--regex-orgmode=/^(\*+[ \t]+.*)/\1/s,struct/
--regex-orgmode=/^(-+[ \t]+.*)/\1/s,struct/
--regex-orgmode=/^[ \t]*:CUSTOM_ID:[ \t]*([^ \t]+)/\1/c,custom-id/
--regex-orgmode=/^[ \t]*#\+name:[ \t]+([^ \t]+)/\1/n,name/
--regex-orgmode=/^[ \t]*<<([^<>]*)>>/\1/c,call/
--regex-orgmode=/^[ \t]*([^ \t()]+)\(\)[ \t]*\{/\1/f,function/
--regex-orgmode=/^[ \t]*sub[ \t]+([^ \t()]+)\(.*\)[ \t]*\{/\1/f,function/
--regex-orgmode=/^[ \t]*declare([ \t]+|([ \t]+-[a-zA-Z]+)*[ \t]+)(([[:alnum:]]|_)+)/\3/d,declare/

--langdef=Clojure
--langmap=Clojure:.clj
--regex-clojure=/\([ \t]*create-ns[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/n,namespace/
--regex-clojure=/\([ \t]*def[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/d,definition/
--regex-clojure=/\([ \t]*defn[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/f,function/
--regex-clojure=/\([ \t]*defn-[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/p,private function/
--regex-clojure=/\([ \t]*defmacro[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/m,macro/
--regex-clojure=/\([ \t]*definline[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/i,inline/
--regex-clojure=/\([ \t]*defmulti[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/a,multimethod definition/
--regex-clojure=/\([ \t]*defmethod[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/b,multimethod instance/
--regex-clojure=/\([ \t]*defonce[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/c,definition (once)/
--regex-clojure=/\([ \t]*defstruct[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/s,struct/
--regex-clojure=/\([ \t]*intern[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/v,intern/
--regex-clojure=/\([ \t]*ns[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/n,namespace/

--langdef=rep
--langmap=rep:.jl
--regex-rep=/^([ \t]*\(def[^ \t]*[ \t]+\(?([^ \t]+))/\2/d,definition/

--langdef=Scala
--langmap=Scala:.scala
--regex-scala=/^[ \t]*def[ \t]+([[:alnum:]]+)/\1/f,function/
--regex-scala=/^[ \t]*override[ \t]+def[ \t]+([[:alnum:]]+)/\1/f,function/
--regex-scala=/^[ \t]*object[ \t]+([[:alnum:]]+)/\1/c,class/
--regex-scala=/^[ \t]*class[ \t]+([[:alnum:]]+)/\1/c,class/
--regex-scala=/^[ \t]*trait[ \t]+([[:alnum:]]+)/\1/c,class/
--regex-scala=/^[ \t]*interface[ \t]+([[:alnum:]]+)/\1/c,class/

--langdef=sh
--langmap=sh:.sh.SH.bsh.bash.ksh.zsh
--regex-sh=/^[ \t]*(([[:alnum:]]|-|_|\?)+)[ \t]*\([ \t]*\)/\1/f,function/
--regex-sh=/^[ \t]*function[ \t]+(([[:alnum:]]|_|-)+)[ \t]*\([ \t]*\)/\1/f,function/
--regex-sh=/^[ \t]*declare([ \t]+|([ \t]+-[A-Za-z]+)*[ \t]+)(([[:alnum:]]|_)+)/\3/d,declare/
--regex-sh=/^[ \t]*##[ \t]*([[:alnum:]]+)/\1/n,note/

--langdef=man
--langmap=man:.1.2.3.4.5.6.7.8
--regex-man=/^([[:alnum:]]+)/\1/s,section/

--langdef=groovy
--langmap=groovy:.groovy
--regex-groovy=/^[ \t]*package[ \t]+([a-zA-Z0-9.-_]+)/\1/p,package/
--regex-groovy=/==[ \t]*section[ \t]+(.*)[ \t]*==/\1/s,section/
--regex-groovy=/^[ \t]*(private|public)?[ \t]*(abstract|final|static)?[ \t]*class[ \t]+([A-Za-z0-9_]+)/\3/h,class/
--regex-groovy=/^[ \t]*(private|public)?[ \t]*interface[ \t]+([A-Za-z0-9_]+)/\2/i,interface/
--regex-groovy=/^[ \t]*(private|public)?[ \t]*trait[ \t]+([A-Za-z0-9_]+)/\2/t,trait/
--regex-groovy=/^[ \t]*(private|public)?[ \t]*enum[ \t]+([A-Za-z0-9_]+)/\2/e,enum/
--regex-groovy=/^[ \t]*[(abstract|final|static) \t]*((def|void|byte|int|short|long|float|double|boolean|char|[A-Z][a-zA-Z0-9_]*)[ \t]+)?([a-zA-Z0-9_]+\(.*\))[ \t]+/~\3/m,package method/
--regex-groovy=/^[ \t]*public[ \t]+[(abstract|final|static) \t]*((def|void|byte|int|short|long|float|double|boolean|char|[A-Z][a-zA-Z0-9_]*)[ \t]+)?([a-zA-Z0-9_]+\(.*\))[ \t]+/+\3/n,public method/
--regex-groovy=/^[ \t]*protected[ \t]+[(abstract|final|static) \t]*((def|void|byte|int|short|long|float|double|boolean|char|[A-Z][a-zA-Z0-9_]*)[ \t]+)?([a-zA-Z0-9_]+\(.*\))[ \t]+/#\3/b,protected method/
--regex-groovy=/^[ \t]*private[ \t]+[(abstract|final|static) \t]*((def|void|byte|int|short|long|float|double|boolean|char|[A-Z][a-zA-Z0-9_]*)[ \t]+)?([a-zA-Z0-9_]+\(.*\))[ \t]+/-\3/v,private method/
--regex-groovy=/^[ \t]*[(final|static|synchronized) \t]*(def|byte|int|short|long|float|double|boolean|char|[A-Z][A-Za-z0-9_]*)[ \t]+([a-zA-Z0-9_]+)([ \t]*[\/]+.*)?/~\2/c,property/
--regex-groovy=/^[ \t]*public[ \t]+[(final|static|synchronized) \t]*(def|byte|int|short|long|float|double|boolean|char|[A-Z][a-zA-Z0-9_]*)[ \t]+([a-zA-Z0-9_]+)([ \t]*[\/]+.*)?/+\2/x,public field/
--regex-groovy=/^[ \t]*protected[ \t]+[(final|static|synchronized) \t]*(def|byte|int|short|long|float|double|boolean|char|[A-Z][a-zA-Z0-9_]*)[ \t]+([a-zA-Z0-9_]+)([ \t]*[\/]+.*)?/#\2/z,protected field/
--regex-groovy=/^[ \t]*private[ \t]+[(final|static|synchronized) \t]*(def|byte|int|short|long|float|double|boolean|char|[A-Z][a-zA-Z0-9_]*)[ \t]+([a-zA-Z0-9_]+)([ \t]*[\/]+.*)?/-\2/l,private field/

--langdef=cmake
--langmap=cmake:.cmake
--regex-cmake=/^function\(([a-zA-Z0-9.-_]+)/\1/f,function/

--langdef=bf
--langmap=bf:.bf
--regex-bf=/^[ \t]*block[ \t]+([a-zA-Z0-9.-_]+)/\1_t/t,type/
--regex-bf=/^[ \t]*block[ \t]+([a-zA-Z0-9.-_]+)/\1/t,type/
