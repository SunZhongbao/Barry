#!/usr/bin/env perl
use strict;
use v5.10.1;                    # for say and switch
use autodie qw(:all);
use IPC::System::Simple qw(run runx capture capturex $EXITVAL EXIT_ANY);
binmode(STDOUT, ":utf8");
binmode(STDERR, ":utf8");
use Encode;
use utf8;
@ARGV = map {decode_utf8 $_} @ARGV;

use Data::Dumper;
use JSON;

my $json = JSON->new->utf8->canonical->pretty;

BEGIN {
    push @INC, "$ENV{scm_common_libdir}/jkd.pm";
}
use jkd;

## start code-generator "^\\s *#\\s *"
# generate-getopt -s perl i:issue t:transition @:fields-json='"{}"' @print-trans
## end code-generator
## start generated code
use Getopt::Long;

Getopt::Long::Configure("default");



my $fields_json = "{}";
my $issue = "";
my $print_trans = 0;
my $transition = "";

my $handler_help = sub {
    print ;
    print "\n\n选项和参数：\n";
    printf "%6s", '';
    printf "%-24s", '--fields-json=FIELDS-JSON';
    if (length('--fields-json=FIELDS-JSON') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-i, ';
    printf "%-24s", '--issue=ISSUE';
    if (length('--issue=ISSUE') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '';
    printf "%-24s", '--[no]print-trans';
    if (length('--[no]print-trans') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";
    printf "%6s", '-t, ';
    printf "%-24s", '--transition=TRANSITION';
    if (length('--transition=TRANSITION') > 24 and length() > 0) {
        print "\n";
        printf "%30s", "";
    }
    printf "%s", ;
    print "\n";

    my $exit_value = 0;
    if (@_ && $_[0] ne "help" && $_[1] != 1) {
        $exit_value = shift @_;
        print "@_\n";
    }

    exit($exit_value);
};

GetOptions (
    'fields-json=s' => \$fields_json,
    'issue|i=s' => \$issue,
    'print-trans!' => \$print_trans,
    'transition|t=s' => \$transition,
    'help|h!' => \&$handler_help,
);


## end generated code

my $jkd_verbose = "$ENV{jkd_verbose}";

if (not $issue) {
    say "must specify the issue";
    &$handler_help();
}

my $transition_json_obj;

$transition_json_obj =
    $json->decode(scalar capturex("jkd", "rest", "issue/${issue}?expand=transitions.fields,changelog,names"));
if ($print_trans) {
    print decode_utf8($json->encode(
        {
            transitions => $transition_json_obj->{transitions}
        }));
    exit;
}

my $old_status = $transition_json_obj->{fields}{status}{name};
my $old_changelogs_n = $transition_json_obj->{changelog}{total};

my $fields_json_obj = decode_json(encode_utf8 $fields_json);
my $transition_name = $transition;

unless ($transition =~ m/^\d+$/) {
    my $json_obj = $transition_json_obj;

    $transition = select_args("-p", "如何变更当前 issue：${issue}", "-i", "$transition", map {sprintf "id=%s: name=%s", $_->{id}, $_->{name}} @{$json_obj->{transitions}});
    say "transition is $transition";
    $transition =~ s,^id=(\d+):.*,$1, or
        die "Invalid transition $transition_name for $ENV{scm_jira_url}browse/${issue}";

    $transition_name = $transition;
}

my $transition_fields_obj;
map {
    if ($_->{id} == $transition) {
        $transition_fields_obj = $_->{fields};
    }
} @{$transition_json_obj->{transitions}};

if ($fields_json ne "{}") {
    update_names_with_fields($fields_json_obj, $transition_json_obj->{names});
}

my $max_tries = 3;
for (my $try = 0; $try < $max_tries; $try++) {
    my $request_data = {
        transition => {
            id => $transition
        },
        fields => $fields_json_obj
    };
    say STDERR "request is " . decode_utf8($json->encode($request_data)) if $jkd_verbose;

    my $result =
        scalar capturex(
            EXIT_ANY,
            "jkd", "rest", "issue/${issue}/transitions", "-X", "POST",
            "-H", "Content-Type: application/json",
            "-H", "Accept: application/json",
            "-d", decode_utf8($json->encode(
                $request_data
            )));

    if ($EXITVAL == 0) {
        say STDERR "Tri to '$transition_name' 成功了，正常退出";
        my $new_json =
            $json->decode(scalar capturex("jkd", "rest", "issue/${issue}?expand=transitions.fields,changelog"));
        my $new_status = $new_json->{fields}{status}{name};
        my $new_changelogs_n = $new_json->{changelog}{total};
        if ($new_status ne $old_status) {
            say STDERR "状态已发生改变，退出";
            last;
        } elsif ($new_changelogs_n != $old_changelogs_n) {
            runx("ding", "-a", "baohaojun", "--title", "jkd tri didn't change status", "--text", "jkd tri didn't change status");
            last;
        } else {
            say STDERR "no new change log, continue";
        }
    }

    say STDERR "result is " . decode_utf8($json->encode($result));
    next unless $result; # result 有可能是空的
    next if $result eq "\n";
    eval {
        $result = $json->decode($result);
    };

    if ($@) {
        say STDERR "$result is not json format? $@";
        next;
    }
    my $errors = $result->{errors};
    for (keys %$errors) {
        # say STDERR "delete $_ and try again: $try";
        delete $fields_json_obj->{$_};
    }
    die "Can't tri it after $try times" if ($try == $max_tries - 1);
}
