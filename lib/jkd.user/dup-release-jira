#!/usr/bin/env bash
set -e

## start code-generator "^\\s *#\\s *"
# generate-getopt -P i:old-issue '?"The old jira issue to copy from"' \
    # @:old-jira-url='${scm_jira_url}' '?"The jira url for the old issue, default is \$scm_jira_url"' \
    # @:old-json \
    # r:replace-regexp '?"默认为空，会传给 perl -pe \"$replace_regexp\"，比如 s,0.9.10,0.9.23,"' \
    # j:jq-expression=. '?"传给 jq 的表达式，比如可以用于改变版本号：.customfield_14504 = \"1.0.0\" 或 .customfield_14108 = (.value = \"HU\")"' \
    # @force-prod \
    # @debug='(true hint)' \
    # @:screen-filter '?"比如「EF:发布需求.Tabbed」"' \
    # @:tri-numbers=3 '?"tri（状态流转）多少次？默认是 3 次"' \

## end code-generator
## start generated code
TEMP=$(POSIXLY_CORRECT=true getopt -o j:i:r:h \
                      --long debug,force-prod,jq-expression:,old-issue:,old-jira-url:,old-json:,replace-regexp:,screen-filter:,tri-numbers:,help,no-debug,no-force-prod \
                      -n $(basename -- $0) -- "$@")
declare debug=true
declare force_prod=false
declare jq_expression=.
declare old_issue=
declare old_jira_url=${scm_jira_url}
declare old_json=
declare replace_regexp=
declare screen_filter=
declare tri_numbers=3
eval set -- "$TEMP"
while true; do
    case "$1" in

        --debug|--no-debug)
            if test "$1" = --no-debug; then
                debug=true
            else
                debug=hint
            fi
            shift

            ;;
        --force-prod|--no-force-prod)
            if test "$1" = --no-force-prod; then
                force_prod=false
            else
                force_prod=true
            fi
            shift

            ;;
        -j|--jq-expression)
            jq_expression=$2
            shift 2

            ;;
        -i|--old-issue)
            old_issue=$2
            shift 2

            ;;
        --old-jira-url)
            old_jira_url=$2
            shift 2

            ;;
        --old-json)
            old_json=$2
            shift 2

            ;;
        -r|--replace-regexp)
            replace_regexp=$2
            shift 2

            ;;
        --screen-filter)
            screen_filter=$2
            shift 2

            ;;
        --tri-numbers)
            tri_numbers=$2
            shift 2

            ;;
        -h|--help)
            set +x
            echo -e
            echo
            echo Options and arguments:
            printf "%6s" " "
            printf %-24s '--[no-]debug'
            echo
            printf "%6s" " "
            printf %-24s '--[no-]force-prod'
            echo
            printf %6s '-j, '
            printf %-24s '--jq-expression=JQ_EXPRESSION'
            echo
            printf "%30s" ""
            echo "传给 jq 的表达式，比如可以用于改变版本号：.customfield_14504 = \"1.0.0\" 或 .customfield_14108 = (.value = \"HU\")"
            printf %6s '-i, '
            printf %-24s '--old-issue=OLD_ISSUE'
            echo "The old jira issue to copy from"
            printf "%6s" " "
            printf %-24s '--old-jira-url=OLD_JIRA_URL'
            echo
            printf "%30s" ""
            echo "The jira url for the old issue, default is \$scm_jira_url"
            printf "%6s" " "
            printf %-24s '--old-json=OLD_JSON'
            echo
            printf %6s '-r, '
            printf %-24s '--replace-regexp=REPLACE_REGEXP'
            echo
            printf "%30s" ""
            echo "默认为空，会传给 perl -pe \"$replace_regexp\"，比如 s,0.9.10,0.9.23,"
            printf "%6s" " "
            printf %-24s '--screen-filter=SCREEN_FILTER'
            echo
            printf "%30s" ""
            echo "比如「EF:发布需求.Tabbed」"
            printf "%6s" " "
            printf %-24s '--tri-numbers=TRI_NUMBERS'
            echo
            printf "%30s" ""
            echo "tri（状态流转）多少次？默认是 3 次"
            exit
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error: $(. bt; echo; bt | indent-stdin)"
            ;;
    esac
done


## end generated code


case "${scm_jira_url}" in
    "${scm_jira_test_url}"|"${scm_jira_test1_url}"|"${scm_jira_test2_url}")
        true
        ;;
    *)
        if test "${force_prod}" != true; then
            die "Can only run in test jira"
        fi
        ;;
esac

if test -z "${old_issue}" -a -z "${old_json}"; then
    die "Must specify the old jira issue to copy from, for e.g., EF-251"
fi

if test -z "${old_json}"; then

    old_json=$(
        set -x
        jkd -j ${old_jira_url} print-issue -i ${old_issue}
            )
fi

$debug echo old json is "${old_json}"

if test "${old_jira_url}"; then
    old_json=$(
        echo "${old_json}" | jkd transcribe-customfields -f "${old_jira_url}" -s "${screen_filter}"
            )
    $debug echo old json is "${old_json}"
fi

old_json=$(
    echo "${old_json}" |jq "${jq_expression}" | perl -pe "${replace_regexp}" |jq 'del(..|.id?)'
        )
project=$(
    echo "${old_json}" | jq '.Project|.key' -r
       )

issuetype=$(
    echo "${old_json}" | jq '."Issue Type"|.name' -r
         )

jira_key=$(
    debug-run jkd c -p "${project}" -t "${issuetype}" \
        --fields-json "${old_json}" 2>&1|
        tee /dev/stderr ~/tmp/dup-release-jira.txt|
        perl -ne 'print if s,POST.*response code:201result:,,' | jq .key -r
        )

$debug created jira: $jira_key
if test -z "${jira_key}"; then
    die "Can't create jira issue"
fi

for n in $(seq 1 ${tri_numbers}); do
    jkd tri -i $jira_key --fields-json "${old_json}"
    $debug transitioned jira: $n
done
echo "jira_key is $jira_key"

firefox "${scm_jira_url}browse/${jira_key}"
